<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <name>Chess</name>
    <groupId>com.leokom</groupId>
    <artifactId>Chess</artifactId>
    <version>0.5-SNAPSHOT</version>


    <!-- Added in order to support github-release-plugin.
    This information is also useful itself for semantic purposes.
     -->
    <scm>
        <url>https://github.com/lrozenblyum/chess</url>
        <connection>scm:git:https://github.com/lrozenblyum/chess.git</connection>
    </scm>

    <!-- Trick to use mvn deploy goal
     We don't have any 'Nexus'-like deploy target yet.
     However I want to be able to use a convenient command mvn clean deploy
     so I specify local storage here -->
    <distributionManagement>
        <repository>
            <id>internal</id>
            <url>file://${project.build.directory}/maven-repository</url>
        </repository>
    </distributionManagement>

    <repositories>
        <repository>
            <id>maven.fluxchess.com</id>
            <url>http://maven.fluxchess.com/release</url>
        </repository>
    </repositories>

    <dependencies>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>${log4j2version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>${log4j2version}</version>
            <!-- I like keeping scope as more precise as possible
            However log4j2 developers say that making it compile
            may improve performance for custom plugins
             -->
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.mutabilitydetector</groupId>
            <artifactId>MutabilityDetector</artifactId>
            <version>0.10.1</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>2.23.4</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.github.stefanbirkner</groupId>
            <artifactId>system-rules</artifactId>
            <version>1.19.0</version>
            <scope>test</scope>
        </dependency>

        <!-- To try improved lambdas in tests, if it succeeds
        we may use it in core as well -->
        <dependency>
            <groupId>org.jooq</groupId>
            <!-- When we upgrade to Java9 we should change to simply jool -->
            <artifactId>jool-java-8</artifactId>
            <version>0.9.14</version>

            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <!-- I'm reluctant to update to 27.0.1 because of https://groups.google.com/forum/#!topic/guava-announce/Km82fZG68Sw
            and a weird additional empty artifact which comes with guava then -->
            <version>26.0-jre</version>
            <!-- The exclusions are done due to https://github.com/google/guava/issues/2824 -->
            <exclusions>
                <exclusion>
                    <groupId>com.google.code.findbugs</groupId>
                    <artifactId>jsr305</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.google.errorprone</groupId>
                    <artifactId>error_prone_annotations</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.google.j2objc</groupId>
                    <artifactId>j2objc-annotations</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>animal-sniffer-annotations</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.checkerframework</groupId>
                    <artifactId>checker-qual</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>com.fluxchess</groupId>
            <artifactId>jcpi</artifactId>
            <version>1.4.0</version>
        </dependency>

        <dependency>
            <groupId>com.fluxchess</groupId>
            <artifactId>jcpi</artifactId>
            <version>1.4.0</version>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
    </dependencies>


    <build>
    	<finalName>Chess</finalName>
        <plugins>
            <!-- Additionally configuring maven clean plug-in in order to clean the deploy directory and thus remove potential old artifacts -->
            <plugin>
                <artifactId>maven-clean-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <filesets>
                        <fileset>
                            <directory>${project.deployDirectory}</directory>
                            <includes>
                                <!-- Let's clean just jars. For example old logs might be useful -->
                                <include>**/*.jar</include>
                            </includes>
                        </fileset>
                    </filesets>
                </configuration>
            </plugin>

            <!-- Copy dependencies into the deploy directory -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>2.10</version>
                <executions>
                    <execution>
                        <id>copy</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <!-- We're interested only in compile&runtime dependencies -->
                            <includeScope>runtime</includeScope>
                            <outputDirectory>${project.deployDirectory}\${dependenciesDirectory}</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
			
			<!-- Set up Jar generation properties, e.g. automatic generation of manifest -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.0.2</version>
                <configuration>

                    <outputDirectory>${project.deployDirectory}</outputDirectory>
                    <archive>
                        <manifest>
                        	<addClasspath>true</addClasspath>
                        	<classpathPrefix>${dependenciesDirectory}</classpathPrefix>
                        	<mainClass>com.leokom.chess.MainRunner</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.pitest</groupId>
                <artifactId>pitest-maven</artifactId>
                <version>1.0.0</version>
                <configuration>
                  <targetClasses>
                    <param>com.leokom.chess.*</param>
                  </targetClasses>
                  <targetTests>
                    <!-- thus avoiding IT tests run -->
                    <param>com.leokom.chess.*Test</param>
                  </targetTests>

                    <!-- XML is required for pitest plugin in SonarQube (default is HTML) -->
                    <outputFormats>
                        <outputFormat>XML</outputFormat>
                    </outputFormats>
                </configuration>
              </plugin>

            <!-- Assembly plug-in will allow us create a *.zip artifact with binaries
             which previously was created manually -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <finalName>${binaryReleaseName}</finalName>
                    <descriptors>
                        <descriptor>src/assembly/assembly-release-archive.xml</descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <execution>
                        <!-- As an alternative we might use a separate profile.
                         Specifying the phase that is earlier than deploy which our release-plugin is bound to -->
                        <phase>install</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- Thanks to this plug-in we'll be able to upload releases to GitHub -->
            <plugin>
                <groupId>de.jutzig</groupId>
                <artifactId>github-release-plugin</artifactId>
                <version>1.3.0</version>
                <configuration>
                    <releaseName>${project.version} release</releaseName>
                    <description>
                       To be defined.
                    </description>
                    <tag>${project.version}</tag>
                    <!-- Automatically it's based on SNAPSHOT presence, however in chess at the moment
                     we consider all 0.* as pre-releases -->
                    <prerelease>true</prerelease>
                    <failOnExistingRelease>true</failOnExistingRelease>

                    <!-- The sources will be added by default. Adding binaries here -->
                    <fileSets>
                        <fileSet>
                            <directory>${project.build.directory}</directory>
                            <includes>
                                <!-- Using the wildcard because maven-assembly-plugin by default adds
                                 suffix with assembly id (like '-bin')-->
                                <include>${binaryReleaseName}*.zip</include>
                            </includes>
                        </fileSet>
                    </fileSets>
                </configuration>
                <executions>
                    <execution>
                        <phase>deploy</phase>
                        <goals>
                            <goal>release</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>


  <!-- BEGIN: Specific to mapping unit tests and covered code (Sonar)-->
	<profiles>
    <profile>
      <id>coverage-per-test</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <!-- Minimal supported version is 2.4 -->
            <version>2.19.1</version>
            <configuration>
              <properties>
                <property>
                  <name>listener</name>
                  <value>org.sonar.java.jacoco.JUnitListener</value>
                </property>
              </properties>
            </configuration>
          </plugin>
        </plugins>
      </build>

      <dependencies>
        <dependency>
          <groupId>org.codehaus.sonar-plugins.java</groupId>
          <artifactId>sonar-jacoco-listeners</artifactId>
          <version>1.2</version>
          <scope>test</scope>
        </dependency>
      </dependencies>
	</profile>
	</profiles>


    <properties>
        <!-- Preventing [WARNING] Using platform encoding to copy filtered resources -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>


        <!-- Naming convention inspired by http://stackoverflow.com/a/30318342/1429367 -->
        <log4j2version>2.11.1</log4j2version>

        <project.deployDirectory>E:\Games\WinBoard-4.8.0\LeokomChess</project.deployDirectory>

        <dependenciesDirectory>lib</dependenciesDirectory>

        <binaryReleaseName>LeokomChess-${project.version}</binaryReleaseName>
    </properties>
</project>