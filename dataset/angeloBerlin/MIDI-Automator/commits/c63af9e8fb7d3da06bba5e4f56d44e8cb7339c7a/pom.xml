<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.midi.automator</groupId>
	<artifactId>midi-automator</artifactId>
	<version>1.0.2</version>

	<!-- Project -->
	<name>MIDI Automator</name>
	<url>http://midi-automator.com</url>
	<description>MIDI Automator is a desktop software for automating user actions (i.e. opening files, clicking buttons) triggered by midi messages.

The main idea is to have a little helper for musicians who use laptops on stage. Most musicians use Ableton Live for that purpose. But they have to store their songs in one big live-set file which is hard to maintain. With MIDI Automator they can prepare and change an ordered set list containing single live-set files. MIDI Automator can listen to midi messages and load the next, previous or desired live-set file. All other features shall support the demand of a fully automated stage setup.

MIDI Automator shall be hold as generic as possible, so that it can also handle other use cases that are way apart from the main idea.
  </description>

	<!-- Properties -->
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.base.package>com.midi.automator</project.base.package>
		<project.main.class>${project.base.package}.Main</project.main.class>
		<project.sikuli.class.path>lib/sikulixapi.jar</project.sikuli.class.path>
		<project.dist.dir>dist</project.dist.dir>
		<project.filelist.file>file_list.mido</project.filelist.file>
		<project.properties.file>midiautomator.properties</project.properties.file>
		<project.lib.dir>lib</project.lib.dir>
		<project.splashscreen.file>splash.png</project.splashscreen.file>
		<project.images.dir>images</project.images.dir>
		<project.demo.dir>demo</project.demo.dir>
		<project.jre.dir>jre</project.jre.dir>

		<!-- MacOS -->
		<project.dist.dir.macos>${project.dist.dir}/MacOS</project.dist.dir.macos>
		<project.dmg>${project.name}.dmg</project.dmg>
		<project.dist.dir.dmg>${project.dist.dir.macos}/${project.dmg}</project.dist.dir.dmg>
		<project.icon.file.macos>MidiAutomatorIcon.icns</project.icon.file.macos>
		<project.dmgbackground.file>DMGBackground.png</project.dmgbackground.file>

		<!-- Windows -->
		<project.dist.dir.windows>${project.dist.dir}/Windows</project.dist.dir.windows>
		<project.nsis.outfile>../${project.dist.dir.windows}/midiautomator_setup.exe</project.nsis.outfile>
		<project.exe.file>${project.name}.exe</project.exe.file>
		<project.icon.file.windows>MidiAutomatorIcon.ico</project.icon.file.windows>
		<project.makensis.exe>${env.PROGRAMFILES(X86)}\NSIS\makensis.exe</project.makensis.exe>
		<project.nsis.config>NSIS/installer.nsi</project.nsis.config>
		<project.nsis.build.dir>NSIS/build</project.nsis.build.dir>
		<project.jre.windows.dir>jre/Windows</project.jre.windows.dir>
	</properties>

	<repositories>
		<repository>
			<id>sikulixapi</id>
			<url>http://oss.sonatype.org/content/groups/public</url>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>Codehaus Snapshots</id>
			<url>http://nexus.codehaus.org/snapshots/</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
			<releases>
				<enabled>true</enabled>
			</releases>
		</pluginRepository>
	</pluginRepositories>

	<!-- Dependencies -->
	<dependencies>
		<dependency>
			<groupId>com.sikulix</groupId>
			<artifactId>sikulixapi</artifactId>
			<version>1.1.0-SNAPSHOT</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>

			<!-- Customize compiler version -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>

			<!-- Customize main class for JAR -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<archive>
						<manifest>
							<mainClass>${project.main.class}</mainClass>
							<addClasspath>true</addClasspath>
						</manifest>
						<manifestEntries>
							<Class-Path>${project.sikuli.class.path}</Class-Path>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
		</plugins>
	</build>


	<profiles>
		<profile>
			<id>MacOS</id>
			<activation>
				<os>
					<family>mac</family>
				</os>
			</activation>
			<build>
				<plugins>

					<!-- Run ANT tasks for bundeling -->
					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.7</version>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<property name="name" value="${project.name}" />
										<property name="demo.dir" value="${project.demo.dir}" />
										<property name="filelist.file" value="${project.filelist.file}" />
										<property name="properties.file" value="${project.properties.file}" />
										<property name="target.dir" value="${project.build.directory}" />
										<property name="lib.dir" value="${project.lib.dir}" />
										<property name="images.dir" value="${project.images.dir}" />
										<property name="jar.file" value="${project.build.finalName}.jar" />
										<property name="base.package" value="${project.base.package}" />
										<property name="main.class" value="${project.main.class}" />
										<property name="splashscreen.file" value="${project.splashscreen.file}" />
										<property name="encoding" value="${project.build.sourceEncoding}" />
										<property name="icon.file.macos" value="${project.icon.file.macos}" />
										<property name="dmgbackground.file" value="${project.dmgbackground.file}" />
										<property name="dist.dmg" value="${project.dmg}" />
										<ant />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Copy deployable packages -->
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<version>2.7</version>
						<executions>
							<execution>
								<id>copy-resources</id>
								<phase>integration-test</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.dist.dir.macos}</outputDirectory>
									<overwrite>true</overwrite>
									<resources>
										<resource>
											<directory>${project.build.directory}</directory>
											<includes>
												<include>${project.dmg}</include>
											</includes>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>Windows</id>
			<activation>
				<os>
					<family>windows</family>
				</os>
			</activation>
			<build>
				<plugins>

					<!-- Run Launch4j to build an .exe -->
					<plugin>
						<groupId>com.akathist.maven.plugins.launch4j</groupId>
						<artifactId>launch4j-maven-plugin</artifactId>
						<version>1.7.5</version>
						<executions>
							<execution>
								<id>l4j-clui</id>
								<phase>package</phase>
								<goals>
									<goal>launch4j</goal>
								</goals>
								<configuration>
									<headerType>gui</headerType>
									<jar>${project.build.directory}/${project.build.finalName}.jar</jar>
									<outfile>${project.build.directory}/${project.exe.file}</outfile>
									<cmdLine>-wd=&quot;%APPDATA%\\${project.name}&quot;\\</cmdLine>
									<classPath>
										<mainClass>${project.main.class}</mainClass>
									</classPath>
									<icon>${project.images.dir}/${project.icon.file.windows}</icon>
									<jre>
										<minVersion>1.7.0</minVersion>
										<maxVersion>1.7.9</maxVersion>
										<jdkPreference>preferJre</jdkPreference>
										<runtimeBits>64</runtimeBits>
										<opts>
											<opt>-splash:images/${project.splashscreen.file}</opt>
											<opt>-Dfile.encoding=${project.build.sourceEncoding}</opt>
										</opts>
									</jre>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Copy resources for NSIS installer -->
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<version>2.7</version>
						<executions>
							<execution>
								<id>copy-artifacts</id>
								<phase>package</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.nsis.build.dir}</outputDirectory>
									<overwrite>true</overwrite>
									<resources>
										<resource>
											<directory>${project.build.directory}</directory>
											<includes>
												<include>${project.exe.file}</include>
												<include>${project.build.finalName}.jar</include>
											</includes>
										</resource>
										<resource>
											<directory>${project.demo.dir}</directory>
											<includes>
												<include>${project.filelist.file}</include>
												<include>${project.properties.file}</include>
											</includes>
										</resource>
									</resources>
								</configuration>
							</execution>
							<execution>
								<id>copy-images</id>
								<phase>package</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.nsis.build.dir}/${project.images.dir}</outputDirectory>
									<overwrite>true</overwrite>
									<resources>
										<resource>
											<directory>${project.images.dir}</directory>
										</resource>
									</resources>
								</configuration>
							</execution>
							<execution>
								<id>copy-libs</id>
								<phase>package</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.nsis.build.dir}/${project.lib.dir}</outputDirectory>
									<overwrite>true</overwrite>
									<resources>
										<resource>
											<directory>${project.lib.dir}</directory>
										</resource>
									</resources>
								</configuration>
							</execution>
							<execution>
								<id>copy-jre</id>
								<phase>package</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.nsis.build.dir}/${project.jre.dir}</outputDirectory>
									<overwrite>true</overwrite>
									<resources>
										<resource>
											<directory>${project.jre.windows.dir}</directory>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Build NSIS installer -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>nsis-maven-plugin</artifactId>
						<version>1.0-SNAPSHOT</version>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>generate-project</goal>
									<goal>compile</goal>
								</goals>
								<configuration>
									<makensisBin>${project.makensis.exe}</makensisBin>
									<setupScript>${project.nsis.config}</setupScript>
									<outputFile>${project.nsis.outfile}</outputFile>
								</configuration>
							</execution>
						</executions>
					</plugin>

				</plugins>
			</build>
		</profile>
	</profiles>

</project>