<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>ru.mg.esql.grammar</groupId>
    <artifactId>message-broker-esql-grammar</artifactId>
    <name>ESQL Grammar Parser</name>

    <version>1.0</version>

    <packaging>jar</packaging>
    <url>http://antlr.org</url>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.antlr</groupId>
            <artifactId>antlr-runtime</artifactId>
            <version>3.3</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.antlr</groupId>
            <artifactId>gunit</artifactId>
            <version>3.3</version>
            <scope>test</scope>
        </dependency>

    </dependencies>


    <build>

        <defaultGoal>install</defaultGoal>

        <plugins>

            <plugin>

                <groupId>org.antlr</groupId>
                <artifactId>antlr3-maven-plugin</artifactId>
                <version>3.3</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>antlr</goal>
                        </goals>
                    </execution>
                </executions>

            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.1</version>
                <executions>
                    <execution>
                        <id>gunit-one</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <classpathScope>test</classpathScope>
                            <executable>java</executable>
                            <testSourceRoot>src\test\gunit</testSourceRoot>
                            <workingDirectory>src\test\gunit</workingDirectory>
                            <arguments>
                                <argument>-classpath</argument>
                                <!-- automatically creates the classpath using all project dependencies,
                                     also adding the project build directory -->
                                <classpath/>
                                <argument>org.antlr.gunit.Interp</argument>
                                <argument>-o</argument>
                                <argument>Esql.gunit</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>


            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.1</version>
                <configuration>
                    <source>1.6</source>
                    <target>jsr14</target>
                </configuration>
            </plugin>

            <plugin>

                <!--

                  Build an uber-jar that is packaged with all the other dependencies,
                  such as the antlr-runtime and so on. This will be useful
                  for developers, who then do not need to download anything else or
                  remember that they need antlr.jar in their CLASSPATH and so
                  on.

                  You can delete this plugin of course and you will then
                  get a jar file with only the code generated and included
                  directly in this project. With this plugin though you will
                  find that when you build with:

                     mvn install

                  There will be an executable jar generated. You can run this
                  as:

                    java -jar ru.mg.esql-1.0-SNAPSHOT-jar-with-dependencies.jar demosource.dmo

                  assuming you have a file called demosource.dmo to attempt a parse.

                -->
                <artifactId>maven-assembly-plugin</artifactId>

                <configuration>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                    <!--

                        Specify that we want the resulting jar to be executable
                        via java -jar, which we do by modifying the manifest
                        of course.
                      -->
                    <archive>

                        <manifest>
                            <mainClass>ru.mg.Main</mainClass>
                        </manifest>
                    </archive>

                </configuration>

                <!--

                    We don't want to have to specifically ask for the uber jar, so we attach the
                    running of this plugin to the execution of the package life-cycle
                    phase.
                  -->
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>attached</goal>
                        </goals>
                    </execution>
                </executions>

            </plugin>

        </plugins>
    </build>

</project>
