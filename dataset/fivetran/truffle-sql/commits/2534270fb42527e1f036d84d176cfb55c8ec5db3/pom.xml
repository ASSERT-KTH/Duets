<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.fivetran</groupId>
	<artifactId>truffle-sql</artifactId>
	<version>0.12-SNAPSHOT</version>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<m2e.apt.activation>jdt_apt</m2e.apt.activation>
		<calcite.version>1.10.0</calcite.version>
		<hadoop.version>2.6.0</hadoop.version>
		<slf4j.version>1.7.21</slf4j.version>
		<jmh.version>1.17.1</jmh.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>com.oracle.truffle</groupId>
			<artifactId>truffle-api</artifactId>
			<version>0.16</version>
		</dependency>
		<dependency>
			<groupId>com.oracle.truffle</groupId>
			<artifactId>truffle-tck</artifactId>
			<version>0.16</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.oracle.truffle</groupId>
			<artifactId>truffle-dsl-processor</artifactId>
			<version>0.16</version>
			<scope>provided</scope>
		</dependency>

		<!-- SQL parser -->
		<dependency>
			<groupId>org.apache.calcite</groupId>
			<artifactId>calcite-core</artifactId>
			<version>${calcite.version}</version>
			<!-- Calcite includes a shaded version of avatica, that in turn includes things like SLF4J and Jackson -->
			<!-- Instead, we're going to include avatica-core, the unshaded version -->
			<!-- https://calcite.apache.org/avatica/docs/custom_client_artifacts.html -->
			<exclusions>
				<exclusion>
					<groupId>org.apache.calcite.avatica</groupId>
					<artifactId>avatica</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.calcite.avatica</groupId>
			<artifactId>avatica-core</artifactId>
			<version>1.9.0</version>
		</dependency>

		<!-- Parquet file format -->
		<dependency>
			<groupId>org.apache.parquet</groupId>
			<artifactId>parquet-format</artifactId>
			<version>2.3.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.parquet</groupId>
			<artifactId>parquet-hadoop</artifactId>
			<version>1.9.0</version>
		</dependency>

		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-common</artifactId>
			<version>${hadoop.version}</version>

			<exclusions>
				<!-- Hadoop specifies log4j as the delegate of sl4fj -->
				<!-- We'll use slf4j-jdk, so we exclude log4j here -->
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
				</exclusion>

				<!-- Hadoop depends on log4j -->
				<!-- We will instead use java.util.logging, so we exclude log4j -->
				<!-- We'll use the slf4j-log4j bridge to redirect log4j -> slf4j -> java.util.logging -->
				<exclusion>
					<groupId>log4j</groupId>
					<artifactId>log4j</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Intellij @Language annotation -->
		<dependency>
			<groupId>com.intellij</groupId>
			<artifactId>annotations</artifactId>
			<version>12.0</version>
		</dependency>

		<!-- Logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>log4j-over-slf4j</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-jdk14</artifactId>
			<version>${slf4j.version}</version>
		</dependency>

		<!-- Microbenchmarks -->
		<dependency>
			<groupId>org.openjdk.jmh</groupId>
			<artifactId>jmh-core</artifactId>
			<version>${jmh.version}</version>
		</dependency>
		<dependency>
			<groupId>org.openjdk.jmh</groupId>
			<artifactId>jmh-generator-annprocess</artifactId>
			<version>${jmh.version}</version>
			<scope>provided</scope>
		</dependency>

		<!-- Testing -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-all</artifactId>
			<version>1.3</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-eclipse-plugin</artifactId>
				<configuration>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.18.1</version>
				<configuration>
					<includes>
						<include>**/*TestSuite.java</include>
						<include>**/*Test.java</include>
					</includes>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.9</version>
				<executions>
					<execution>
						<id>test-classpath</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>build-classpath</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<outputFile>classpath.txt</outputFile>
				</configuration>
			</plugin>

			<!-- Build an uberjar that runs benchmarks -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>2.2</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<finalName>benchmarks</finalName>
							<transformers>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>org.openjdk.jmh.Main</mainClass>
								</transformer>
							</transformers>
							<filters>
								<filter>
									<!--
                                        Shading signed JARs will fail without this.
                                        http://stackoverflow.com/questions/999489/invalid-signature-file-when-attempting-to-run-a-jar
                                    -->
									<artifact>*:*</artifact>
									<excludes>
										<exclude>META-INF/*.SF</exclude>
										<exclude>META-INF/*.DSA</exclude>
										<exclude>META-INF/*.RSA</exclude>
									</excludes>
								</filter>
							</filters>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<plugin>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.1</version>
					<configuration>
						<source>1.8</source>
						<target>1.8</target>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<reporting>
		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.10.3</version>
			</plugin>
		</plugins>
	</reporting>

</project>
