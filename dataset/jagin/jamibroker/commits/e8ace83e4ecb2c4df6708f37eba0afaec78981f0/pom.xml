<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>pl.jagin</groupId>
    <artifactId>jamibroker</artifactId>
    <packaging>jar</packaging>
    <version>0.1.1-SNAPSHOT</version>

    <name>JAmiBroker</name>
    <description>Java COM bridge for AmiBroker</description>
    <url>https://jagin.github.io/jamibroker</url>

    <scm>
        <url>https://github.com/jagin/jamibroker</url>
        <connection>scm:git:git://github.com/jagin/jamibroker.git</connection>
        <developerConnection>scm:git:git@github.com:jagin/jamibroker.git</developerConnection>
        <tag>HEAD</tag>
    </scm>

    <issueManagement>
        <url>https://github.com/jagin/jamibroker/issues</url>
        <system>GitHub Issues</system>
    </issueManagement>

    <developers>
        <developer>
            <id>jaroslaw.gilewski</id>
            <name>Jaros≈Çaw Gilewski</name>
            <email>jgilewski@jagin.pl</email>
            <url>https://github.com/jagin</url>
            <roles>
                <role>Architect</role>
                <role>Developer</role>
            </roles>
            <timezone>+1</timezone>
        </developer>
    </developers>

    <licenses>
        <license>
            <name>MIT License</name>
            <url>http://www.opensource.org/licenses/mit-license.php</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <properties>
        <!-- ************** -->
        <!-- Build settings -->
        <!-- ************** -->

        <!-- Cross plugins settings -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <!-- maven-compiler-plugin -->
        <maven.compiler.target>1.7</maven.compiler.target>
        <maven.compiler.source>1.7</maven.compiler.source>

        <!--
            Options to override the compiler arguments directly on the compiler arument line to separate between what
            the IDE understands as the source level and what the Maven compiler actually use.
        -->
        <maven.compiler.argument.target>${maven.compiler.target}</maven.compiler.argument.target>
        <maven.compiler.argument.source>${maven.compiler.source}</maven.compiler.argument.source>

        <!-- maven-enforcer-plugin -->
        <maven.min.version>3.0.4</maven.min.version>
        <jdk.min.version>${maven.compiler.argument.source}</jdk.min.version>

        <!-- Never skip running the tests when the test phase is invoked -->
        <skip.unit.tests>false</skip.unit.tests>
        <!-- Never skip running the tests when the integration-test phase is invoked -->
        <skip.integration.tests>false</skip.integration.tests>

        <!-- JAmiBroker database directory for tests -->
        <amibroker.database.directory>C:/Program Files (x86)/AmiBroker/JAmibroker</amibroker.database.directory>

        <!-- **************** -->
        <!-- Plugins versions -->
        <!-- **************** -->

        <maven-enforcer-plugin.version>1.0.1</maven-enforcer-plugin.version>
        <maven-resources-plugin.version>2.6</maven-resources-plugin.version>
        <maven-compiler-plugin.version>3.1</maven-compiler-plugin.version>
        <maven-jar-plugin.version>2.3.2</maven-jar-plugin.version>
        <maven-surefire-plugin.version>2.16</maven-surefire-plugin.version>
        <maven-dependency-plugin.version>2.8</maven-dependency-plugin.version>
        <maven-site-plugin.version>3.0</maven-site-plugin.version>
        <maven-project-info-reports-plugin.version>2.7</maven-project-info-reports-plugin.version>
        <maven-javadoc-plugin.version>2.9.1</maven-javadoc-plugin.version>
        <maven-surefire-report-plugin.version>2.17</maven-surefire-report-plugin.version>
        <maven-clean-plugin.version>2.5</maven-clean-plugin.version>
        <maven-deploy-plugin.version>2.8.1</maven-deploy-plugin.version>
        <maven-install-plugin.version>2.5.1</maven-install-plugin.version>
        <maven-release-plugin.version>2.5.2</maven-release-plugin.version>

        <!-- ********************* -->
        <!-- Dependencies versions -->
        <!-- ********************* -->

        <junit.version>4.11</junit.version>
        <assertj.version>2.1.0</assertj.version>
        <log4j.version>1.2.17</log4j.version>
        <slf4j.version>1.7.7</slf4j.version>
        <jacob.version>1.14.3</jacob.version>
    </properties>

    <prerequisites>
        <maven>${maven.min.version}</maven>
    </prerequisites>

    <dependencies>
        <dependency>
            <!-- JUnit -->
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- FEST is a collection of APIs whose mission is to simplify software testing -->
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>${assertj.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Apache Log4J -->
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>${log4j.version}</version>
        </dependency>

        <!-- SLF4J Log4J Binding adds slf4j -> log4j bridge -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <!-- SLF4J API The Simple Logging Facade for Java or (SLF4J) serves as
            a simple facade or abstraction for various logging frameworks, e.g. java.util.logging,
            log4j and logback, allowing the end-user to plug in the desired logging framework
            at deployment time. -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>

        <!-- JACOB is a JAVA-COM Bridge that allows you to call COM Automation components
        from Java. It uses JNI to make native calls to the COM libraries. JACOB runs
        on x86 and x64 environments supporting 32 bit and 64 bit JVMs -->
        <dependency>
            <groupId>net.sf.jacob-project</groupId>
            <artifactId>jacob</artifactId>
            <version>${jacob.version}</version>
        </dependency>
        <dependency>
            <groupId>net.sf.jacob-project</groupId>
            <artifactId>jacob</artifactId>
            <version>${jacob.version}</version>
            <classifier>x86</classifier>
            <type>dll</type>
        </dependency>
        <dependency>
            <groupId>net.sf.jacob-project</groupId>
            <artifactId>jacob</artifactId>
            <version>${jacob.version}</version>
            <classifier>x64</classifier>
            <type>dll</type>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>${maven-enforcer-plugin.version}</version>
                <executions>
                    <execution>
                        <id>enforce-java-version</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireJavaVersion>
                                    <message>To build this project JDK ${jdk.min.version} (or greater) is required. Please install it.</message>
                                    <version>${jdk.min.version}</version>
                                </requireJavaVersion>
                            </rules>
                        </configuration>
                    </execution>
                    <execution>
                        <id>enforce-maven-version</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <message>To build this project Maven ${maven.min.version} (or greater) is required. Please install it.</message>
                                    <version>${maven.min.version}</version>
                                </requireMavenVersion>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>${maven-clean-plugin.version}</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${maven-resources-plugin.version}</version>
                <configuration>
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <nonFilteredFileExtensions>
                        <!-- default value contains jpg,jpeg,gif,bmp,png -->
                        <!-- Exclude the extra files we don't want to filter -->
                        <nonFilteredFileExtension>mst</nonFilteredFileExtension>
                        <nonFilteredFileExtension>csv</nonFilteredFileExtension>
                        <nonFilteredFileExtension>gz</nonFilteredFileExtension>
                        <nonFilteredFileExtension>xlsx</nonFilteredFileExtension>
                    </nonFilteredFileExtensions>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <source>${maven.compiler.argument.source}</source>
                    <target>${maven.compiler.argument.target}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${maven-jar-plugin.version}</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <!-- Skip the default running of this plug-in (or everything is run twice...see below) -->
                    <skip>true</skip>
                    <!-- Show 100% of the lines from the stack trace (doesn't work) -->
                    <trimStackTrace>false</trimStackTrace>
                    <systemPropertyVariables>
                        <java.io.tmpdir>${project.build.directory}</java.io.tmpdir>
                        <amiBrokerDatabaseDir>${amibroker.database.directory}</amiBrokerDatabaseDir>
                    </systemPropertyVariables>
                    <!-- JACOB native library path -->
                    <argLine>-noverify</argLine>
                    <argLine>-Djava.library.path=${project.build.directory}</argLine>
                </configuration>
                <executions>
                    <execution>
                        <id>unit-test</id>
                        <phase>test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <skip>${skip.unit.tests}</skip>
                            <includes>
                                <!-- Include unit tests within integration-test phase. -->
                                <include>**/*Test.java</include>
                            </includes>
                            <excludes>
                                <!-- Exclude integration tests within (unit) test phase. -->
                                <exclude>**/*ITest.java</exclude>
                            </excludes>
                        </configuration>
                    </execution>
                    <execution>
                        <id>integration-test</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <skip>${skip.integration.tests}</skip>
                            <includes>
                                <!-- Include integration tests within integration-test phase. -->
                                <include>**/*ITest.java</include>
                            </includes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>${maven-deploy-plugin.version}</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <configuration>
                    <tagNameFormat>@{project.version}</tagNameFormat>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <version>${maven-install-plugin.version}</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>${maven-dependency-plugin.version}</version>
                <executions>
                    <execution>
                        <id>copy-jacob-dll</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>net.sf.jacob-project</groupId>
                                    <artifactId>jacob</artifactId>
                                    <type>dll</type>
                                    <overWrite>true</overWrite>
                                    <classifier>x64</classifier>
                                    <outputDirectory>${project.build.directory}</outputDirectory>
                                </artifactItem>

                                <artifactItem>
                                    <groupId>net.sf.jacob-project</groupId>
                                    <artifactId>jacob</artifactId>
                                    <type>dll</type>
                                    <overWrite>true</overWrite>
                                    <classifier>x86</classifier>
                                    <outputDirectory>${project.build.directory}</outputDirectory>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>${maven-site-plugin.version}</version>
                <configuration>
                    <reportPlugins>
                        <!-- The Maven Project Info Reports plugin is used to generate reports information about the project -->
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-project-info-reports-plugin</artifactId>
                            <version>${maven-project-info-reports-plugin.version}</version>
                            <configuration>
                                <dependencyDetailsEnabled>false</dependencyDetailsEnabled>
                                <dependencyLocationsEnabled>false</dependencyLocationsEnabled>
                            </configuration>
                            <reportSets>
                                <reportSet>
                                    <reports>
                                        <report>index</report>
                                        <report>dependencies</report>
                                        <report>project-team</report>
                                        <report>plugins</report>
                                    </reports>
                                </reportSet>
                            </reportSets>
                        </plugin>
                        <!-- The Javadoc Plugin uses the Javadoc tool to generate javadocs for the specified project -->
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-javadoc-plugin</artifactId>
                            <version>${maven-javadoc-plugin.version}</version>
                            <configuration>
                                <quiet>true</quiet>
                            </configuration>
                        </plugin>
                        <!-- The Surefire Report Plugin parses the generated TEST-*.xml files under
                           ${basedir}/target/surefire-reports and renders them to DOXIA which creates
                           the web interface version of the test results. -->
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-surefire-report-plugin</artifactId>
                            <version>${maven-surefire-report-plugin.version}</version>
                            <reportSets>
                                <reportSet>
                                    <reports>
                                        <report>report-only</report>
                                    </reports>
                                </reportSet>
                            </reportSets>
                        </plugin>
                    </reportPlugins>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <distributionManagement>
        <repository>
            <id>internal.repo</id>
            <name>Temporary Staging Repository</name>
            <url>file://${project.build.directory}/mvn-repo</url>
        </repository>
    </distributionManagement>
</project>


