<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.societies</groupId>
    <artifactId>societies</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>18.0</version>
        </dependency>

        <dependency>
            <groupId>com.google.inject.extensions</groupId>
            <artifactId>guice-assistedinject</artifactId>
            <version>4.0-beta5</version>
        </dependency>

        <dependency>
            <groupId>org.shank</groupId>
            <artifactId>shank</artifactId>
            <version>1.0-SNAPSHOT</version>
            <exclusions>
                <exclusion>
                    <artifactId>javassist</artifactId>
                    <groupId>org.javassist</groupId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>2.4.4</version>
        </dependency>

        <dependency>
            <groupId>org.societies</groupId>
            <artifactId>lib-groups</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <dependency>
            <groupId>org.jetbrains</groupId>
            <artifactId>annotations</artifactId>
            <version>13.0</version>
        </dependency>

        <dependency>
            <groupId>net.catharos.lib</groupId>
            <artifactId>lib-core</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <dependency>
            <groupId>org.societies</groupId>
            <artifactId>lib-database</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <dependency>
            <groupId>com.googlecode.cqengine</groupId>
            <artifactId>cqengine</artifactId>
            <version>1.2.7</version>
        </dependency>

        <dependency>
            <groupId>com.brsanthu</groupId>
            <artifactId>migbase64</artifactId>
            <version>2.2</version>
        </dependency>

        <dependency>
            <groupId>net.engio</groupId>
            <artifactId>mbassador</artifactId>
            <version>1.2.0</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.3.2</version>
        </dependency>

        <dependency>
            <groupId>org.societies</groupId>
            <artifactId>societies-api</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <dependency>
            <groupId>org.societies.bridge</groupId>
            <artifactId>bridge</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
            <version>3.1</version>
        </dependency>

        <dependency>
            <groupId>org.jukito</groupId>
            <artifactId>jukito</artifactId>
            <version>1.3</version>
        </dependency>
    </dependencies>

    <distributionManagement>
        <repository>
            <id>frederik-schmitt-releases</id>
            <name>Releases</name>
            <url>http://repo.frederik-schmitt.de/content/repositories/oss-releases</url>
        </repository>

        <snapshotRepository>
            <id>frederik-schmitt-snapshots</id>
            <name>Snapshots</name>
            <url>http://repo.frederik-schmitt.de/content/repositories/oss-snapshots</url>
        </snapshotRepository>
    </distributionManagement>

    <repositories>
        <repository>
            <id>frederik-schmitt-releases</id>
            <url>http://repo.frederik-schmitt.de/content/repositories/oss-releases</url>
        </repository>
        <repository>
            <id>frederik-schmitt-snapshots</id>
            <url>http://repo.frederik-schmitt.de/content/repositories/oss-snapshots</url>
        </repository>
    </repositories>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.6</source>
                    <target>1.6</target>
                </configuration>
            </plugin>


            <plugin>

                <!-- Specify the maven code generator plugin -->
                <groupId>org.jooq</groupId>
                <artifactId>jooq-codegen-maven</artifactId>
                <version>3.5.1</version>

                <!-- Manage the plugin's dependency. In this example, we'll use a PostgreSQL database -->
                <dependencies>
                    <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <version>5.1.33</version>
                    </dependency>
                </dependencies>

                <!-- Specify the plugin configuration.
                     The configuration format is the same as for the standalone code generator -->
                <configuration>
                    <!-- Configure the database connection here -->
                    <jdbc>
                        <driver>com.mysql.jdbc.Driver</driver>
                        <url>jdbc:mysql://localhost:3306/societies</url>
                        <user>root</user>
                    </jdbc>

                    <generator>
                        <!-- The default code generator. You can override this one, to generate your own code style
                             Defaults to org.jooq.util.JavaGenerator -->
                        <name>org.jooq.util.JavaGenerator</name>

                        <!-- These properties can be added to the generate element: -->
                        <generate>
                            <!-- Primary key / foreign key relations should be generated and used.
                                 This is a prerequisite for various advanced features.
                                 Defaults to true -->
                            <relations>true</relations>

                            <!-- Generate instance fields in your tables, as opposed to static
                                 fields. This simplifies aliasing.
                                 Defaults to true -->
                            <instanceFields>true</instanceFields>

                            <!-- Generate the javax.annotation.Generated annotation to indicate
                                 jOOQ version used for source code.
                                 Defaults to true -->
                            <generatedAnnotation>true</generatedAnnotation>

                            <!-- Generate jOOQ Record classes for type-safe querying. You can
                                 turn this off, if you don't need "skill records" for CRUD
                                 Defaults to true -->
                            <records>true</records>

                            <!-- Generate POJOs in addition to Record classes for usage of the
                                 ResultQuery.fetchInto(Class) API
                                 Defaults to false -->
                            <pojos>false</pojos>

                            <!-- Generate immutable POJOs for usage of the ResultQuery.fetchInto(Class) API
                                 This overrides any value setLong in <pojos/>
                                 Defaults to false -->
                            <immutablePojos>false</immutablePojos>

                            <!-- Generate interfaces that will be implemented by records and/or pojos.
                                 You can also use these interfaces in Record.into(Class<?>) and similar
                                 methods, to let jOOQ return proxy objects for them.
                                 Defaults to false -->
                            <interfaces>false</interfaces>

                            <!-- Generate DAOs in addition to POJO classes
                                 Defaults to false -->
                            <daos>false</daos>

                            <!-- Annotate POJOs and Records with JPA annotations for increased
                                 compatibility and better integration with JPA/Hibernate, etc
                                 Defaults to false -->
                            <jpaAnnotations>false</jpaAnnotations>

                            <!-- Annotate POJOs and Records with JSR-303 validation annotations
                                 Defaults to false -->
                            <validationAnnotations>false</validationAnnotations>

                            <!-- Allow to turn off the generation of global object references, which include

                                 - Tables.java
                                 - Sequences.java
                                 - UDTs.java

                                 Turning off the generation of the above files may be necessary for very
                                 large schemas, which exceed the amount of allowed constants in a class's
                                 constant pool (64k) or, whose static initialiser would exceed 64k of
                                 byte code

                                 Defaults to true -->
                            <globalObjectReferences>true</globalObjectReferences>
                        </generate>

                        <!-- The naming strategy used for class and field names.
                       You may override this with your custom naming strategy. Some examples follow
                       Defaults to org.jooq.util.DefaultGeneratorStrategy -->
                        <strategy>
                            <name>org.jooq.util.DefaultGeneratorStrategy</name>
                        </strategy>

                        <database>
                            <!-- The database type. The format here is:
                                 org.util.[database].[database]Database -->
                            <name>org.jooq.util.mysql.MySQLDatabase</name>

                            <!-- The database schema (or in the absence of schema support, in your RDBMS this
                                 can be the owner, coreCharacter, database name) to be generated -->
                            <inputSchema>societies</inputSchema>


                            <!-- Generate java.sql.Timestamp fields for DATE columns. This is
                                particularly useful for Oracle databases.
                                Defaults to false -->
                            <dateAsTimestamp>false</dateAsTimestamp>

                            <!-- Generate jOOU data types for your unsigned data types, which are
                               not natively supported in Java.
                               Defaults to true -->
                            <unsignedTypes>true</unsignedTypes>

                            <!-- All elements that are generated from your schema
                                 (M Java regular expression. Use the pipe to separate several expressions)
                                 Watch out for case-sensitivity. Depending on your database, this might be important! -->
                            <includes>.*</includes>

                            <!-- All elements that are excluded from your schema
                                 (M Java regular expression. Use the pipe to separate several expressions).
                                 Excludes match before includes -->
                            <excludes></excludes>

                            <!-- First, register your custom types here -->
                            <customTypes>
                                <customType>
                                    <!-- Specify the fully-qualified class name of your custom type -->
                                    <name>java.util.UUID</name>

                                    <!-- Associate that custom type with your converter. Note, a
                                         custom type can only have one converter in jOOQ -->
                                    <converter>org.societies.database.sql.UUIDConverter</converter>
                                </customType>
                            </customTypes>

                            <!-- Then, associate custom types with database columns -->
                            <forcedTypes>
                                <forcedType>
                                    <name>VARBINARY</name>
                                    <!-- Specify again he fully-qualified class name of your custom type -->
                                    <name>java.util.UUID</name>

                                    <!-- Add a list of comma-separated regular expressions matching columns -->
                                    <expression>[A-Za-z0-9_.]+?uuid|member|society|society2|rank|origin|city|wager</expression>
                                </forcedType>
                            </forcedTypes>
                        </database>

                        <target>
                            <!-- The destination package of your generated classes (within the destination directory) -->
                            <packageName>org.societies.database.sql.layout</packageName>

                            <!-- The destination directory of your generated classes -->
                            <directory>src/main/java/</directory>
                        </target>
                    </generator>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
