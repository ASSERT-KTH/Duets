<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>edu.mit.ll</groupId>
  <artifactId>graphulo</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <packaging>jar</packaging>
  <description>
    Graphulo: Accumulo library of matrix math primitives and graph algorithms.
  </description>
  <url>http://graphulo.mit.edu/</url>
  <organization>
    <name>MIT Lincoln Laboratory</name>
    <url>https://www.ll.mit.edu/</url>
  </organization>
  <inceptionYear>2014</inceptionYear>
  <scm>
    <url>https://github.com/Accla/graphulo</url>
    <connection>scm:git:git@github.com:Accla/graphulo.git</connection>
    <developerConnection>scm:git:git@github.com:Accla/graphulo.git</developerConnection>
    <tag>HEAD</tag>
  </scm>

  <properties>
    <DBinit.path.libextFolder>libext/</DBinit.path.libextFolder>
    <DBinit.path.mpath>${basedir}/src/assembly/build_DBinit/build_DBinit.m</DBinit.path.mpath>
    <DBinit.path.outputFile>DBinit.m</DBinit.path.outputFile>
    <DBinit.path.libextZip>graphulo-${project.version}-libext</DBinit.path.libextZip>
    <test>TEST_CONFIG</test>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <accumulo.version>1.7.0</accumulo.version>
    <accumulo.version.majorminor>1.7</accumulo.version.majorminor>
    <!--<accumulo.VERSION.1.7>  </accumulo.VERSION.1.7>-->
    <!--<accumulo.VERSION.1.6>//</accumulo.VERSION.1.6>-->
  </properties>


  <build>
    <resources>
      <!--<resource>-->
      <!--<directory>${basedir}/..</directory>-->
      <!--<filtering>false</filtering>-->
      <!--<includes>-->
      <!--<include>README.md</include>-->
      <!--</includes>-->
      <!--</resource>-->
      <resource>
        <directory>src/assembly</directory>
        <filtering>true</filtering>
        <includes>
          <include>**/build_DBinit.bash</include>
        </includes>
      </resource>
      <resource>
        <directory>src/assembly</directory>
        <filtering>false</filtering>
        <excludes>
          <exclude>**/build_DBinit.bash</exclude>
        </excludes>
      </resource>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>false</filtering>
      </resource>
    </resources>


    <plugins>

      <!--<plugin>-->
        <!--<groupId>org.codehaus.mojo</groupId>-->
        <!--<artifactId>templating-maven-plugin</artifactId>-->
        <!--<version>1.0-alpha-3</version>-->
        <!--<executions>-->
          <!--<execution>-->
            <!--<id>filter-src</id>-->
            <!--<phase>generate-sources</phase>-->
            <!--<goals>-->
              <!--<goal>filter-sources</goal>-->
            <!--</goals>-->
            <!--<configuration>-->
              <!--<sourceDirectory>${basedir}/src/main/java-templates</sourceDirectory> &lt;!&ndash; Defaults &ndash;&gt;-->
              <!--<outputDirectory>${project.build.directory}/generated-sources/java-templates</outputDirectory>-->
            <!--</configuration>-->
          <!--</execution>-->
        <!--</executions>-->
      <!--</plugin>-->

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.1</version>
        <configuration>
          <source>1.7</source>
          <target>1.7</target>
          <!--<compilerArgument>-Xlint:all</compilerArgument>-->
          <!--<showWarnings>true</showWarnings>-->
          <!--<showDeprecation>true</showDeprecation>-->
        </configuration>
      </plugin>

      <!--Output test results to files so that they can be read by continuous integration servers-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.17</version>
        <configuration>
          <redirectTestOutputToFile>true</redirectTestOutputToFile>
          <reportsDirectory>shippable/testresults</reportsDirectory>
          <reportFormat>plain</reportFormat> <!-- as opposed to "brief". print the name of each test run -->
          <!--<argLine>-agentlib:jdwp=transport=dt_socket,server=n,address=127.0.0.1:5005,suspend=y</argLine>-->
          <test>${test}</test>
          <!-- Only run tests in the TEST_CONFIG class. -->
          <failIfNoSpecifiedTests>false</failIfNoSpecifiedTests>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.apache.maven.surefire</groupId>
            <artifactId>surefire-junit4</artifactId>
            <version>2.17</version>
          </dependency>
        </dependencies>
      </plugin>
      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <version>2.6.1</version>
        <configuration>
          <filesets>
            <fileset>
              <directory>shippable</directory>
              <followSymlinks>false</followSymlinks>
            </fileset>
          </filesets>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>2.10.3</version>
        <configuration>
          <links>
            <link>https://accumulo.apache.org/${accumulo.version.majorminor}/apidocs</link>
          </links>
          <detectLinks>true</detectLinks>
        </configuration>
        <executions>
          <execution>
            <id>gen-javadoc</id>
            <phase>install</phase>
            <goals>
              <goal>javadoc</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Copy all original dependency JARs (including recursive dependencies) into target/libext
             Note that the original JARs will have overlapping code, e.g.,
             explicit deps accumulo-core and hadoop-hdfs may have a transitive dep commons-math. The commons-math dep is stored twice.
             To store the dep once, use the build-single method. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>2.9</version>
        <executions>
          <execution>
            <id>copy-dependencies</id>
            <phase>package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/libext</outputDirectory>
              <type>jar</type>
              <includeScope>runtime</includeScope>
              <!-- Don't include the test scope - we don't need those classes for dependencies. -->
              <!--<includeScope>compile</includeScope> Only adds the dep jdk-tools.jar, which has useless stuff provided by any jdk installation. -->
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin> <!-- Create a super-JAR out of the JARs for every dependency in target/libext -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>2.5.4</version>
        <executions>
          <execution>
            <id>libext_assembly</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <descriptors>
                <descriptor>${basedir}/src/assembly/libext_assembly.xml</descriptor>
              </descriptors>
              <outputDirectory>${project.build.directory}</outputDirectory>
              <!--<finalName>${DBinit.path.libextZip}</finalName>-->
              <appendAssemblyId>true</appendAssemblyId>
            </configuration>
          </execution>
            <execution>
              <id>all-assembly</id>
              <phase>install</phase>
              <goals>
                <goal>single</goal>
              </goals>
              <configuration>
                <descriptors>
                  <descriptor>src/assembly/dist_assembly.xml</descriptor>
                </descriptors>
                <finalName>graphulo-${project.version}</finalName>
                <appendAssemblyId>true</appendAssemblyId>
              </configuration>
            </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>2.4.1</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <shadedArtifactAttached>true</shadedArtifactAttached>
              <shadedClassifierName>alldeps</shadedClassifierName>
              <minimizeJar>true</minimizeJar>
              <artifactSet>
                <excludes>
                  <exclude>org.apache.accumulo:*</exclude>
                </excludes>
              </artifactSet>
              <filters>
                <filter>

                </filter>
                <filter>
                  <artifact>org.apache.htrace:*</artifact>
                  <includes>
                    <include>**</include>
                  </includes>
                  <!--<excludes>-->
                    <!--<exclude>org/junit/experimental/**</exclude>-->
                  <!--</excludes>-->
                </filter>
              </filters>
            </configuration>
          </execution>
        </executions>
      </plugin>


      <!-- Ensure this is the last step before the linux-specific profile for the message to be seen by non-linux users. -->
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <tasks>
                <chmod file="${basedir}/src/assembly/build_DBinit/build_DBinit.bash" perm="u+x" />
                <echo>If you are on linux, DBinit will build automatically.</echo>
                <echo>If not building on linux, you may not be able to build DBinit.m.</echo>
                <echo>Try and execute the following script once: (do not move the file)</echo>
                <echo>  ${basedir}/src/assembly/build_DBinit/build_DBinit.bash</echo>
              </tasks>
            </configuration>
          </execution>
        </executions>
      </plugin>



    </plugins>
  </build>

  <profiles>
    <profile>
      <id>linux-build-DBinit</id>
      <activation>
        <os>
          <family>unix</family>
        </os>
      </activation>
      <build>
        <plugins>
          <!-- Create DBinit.m on linux systems. -->
          <plugin>
            <artifactId>exec-maven-plugin</artifactId>
            <groupId>org.codehaus.mojo</groupId>
            <version>1.3.2</version>
            <executions>
              <execution>
                <id>Build DBinit</id>
                <phase>package</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>${basedir}/src/assembly/build_DBinit/build_DBinit.bash</executable>
                  <workingDirectory>${project.build.outputDirectory}</workingDirectory>
                  <arguments>
                    <argument>${project.build.finalName}.jar</argument>
                    <argument>${project.build.directory}/${DBinit.path.libextFolder}</argument>
                    <argument>${DBinit.path.mpath}</argument>
                    <argument>${project.build.directory}/${DBinit.path.outputFile}</argument>
                    <argument>${project.build.directory}/${DBinit.path.libextZip}.zip</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>

        </plugins>
      </build>
    </profile>

  </profiles>

    <dependencies>
      <dependency>
        <groupId>org.apache.accumulo</groupId>
        <artifactId>accumulo-core</artifactId>
        <version>${accumulo.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.hadoop</groupId>
        <artifactId>hadoop-common</artifactId>
        <version>2.3.0</version>
      </dependency>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.12</version>
      </dependency>
      <dependency>
        <groupId>org.apache.accumulo</groupId>
        <artifactId>accumulo-minicluster</artifactId>
        <version>${accumulo.version}</version>
      </dependency>
      <!-- Replaces Accumulo dependency on Apache Commons 3.2, which does not use Java Generics. -->
      <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-collections4</artifactId>
        <version>4.0</version>
      </dependency>
      <!-- Used by some JSON functions in D4M Matlab. -->
      <dependency>
        <groupId>org.json</groupId>
        <artifactId>org.json</artifactId>
        <version>chargebee-1.0</version>
        <scope>runtime</scope>
        <optional>true</optional>
      </dependency>

      <dependency>
        <groupId>org.apache.htrace</groupId>
        <artifactId>htrace-zipkin</artifactId>
        <version>3.1.0-incubating</version>
        <scope>runtime</scope>
        <optional>true</optional>
      </dependency>
      <dependency>
        <groupId>commons-codec</groupId>
        <artifactId>commons-codec</artifactId>
        <version>1.7</version>
      </dependency>
      <!--<dependency>-->
        <!--<groupId>org.apache.htrace</groupId>-->
        <!--<artifactId>htrace-core</artifactId>-->
        <!--<version>3.1.0-incubating</version>-->
        <!--<scope>runtime</scope>-->
      <!--</dependency>-->

      <!-- Accumulo server-side dependencies-->
      <!--<dependency>-->
        <!--<groupId>org.apache.commons</groupId>-->
        <!--<artifactId>commons-math3</artifactId>-->
        <!--<version>3.1.1</version>-->
        <!--<scope>runtime</scope>-->
      <!--</dependency>-->

    </dependencies>

</project>
