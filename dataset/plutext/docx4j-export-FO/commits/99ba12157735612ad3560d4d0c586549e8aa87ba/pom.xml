<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.sonatype.oss</groupId>
    <artifactId>oss-parent</artifactId>
    <version>7</version>
  </parent>
  
	<groupId>org.docx4j</groupId>
	<artifactId>docx4j-export-fo</artifactId>
	<version>3.3.8-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>docx4j-export-fo</name>
	
	<description>
		export docx to PDF via XSL FO, using Apache FOP
	</description>
	<url>http://www.docx4java.org/</url>
	<licenses>
	  <license>
	    <name>Apache 2</name>
	    <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
	    <distribution>repo</distribution>
	    <comments>A business-friendly OSS license</comments>
	  </license>
  	</licenses>
	<scm>
	    <developerConnection>scm:git|git@github.com:plutext/docx4j-export-FO.git</developerConnection>
    </scm>
	<inceptionYear>2007</inceptionYear>
	<developers>
		<developer>
			<id>jharrop</id>
			<name>Jason Harrop</name>
			<email>jason@plutext.org</email>
			<organization>Plutext</organization>
			<roles>
				<role>Developer</role>
			</roles>
			<timezone>+10</timezone>
		</developer>
	</developers>
	<contributors>
		<contributor>
			<name>alberto</name>
		</contributor>
	</contributors>
	
	  <properties>
	    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <!-- github server corresponds to entry in ~/.m2/settings.xml -->
    <github.global.server>github</github.global.server>
	  </properties>	
	  
	
	<build>
		<sourceDirectory>src/main/java</sourceDirectory>
		<testSourceDirectory>src/test/java</testSourceDirectory>
		<outputDirectory>bin</outputDirectory><!--  for a clean jar, be sure to avoid mixing mvn and eclipse output -->
		<testOutputDirectory>bin-testOutput</testOutputDirectory>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<!-- The objective is to generate a jar which is compatible with Java
						1.5, whilst at the same time allowing @Override annotations in the source
						code on methods which merely implement an interface (Java 6 allows this,
						but 1.5 gives an error). When I played around with this, I found that both
						maven and ant would happily compile to target 1.5 with the pesky @Override
						annotations present (irrespective of whether source was set to 1.5 or 1.6).
						You are not allowed source=1.6, target=1.5; this results in: Failure executing
						javac, but could not parse the error javac: source release 1.6 requires target
						release 1.6 So we need source=1.5, target=1.5 The downside is that m2eclipse
						mirrors this in Eclipse's compiler settings, and Eclipse then complains about
						the @Override annotations :-( So you must manually change the Eclipse compiler
						setting back to 1.6. -->
					<source>1.5</source>
					<target>1.5</target>

					<verbose>false</verbose>
					<!-- maxmemory>512m</maxmemory On Linux, use: MAVEN_OPTS="-Xmx512m" mvn install -->
					<!-- try to help maven to find package com.sun.xml.internal.bind.marshaller:
						<bootclasspath>${java.home}/lib/rt.jar</bootclasspath> but this doesn't help -->
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
			</plugin>
 			<!--  mvn versions:display-dependency-updates -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>versions-maven-plugin</artifactId>
				<version>2.2</version>
			</plugin> 
			
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<!-- The Surefire Plugin is used during the test phase of the build lifecycle
					to execute the unit tests of an application -->
				<version>2.6</version>
				<configuration>
					<excludes>
						<exclude>**/samples/*.java</exclude>
						<exclude>**/AbstractNumberingTest.java</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.3.1</version>
				<configuration>
					<excludes>
						<!--  the below are prob not necessary, now that we are building from bin-mvn, and so avoiding stuff Eclipse puts into bin dir -->
						<exclude>**/*.docx</exclude><!-- docx files in /src/test/resources add unwanted 1 MB to jar. -->
						<exclude>src/test/resources/**/*</exclude>
						<exclude>src/main/resources/README.txt</exclude><!--  sample log4j.xml and docx4j.properties are now in src/samples/_resources-->
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-source-plugin</artifactId>
				<!-- The Source Plugin creates a jar archive of the source files of the
					current project. -->
				<version>2.1.2</version>
				<executions>
					<execution>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- maven-javadoc-plugin seems to require large -Xmx so comment this
				out if your build is failing because you don't have enough. -->
			<plugin>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.8</version>
				<configuration>
					<maxmemory>512m</maxmemory>
					<!-- 18 MB without the exclusion; still 15MB with -->
					<!-- <excludePackageNames>org.plutext.jaxb.svg11:org.plutext.jaxb.xslfo</excludePackageNames> -->
			        <additionalparam>-Xdoclint:none</additionalparam> <!-- for Java 8 -->					
				 </configuration>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>com.soebes.maven.plugins</groupId>
				<artifactId>maven-echo-plugin</artifactId>
				<version>0.1</version>
				<executions>
					<execution>
						<id>install-echo</id>
						<phase>install</phase>
						<goals>
							<goal>echo</goal>
						</goals>
					</execution>
					<execution>
						<id>deploy-echo</id>
						<phase>deploy</phase>
						<goals>
							<goal>echo</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<echos>
						<echo>+-------------------------------------------------------+</echo>
						<echo>!       Join the docx4j developers mailing list by      !</echo>
						<echo>!       emailing docx4j-dev-subscribe@docx4java.org     !</echo>
						<echo>+-------------------------------------------------------+</echo>
					</echos>
				</configuration>
			</plugin>
<!-- 			
		<plugin>
            <groupId>org.basepom.maven</groupId>
            <artifactId>duplicate-finder-maven-plugin</artifactId>
            <version>1.2.0</version>
            <executions>
                <execution>
                    <id>default</id>
                    <phase>verify</phase>
                    <goals>
                        <goal>check</goal>
                    </goals>
                </execution>
            </executions>
            <configuration>
                <printEqualFiles>false</printEqualFiles>
                <failBuildInCaseOfDifferentContentConflict>true</failBuildInCaseOfDifferentContentConflict>
                <failBuildInCaseOfEqualContentConflict>false</failBuildInCaseOfEqualContentConflict>
                <failBuildInCaseOfConflict>false</failBuildInCaseOfConflict>
                <checkCompileClasspath>true</checkCompileClasspath>
                <checkRuntimeClasspath>true</checkRuntimeClasspath>
                <checkTestClasspath>true</checkTestClasspath>
                <skip>false</skip>
                <quiet>false</quiet>
                <preferLocal>true</preferLocal>
                <useResultFile>true</useResultFile>
                <resultFileMinClasspathCount>2</resultFileMinClasspathCount>
                <resultFile>${project.build.directory}/duplicate-finder-result.xml</resultFile>
                
				<includeBootClasspath>true</includeBootClasspath>
                <bootClasspathProperty>sun.boot.class.path</bootClasspathProperty>                

            </configuration>
        </plugin>
 -->
         			
		</plugins>
    	<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>build-helper-maven-plugin</artifactId>
										<versionRange>[1.3,2.0)</versionRange>
										<goals>
											<goal>add-source</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute>
											<runOnIncremental>true</runOnIncremental>
										</execute>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<resources>
			<!-- be sure to get xml,xlst resources in various src trees -->
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.xslt</include>
					<include>**/*.xml</include>
				</includes>
			</resource>
			<!-- 
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>docx4j.properties</include>
				</includes>
			</resource>
			 -->
			<!-- <resource> <directory>src/test/resources</directory> <excludes> <exclude>*.docx</exclude>
				</excludes> </resource> -->
		</resources>
	</build>
	<reporting>
		<plugins>
			<plugin>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.8</version>
				<reportSets>
					<reportSet>
						<id>standard-javadoc</id>
						<inherited>true</inherited>
						<configuration>
							<description>
								docx4j Open XML manipulation library
							</description>
							<docfilessubdirs>true</docfilessubdirs>
							<failOnError>false</failOnError>
							<locale>en_AU</locale>
							<name>Javadoc report</name>
							<quiet>true</quiet>
							<serialwarn>false</serialwarn>
							<show>private</show>
							<source>1.6</source>
							<stylesheet>maven</stylesheet>
							<version>true</version>
						</configuration>
						<reports>
							<report>javadoc</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
		</plugins>
	</reporting>
	
	
		<dependencies>
	
		<dependency>
			<groupId>org.docx4j</groupId>
			<artifactId>docx4j</artifactId>
			<version>3.3.8-SNAPSHOT</version>
		</dependency>
	
		<dependency>
			<groupId>org.plutext</groupId>
			<artifactId>jaxb-xslfo</artifactId><!-- previously part of docx4j source -->
			<version>1.0.1</version>
		</dependency>
		

	<dependency>
		<groupId>org.apache.xmlgraphics</groupId>
		<artifactId>xmlgraphics-commons</artifactId>
		<version>2.3</version>
		<!-- need to upgrade FOP before https://github.com/plutext/docx4j/commit/e3c84d22388fb210f698eb8af762dac124433c6d
		<version>2.0.1</version> -->
		<exclusions>
			<exclusion>
				<groupId>commons-logging</groupId>
				<artifactId>commons-logging</artifactId>
			</exclusion>		
		</exclusions>
	</dependency>
		
	<dependency>
		<groupId>org.apache.xmlgraphics</groupId>
		<artifactId>fop</artifactId>
		<version>2.3</version>
		<exclusions>
			<exclusion>
				<artifactId>avalon-framework-api</artifactId>
				<groupId>org.apache.avalon.framework</groupId>
			</exclusion>
			<exclusion>
				<artifactId>avalon-framework-impl</artifactId>
				<groupId>org.apache.avalon.framework</groupId>
			</exclusion>
			<exclusion>
				<groupId>xml-apis</groupId>
				<artifactId>xml-apis</artifactId>
			</exclusion>
			<exclusion>
				<groupId>xml-apis</groupId>
				<artifactId>xml-apis-ext</artifactId>
			</exclusion>
			<exclusion>
				<groupId>commons-logging</groupId>
				<artifactId>commons-logging</artifactId>
			</exclusion>
		</exclusions>
	</dependency>

	<!-- these two are to correct issues in fop dependency -->
	<dependency>
		<groupId>org.apache.avalon.framework</groupId>
		<artifactId>avalon-framework-api</artifactId>
		<version>4.3.1</version>
	</dependency>
	<dependency>
		<groupId>org.apache.avalon.framework</groupId>
		<artifactId>avalon-framework-impl</artifactId>
		<version>4.3.1</version>
	</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>


<!--	Uncomment for the PDF conversion via HTML or iText, which
		may be found in docx4j-extras.

		If you are planning to use that, you'll also want to uncomment
		the BaseFont stuff in PhysicalFonts.

 		<dependency>
			<groupId>com.lowagie</groupId>
			<artifactId>itext-unsigned</artifactId>
			<version>2.0.8</version>
			<exclusions>
				<exclusion>
					<artifactId>bouncycastle</artifactId>
					<groupId>bcmail-jdk14</groupId>
				</exclusion>
				<exclusion>
					<artifactId>bouncycastle</artifactId>
					<groupId>bcprov-jdk14</groupId>
				</exclusion>
			</exclusions>
		</dependency>
	-->


<!-- Uncomment for the PDF conversion via HTML, which
		may be found in docx4j-extras.

		<dependency>
			<groupId>pdf-renderer</groupId>
			<artifactId>pdf-renderer</artifactId>
			<version>0.2009.0324</version>
		</dependency>
		<dependency>
			<groupId>xhtmlrenderer</groupId>
			<artifactId>minium</artifactId>
			<version>0.1</version>
		</dependency>

		<dependency>
			<groupId>xhtmlrenderer</groupId>
			<artifactId>core-renderer</artifactId>
			<version>R8pre2</version>
		</dependency>
 -->


  		<!-- svn:http://dev.plutext.org/svn/docx4j/trunk/docx4j/m2

			(stuff not available in public repositories)

			mvn deploy:deploy-file -f wagon-svn-pom.xml -Dfile=dist/docx4j.jar -DpomFile=pom.xml  -Dpackaging=jar -DrepositoryId=docx4j -Durl=svn:http://dev.plutext.org/svn/docx4j/trunk/docx4j/m2

		-->
		

	</dependencies>

<!-- 
<distributionManagement>
    <repository>
        <id>internal.repo</id>
        <name>Temporary Staging Repository</name>
        <url>file://${project.build.directory}/mvn-repo</url>
    </repository>
</distributionManagement>
 -->
 
	<profiles> <!--  use -P eg mvn -Psign-artifacts  -->
		<profile>
			<id>sign-artifacts</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>1.4</version>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		

		<!-- Deploy a snapshot to GitHub  
		
			 See http://stackoverflow.com/questions/14013644/hosting-a-maven-repository-on-github
			 
			 To do this:
			 0. uncomment distribution management above
			 1. comment out parent element (top of pom), since this is what makes deploy push to https://oss.sonatype.org
			 2. comment out maven-javadoc-plugin, since its not worth bothering with that large upload
			 3. execute 
			  
			       mvn clean deploy  -Pgithub-mvn-repo
		
		 -->		
		<profile>
			<id>github-mvn-repo</id>
			<build>
			
				<plugins>
				
				    <plugin>
				        <artifactId>maven-deploy-plugin</artifactId>
				        <version>2.8.1</version>
				        <configuration>
				            <altDeploymentRepository>internal.repo::default::file://${project.build.directory}/mvn-repo</altDeploymentRepository>
				        </configuration>
				    </plugin>
				
			        <plugin>
			            <groupId>com.github.github</groupId>
			            <artifactId>site-maven-plugin</artifactId>
			            <version>0.12</version>
			            <configuration>
			            	<server>github</server>
			            	<merge>true</merge>
			                <message>Maven artifacts for ${project.version}</message>  <!-- git commit message -->
			                <noJekyll>true</noJekyll>                                  <!-- disable webpage processing -->
			                <outputDirectory>${project.build.directory}/mvn-repo</outputDirectory> <!-- matches distribution management repository url above -->
			                <branch>refs/heads/mvn-repo</branch>                        <!-- remote branch name -->
			                <includes><include>**/*</include></includes>
			                <repositoryName>docx4j</repositoryName>      <!-- github repo name -->
			                <repositoryOwner>plutext</repositoryOwner>    <!-- github username  -->
			            </configuration>
			            <executions>
			              <!-- run site-maven-plugin's 'site' target as part of the build's normal 'deploy' phase -->
			              <execution>
			                <goals>
			                  <goal>site</goal>
			                </goals>
			                <phase>deploy</phase>
			              </execution>
			            </executions>
			        </plugin>			
				</plugins>
			</build>
		</profile>
		

   		<!--  comment this out, until the Windows path issues below are fixed in m2eclipse
   	<profile>
   		<id>jdk15</id>
   		<activation>
   			<jdk>1.5</jdk>
   		</activation>
   		<dependencies>
   			<dependency>
   				<groupId>javax.xml.bind</groupId>
   				<artifactId>jaxb-api</artifactId>
   				<version>2.1</version>
   			</dependency>

   			<dependency>
   				<groupId>com.sun.xml.bind</groupId>
   				<artifactId>jaxb-impl</artifactId>
   				<version>2.1.3</version>
   			</dependency>
   		</dependencies>
   	</profile>
   	<profile>
   		<id>jdk16</id>
   		<activation>
   			<jdk>1.6</jdk>
   		</activation>
   		<dependencies>
   			<dependency>
   				<groupId>com.sun.xml.bind</groupId>
   				<artifactId>jaxb-impl</artifactId>
   				<version>2.0</version>
   				<scope>system</scope>
                <systemPath>${env.JAVA_HOME}/jre/lib/rt.jar</systemPath>
   			</dependency>
   		</dependencies>
   	</profile>
   				-->

   </profiles>

   				<!--
                <systemPath>
                    /usr/lib/jvm/java-6-sun/jre/lib/rt.jar
                </systemPath>
   					Note for Windows users: Maven won't find rt.jar if systemPath
   					contains a space (eg "Program Files"). Either copy rt.jar
   					to a path that doesn't contain spaces, or use:

   					    <systemPath>${env.JAVA_HOME}/jre/lib/rt.jar</systemPath>

   					which works on the command line, but not in m2eclipse 0.9.x.
   					See http://jira.codehaus.org/browse/MNGECLIPSE-581

   					<systemPath>${java.home}/lib/rt.jar</systemPath>
   					broken (mvn 2.0.9) even though java.home is supposed to point to JRE_HOME:

   				-->
   				
<!-- Uncomment to deploy to GitHub.  MUST Comment out for real release
<distributionManagement>
    <repository>
        <id>internal.repo</id>
        <name>Temporary Staging Repository</name>
        <url>file://${project.build.directory}/mvn-repo</url>
    </repository>
</distributionManagement>   				
-->
</project>
