<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<artifactId>spring-boot-starter-parent</artifactId>
		<groupId>org.springframework.boot</groupId>
		<version>1.3.0.M5</version>
		<relativePath></relativePath>
		<!-- lookup parent from repository -->
	</parent>

	<groupId>eu.dzhw.fdz</groupId>
	<artifactId>metadatamanagement</artifactId>
	<version>0.0.7-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>MetaDataManagement</name>
	<description>This platform gathers all metadata of the surveys published by our FDZ.</description>
	<url>http://dzhw.github.io/metadatamanagement</url>

	<organization>
		<name>DZHW GmbH</name>
		<url>http://www.dzhw.eu</url>
	</organization>

	<developers>
		<developer>
			<name>Ren√© Reitmann</name>
			<organization>DZHW GmbH</organization>
			<roles>
				<role>Developer</role>
			</roles>
		</developer>
		<developer>
			<name>Amine Limouri</name>
			<organization>DZHW GmbH</organization>
			<roles>
				<role>Developer</role>
			</roles>
		</developer>
		<developer>
			<name>Daniel Katzberg</name>
			<organization>DZHW GmbH</organization>
			<roles>
				<role>Developer</role>
			</roles>
		</developer>
	</developers>

	<scm>
		<connection>scm:https://github.com/dzhw/metadatamanagement.git</connection>
		<developerConnection>scm:https://github.com/dzhw/metadatamanagement.git</developerConnection>
		<url>https://github.com/dzhw/metadatamanagement</url>
	</scm>

	<issueManagement>
		<system>Github</system>
		<url>https://github.com/dzhw/metadatamanagement/issues</url>
	</issueManagement>

	<ciManagement>
		<system>Travis</system>
		<url>${travis.url}</url>
	</ciManagement>

	<properties>
		<buildtime>${maven.build.timestamp}</buildtime>
		<cloudfoundry.prototype.url>https://metadatamanagement.cfapps.io</cloudfoundry.prototype.url>
		<coveralls.url>https://coveralls.io/r/dzhw/metadatamanagement</coveralls.url>
		<jacoco.version>0.7.5.201505241946</jacoco.version>
		<java.version>1.8</java.version>
		<maven.build.timestamp.format>yyyy-MM-dd HH:mm</maven.build.timestamp.format>
		<pivotal.console.url>https://console.run.pivotal.io/organizations/0c7fb2aa-17e1-4d57-824c-2a6d3dbc335b#spacesit</pivotal.console.url>
		<!-- use UTF-8 for everything -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<start-class>eu.dzhw.fdz.metadatamanagement.MetaDataManagementApplication</start-class>
		<test.system.url>https://metadatamanagement.cfapps.io</test.system.url>
		<travis.url>https://travis-ci.org/dzhw/metadatamanagement</travis.url>
	</properties>

	<dependencies>
		<!-- json binding for LocalDate etc.. -->
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-jsr310</artifactId>
		</dependency>

		<!-- For FindBugs Annotation. -->
		<dependency>
			<groupId>com.google.code.findbugs</groupId>
			<artifactId>findbugs</artifactId>
			<version>3.0.1</version>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>18.0</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-elasticsearch</artifactId>
		</dependency>
		<!-- HATEOAS -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-hateoas</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>net.karneim</groupId>
			<artifactId>pojobuilder</artifactId>
			<version>3.4.0</version>
			<!-- 'provided' scope because this is only needed during compilation -->
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>com.bitplan</groupId>
			<artifactId>w3cValidator</artifactId>
			<version>0.0.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<!-- Add Spring repositories -->
	<!-- (you don't need this if you are using a .RELEASE version) -->
	<repositories>
		<repository>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
			<id>spring-snapshots</id>
			<url>http://repo.spring.io/snapshot</url>
		</repository>
		<repository>
			<id>spring-milestones</id>
			<url>http://repo.spring.io/milestone</url>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>spring-snapshots</id>
			<url>http://repo.spring.io/snapshot</url>
		</pluginRepository>
		<pluginRepository>
			<id>spring-milestones</id>
			<url>http://repo.spring.io/milestone</url>
		</pluginRepository>
	</pluginRepositories>

	<build>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-pmd-plugin</artifactId>
										<versionRange>[3.5,)</versionRange>
										<goals>
											<goal>cpd-check</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>build-helper-maven-plugin</artifactId>
										<versionRange>[1.9.1,)</versionRange>
										<goals>
											<goal>reserve-network-port</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<!-- fail build on compiler warning -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<compilerArgs>
						<arg>-Xlint</arg>
						<!-- <arg>-Werror</arg> -->
						<arg>-proc:none</arg>
					</compilerArgs>
					<showDeprecation>true</showDeprecation>
					<showWarnings>true</showWarnings>
				</configuration>
			</plugin>
			<!-- Generate Builder Classes -->
			<plugin>
				<groupId>org.bsc.maven</groupId>
				<artifactId>maven-processor-plugin</artifactId>
				<version>2.2.4</version>
				<executions>
					<execution>
						<id>process</id>
						<phase>process-sources</phase>
						<goals>
							<goal>process</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<defaultOutputDirectory>${project.build.directory}/generated-test-sources/</defaultOutputDirectory>
				</configuration>
			</plugin>
			<!-- Checkstyle and fail the build -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>2.17</version>
				<executions>
					<execution>
						<id>checkstyle</id>
						<phase>validate</phase>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<excludes>${project.build.directory}/generated-test-sources/**</excludes>
							<configLocation>buildconfig/google_checks.xml</configLocation>
							<encoding>UTF-8</encoding>
							<consoleOutput>true</consoleOutput>
							<failsOnError>true</failsOnError>
							<failOnViolation>true</failOnViolation>
							<maxAllowedViolations>0</maxAllowedViolations>
							<linkXRef>false</linkXRef>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Findbugs and fail the build -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
				<version>3.0.2</version>
				<executions>
					<execution>
						<id>findbugs</id>
						<phase>compile</phase>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<effort>Max</effort>
					<threshold>Low</threshold>
					<xmlOutput>true</xmlOutput>
				</configuration>
			</plugin>
			<!-- PMD analysis may fail the build -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>3.5</version>
				<executions>
					<execution>
						<id>pmd check</id>
						<phase>validate</phase>
						<goals>
							<goal>check</goal>
							<goal>cpd-check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- reuse README.md as index on github pages -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-readme</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/src/site/markdown</outputDirectory>
							<resources>
								<resource>
									<directory>${basedir}</directory>
									<includes>
										<include>README.md</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-dockerfiles</id>
						<!-- here the phase you need -->
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/docker</outputDirectory>
							<resources>
								<resource>
									<directory>docker</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- fail build on js hint errors -->
			<plugin>
				<groupId>com.cj.jshintmojo</groupId>
				<artifactId>jshint-maven-plugin</artifactId>
				<version>1.6.0</version>
				<executions>
					<execution>
						<goals>
							<goal>lint</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<version>2.4.3</version>
					<directories>
						<directory>src/main/resources/static/js</directory>
					</directories>
					<failOnError>true</failOnError>
				</configuration>
			</plugin>
			<!-- build a fat jar -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<dependencies>
					<dependency>
						<groupId>org.springframework</groupId>
						<artifactId>springloaded</artifactId>
						<version>1.2.4.RELEASE</version>
					</dependency>
				</dependencies>
				<configuration>
					<arguments>
						<argument>--spring.profiles.active=development</argument>
					</arguments>
				</configuration>
			</plugin>
			<!-- prepare port for integration test -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>reserve-tomcat-port</id>
						<phase>process-resources</phase>
						<goals>
							<goal>reserve-network-port</goal>
						</goals>
						<configuration>
							<portNames>
								<portName>tomcat.http.port</portName>
							</portNames>
						</configuration>
					</execution>
					<execution>
						<id>add-source</id>
						<phase>generate-test-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>${project.build.directory}/generated-test-sources/</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- run the jar for integration test -->
			<plugin>
				<groupId>com.bazaarvoice.maven.plugins</groupId>
				<artifactId>process-exec-maven-plugin</artifactId>
				<version>0.7</version>
				<executions>
					<execution>
						<id>pre-integration-test</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>start</goal>
						</goals>
						<configuration>
							<waitForInterrupt>false</waitForInterrupt>
							<waitAfterLaunch>60</waitAfterLaunch>
							<healthcheckUrl>http://localhost:${tomcat.http.port}/</healthcheckUrl>
							<arguments>
								<argument>java</argument>
								<argument>-jar</argument>
								<argument>${project.build.finalName}.${project.packaging}</argument>
								<argument>--server.port=${tomcat.http.port}</argument>
							</arguments>
						</configuration>
					</execution>
					<!--Stop all processes in reverse order -->
					<execution>
						<id>post-integration-test</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop-all</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- enable integration test with reserved port -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<systemPropertyVariables>
						<test.server.port>${tomcat.http.port}</test.server.port>
					</systemPropertyVariables>
				</configuration>
			</plugin>
			<!-- create git.properties -->
			<plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
			</plugin>
			<!-- deploy fat jar to cloudfoundry -->
			<plugin>
				<groupId>org.cloudfoundry</groupId>
				<artifactId>cf-maven-plugin</artifactId>
				<version>1.1.3</version>
				<configuration>
					<path>${project.build.directory}/${project.build.finalName}.${project.packaging}</path>
					<server>cloudfoundry</server>
					<target>http://api.run.pivotal.io</target>
					<org>DZHW</org>
					<space>development</space>
					<appname>metadatamanagement</appname>
					<url>metadatamanagement.cfapps.io</url>
					<buildpack>https://github.com/cloudfoundry/java-buildpack</buildpack>
					<memory>1024</memory>
					<diskQuota>1024</diskQuota>
					<healthCheckTimeout>60</healthCheckTimeout>
					<instances>1</instances>
				</configuration>
			</plugin>
			<!-- wrap the jar into a docker image -->
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.3.5</version>
				<configuration>
					<imageName>${project.artifactId}:${project.version}</imageName>
					<dockerDirectory>${project.build.directory}/docker</dockerDirectory>
					<!-- copy the service's jar file from target into the root directory 
						of the image -->
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.${project.packaging}</include>
						</resource>
					</resources>
				</configuration>
			</plugin>
			<!-- Measure java code coverage with jacoco -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.version}</version>
				<executions>
					<execution>
						<id>prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<excludes>
						<exclude>**/builders/</exclude>
					</excludes>
				</configuration>
			</plugin>
			<!-- report code coverage to coveralls -->
			<plugin>
				<groupId>org.eluder.coveralls</groupId>
				<artifactId>coveralls-maven-plugin</artifactId>
				<version>4.0.0</version>
			</plugin>
			<!-- Plugins for the maven site -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<dependencies>
					<!-- enable reflow skin and markdown support -->
					<dependency>
						<groupId>lt.velykis.maven.skins</groupId>
						<artifactId>reflow-velocity-tools</artifactId>
						<version>1.1.1</version>
					</dependency>
					<!-- Reflow skin requires Velocity >= 1.7 -->
					<dependency>
						<groupId>org.apache.velocity</groupId>
						<artifactId>velocity</artifactId>
						<version>1.7</version>
					</dependency>
				</dependencies>
				<!-- Disable "normal" site deployment -->
				<configuration>
					<skipDeploy>true</skipDeploy>
				</configuration>
			</plugin>
			<!-- sort the pom.xml -->
			<plugin>
				<groupId>com.github.ekryd.sortpom</groupId>
				<artifactId>sortpom-maven-plugin</artifactId>
				<version>2.4.0</version>
				<configuration>
					<encoding>${project.build.sourceEncoding}</encoding>
					<createBackupFile>false</createBackupFile>
					<sortDependencies>scope,groupId,artifactId</sortDependencies>
					<sortProperties>true</sortProperties>
					<keepBlankLines>true</keepBlankLines>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>2.8.1</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>project-team</report>
							<report>issue-tracking</report>
							<report>dependencies</report>
							<report>dependency-convergence</report>
							<report>plugins</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>versions-maven-plugin</artifactId>
				<version>2.2</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>dependency-updates-report</report>
							<report>plugin-updates-report</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.version}</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.10.3</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>javadoc-no-fork</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
		</plugins>
	</reporting>
</project>
