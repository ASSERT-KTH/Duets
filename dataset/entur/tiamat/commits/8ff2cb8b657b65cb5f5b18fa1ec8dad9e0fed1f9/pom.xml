<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>no.rutebanken</groupId>
    <artifactId>tiamat</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>Tiamat</name>
    <description>Stop place register / holdeplassregister</description>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!-- versions for use in mvn plugins as we cannot inherit them from a BOM -->
        <fabric8.version>2.2.59</fabric8.version>
        <docker.maven.plugin.version>0.13.6</docker.maven.plugin.version>
        <spring-boot-plugin.version>1.3.0.RELEASE</spring-boot-plugin.version>
        <spring-boot.version>1.3.0.RELEASE</spring-boot.version>
        <spring.security.version>4.0.3.RELEASE</spring.security.version>
        <keycloak.version>1.6.1.Final</keycloak.version>
        <hibernate-spatial.version>4.3</hibernate-spatial.version>
        <postgresql.version>9.4-1201-jdbc41</postgresql.version>
        <geodb.version>0.7</geodb.version>

        <!-- Docker & Fabric8 Configs -->
        <docker.from>fabric8/java-jboss-openjdk8-jdk:1.0.10</docker.from>
        <fabric8.dockerUser>rutebanken/</fabric8.dockerUser>
        <docker.image>${fabric8.dockerUser}${project.artifactId}:${project.version}</docker.image>

        <fabric8.service.name>springboot-webmvc</fabric8.service.name>
        <fabric8.service.port>80</fabric8.service.port>
        <fabric8.service.containerPort>8080</fabric8.service.containerPort>

        <!-- fabric8.env.AB_JOLOKIA_AUTH_OPENSHIFT>true</fabric8.env.AB_JOLOKIA_AUTH_OPENSHIFT -->
        <fabric8.label.component>${project.artifactId}</fabric8.label.component>
        <fabric8.label.container>spring-boot</fabric8.label.container>
        <fabric8.label.group>rutebanken</fabric8.label.group>
        <fabric8.iconRef>spring-boot</fabric8.iconRef>

        <java.version>1.8</java.version>
        <maven.compiler.target>1.8</maven.compiler.target>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven-javadoc-plugin.version>2.9.1</maven-javadoc-plugin.version>
        <docker.maven.plugin.version>0.13.6</docker.maven.plugin.version>
        <docker.port.container.jolokia>8778</docker.port.container.jolokia>
        <jackson-jaxrs-json-provider.version>2.3.2</jackson-jaxrs-json-provider.version>
        <jackson-module-jaxb-annotations.version>2.3.2</jackson-module-jaxb-annotations.version>
        <httpcomponents-fluent.version>4.5.1</httpcomponents-fluent.version>
        <onebusaway-gtfs.version>1.3.4</onebusaway-gtfs.version>
        <assertj-core.version>3.2.0</assertj-core.version>

    </properties>

    <!-- This repository list can be deleted, as it is now supplied by rutebanken nexus.
         But you have set up maven to use it as mirror in settings.xml ... -->
    <repositories>
        <repository>
            <id>OSGEO GeoTools repo</id>
            <url>http://download.osgeo.org/webdav/geotools</url>
        </repository>
        <repository>
            <id>Hibernate Spatial repo</id>
            <url>http://www.hibernatespatial.org/repository</url>
        </repository>
        <repository>
            <id>geo-solutions.it</id>
            <url>http://maven.geo-solutions.it</url>
        </repository>
    </repositories>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>io.fabric8</groupId>
                <artifactId>fabric8-project</artifactId>
                <version>${fabric8.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.jaxrs</groupId>
                <artifactId>jackson-jaxrs-json-provider</artifactId>
                <version>${jackson-jaxrs-json-provider.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.module</groupId>
                <artifactId>jackson-module-jaxb-annotations</artifactId>
                <version>${jackson-module-jaxb-annotations.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jersey</artifactId>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>${postgresql.version}</version>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-spatial</artifactId>
            <version>${hibernate-spatial.version}</version>
        </dependency>



        <dependency>
            <groupId>org.opengeo</groupId>
            <artifactId>geodb</artifactId>
            <version>${geodb.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>fluent-hc</artifactId>
            <version>${httpcomponents-fluent.version}</version>
        </dependency>

        <dependency>
            <groupId>org.onebusaway</groupId>
            <artifactId>onebusaway-gtfs</artifactId>
            <version>${onebusaway-gtfs.version}</version>
        </dependency>

        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>${assertj-core.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Spring Security & Keycloak -->
        <dependency>
	      <groupId>org.keycloak</groupId>
	      <artifactId>keycloak-tomcat8-adapter</artifactId>
	      <version>${keycloak.version}</version>
	    </dependency>

        <dependency>
         <groupId>org.keycloak</groupId>
         <artifactId>keycloak-spring-security-adapter</artifactId>
         <version>${keycloak.version}</version>
        </dependency>

        <dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.4</version>
         </dependency>

    </dependencies>


    <build>
        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.3</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot-plugin.version}</version>
                <configuration>
                    <mainClass>no.rutebanken.tiamat.TiamatApplication</mainClass>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>fabric8-maven-plugin</artifactId>
                <version>${fabric8.version}</version>
                <executions>
                    <execution>
                        <id>json</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>json</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>attach</id>
                        <phase>package</phase>
                        <goals>
                            <goal>attach</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.jolokia</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>${docker.maven.plugin.version}</version>
                <configuration>
                    <images>
                        <image>
                            <name>${docker.image}</name>
                            <build>
                                <from>${docker.from}</from>
                                <assembly>
                                    <basedir>/app</basedir>
                                    <descriptorRef>artifact</descriptorRef>
                                </assembly>
                                <env>
                                    <JAVA_APP_JAR>${project.build.finalName}.jar</JAVA_APP_JAR>
                                </env>
                            </build>
                        </image>
                    </images>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <!--
     Default sample commands:

     mvn -Pf8-build         ... build Docker images and create OpenShift deployment configs
     mvn -Pf8-deploy        ... f8-build + push to Docker registry + applying deployment config to OpenShift
     mvn -Pf8-local-deploy ... deployment for a single node setup without pushing to a registry

     For individual goal usage please consult the fabric8 documentation
     -->

    <profiles>
        <profile>
            <id>f8-build</id>
            <build>
                <defaultGoal>clean install docker:build fabric8:json</defaultGoal>
            </build>
        </profile>
        <profile>
            <id>f8-deploy</id>
            <properties>
                <fabric8.imagePullPolicySnapshot>Always</fabric8.imagePullPolicySnapshot>
                <fabric8.recreate>true</fabric8.recreate>
            </properties>
            <build>
                <defaultGoal>clean install docker:build docker:push fabric8:json fabric8:apply</defaultGoal>
            </build>
        </profile>
        <profile>
            <id>f8-local-deploy</id>
            <properties>
                <fabric8.recreate>true</fabric8.recreate>
            </properties>
            <build>
                <defaultGoal>clean install docker:build fabric8:json fabric8:apply</defaultGoal>
            </build>
        </profile>
    </profiles>

</project>
