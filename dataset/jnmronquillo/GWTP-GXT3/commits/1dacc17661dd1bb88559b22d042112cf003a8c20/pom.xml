<?xml version="1.0" encoding="UTF-8"?>
<project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <!-- POM file generated with GWT webAppCreator -->
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>tab-example</artifactId>
  <packaging>war</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>GWT Maven Archetype</name>

  <properties>
    <!-- Convenience property to set the GWT version -->
    <gwtVersion>2.4.0</gwtVersion>
    <gwtp.version>0.7</gwtp.version>
    <!-- GWT needs at least java 1.5 -->
    <webappDirectory>${project.build.directory}/${project.build.finalName}</webappDirectory>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
  
  <repositories>	
	<repository>
      <id>sencha-gpl-release</id>
      <name>Open source licensed Sencha artifacts</name>
      <url>https://maven.sencha.com/repo/gpl-release/</url>
    </repository>
  </repositories>

  <dependencies>
    <!-- Google Web Toolkit (GWT) -->
    
    <dependency>
      <groupId>com.google.gwt</groupId>
      <artifactId>gwt-user</artifactId>
      <version>${gwtVersion}</version>
      <scope>provided</scope>
    </dependency>
    <!-- For the servlet filter -->

    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
      <version>2.5</version>
      <scope>provided</scope> 
    </dependency>
    
    <!-- RequestFactory server -->
    
    <dependency>
      <groupId>com.google.web.bindery</groupId>
      <artifactId>requestfactory-server</artifactId>
      <version>2.4.0</version>
    </dependency>
    
    <!-- RequestFactory will use JSR 303 javax.validation if you let it -->
    <dependency>
      <groupId>javax.validation</groupId>
      <artifactId>validation-api</artifactId>
      <version>1.0.0.GA</version>
      <classifier>sources</classifier>
    </dependency>
    
    <dependency>
  	  <groupId>org.hibernate</groupId>
  	  <artifactId>hibernate-validator</artifactId>
  	  <version>4.2.0.Final</version>
  	  <exclusions>
        <exclusion>
          <groupId>javax.xml.bind</groupId>
          <artifactId>jaxb-api</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.sun.xml.bind</groupId>
          <artifactId>jaxb-impl</artifactId>
        </exclusion>
      </exclusions>
	</dependency>
	
	<!-- Required by Hibernate validator because slf4j-log4j is
         optional in the hibernate-validator POM  -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <version>1.6.1</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>1.6.1</version>
    </dependency>
    
	<!-- sencha gxt3 -->
    <dependency>
  	  <groupId>com.sencha.gxt</groupId>
  	  <artifactId>gxt</artifactId>
  	  <version>3.0.0b</version>
	</dependency>
	
	<!-- sencha uibinder support -->
	<dependency>
  	  <groupId>com.sencha.gxt</groupId>
	  <artifactId>uibinder-bridge</artifactId>
	  <version>2.4.0</version>
	</dependency>
	
	<!-- google guice -->
    <dependency>
      <groupId>com.google.inject</groupId>
      <artifactId>guice</artifactId>
      <version>3.0</version>
    </dependency>
    
    <!-- google guice-servlet -->
    <dependency>
	  <groupId>com.google.inject.extensions</groupId>
	  <artifactId>guice-servlet</artifactId>
	  <version>3.0</version>
	</dependency>
    
    <!-- google guice-persist -->
    <dependency>
  	  <groupId>com.google.inject.extensions</groupId>
  	  <artifactId>guice-persist</artifactId>
  	  <version>3.0</version>
	</dependency>
	
	<!-- google-gin -->
	<dependency>
      <groupId>com.google.gwt.inject</groupId>
      <artifactId>gin</artifactId>
      <version>1.5.0</version>
      <exclusions>
        <exclusion>
          <groupId>com.google.gwt</groupId>
          <artifactId>gwt-servlet</artifactId>
        </exclusion>
      </exclusions>
	</dependency>
	
	<!-- hibernate core -->
	<dependency>
	  <groupId>org.hibernate</groupId>
	  <artifactId>hibernate-core</artifactId>
	  <version>3.6.10.Final</version>
	</dependency>
	
	<!-- hibernate jpa -->
	<dependency>
	  <groupId>org.hibernate</groupId>
	  <artifactId>hibernate-entitymanager</artifactId>
	  <version>3.6.10.Final</version>	
	</dependency>
	
	<!-- hibernate metamodel -->
	<dependency>
	  <groupId>org.hibernate</groupId>
	  <artifactId>hibernate-jpamodelgen</artifactId>
	  <version>1.2.0.Final</version>
	</dependency>
	
	<!-- postgresql jdbc connector -->
	<dependency>
	  <groupId>postgresql</groupId>
	  <artifactId>postgresql</artifactId>
	  <version>9.1-901-1.jdbc4</version>
	</dependency>
	
	<!-- MVP component -->
   <dependency>
     <groupId>com.gwtplatform</groupId>
     <artifactId>gwtp-mvp-client</artifactId>
     <version>${gwtp.version}</version>
     <scope>provided</scope>
   </dependency>
   
   <!-- Crawler component -->
   <dependency>
     <groupId>com.gwtplatform</groupId>
     <artifactId>gwtp-crawler</artifactId>
     <version>${gwtp.version}</version>
   </dependency>
   
   <!-- Annotation component -->
   <dependency>
     <groupId>com.gwtplatform</groupId>
     <artifactId>gwtp-processors</artifactId>
     <version>${gwtp.version}</version>
     <scope>provided</scope>
   </dependency>

   <!-- Tester component -->
   <dependency>
     <groupId>com.gwtplatform</groupId>
     <artifactId>gwtp-tester</artifactId>
     <version>${gwtp.version}</version>
     <scope>test</scope>
   </dependency>
   
  </dependencies>
   

  <build>
    <!-- Generate compiled stuff in the folder used for developing mode -->
    <outputDirectory>${webappDirectory}/WEB-INF/classes</outputDirectory>

    <plugins>
    
    <!-- requestfactory-apt runs an annotation processor (APT) to
           instrument its service interfaces so that
           RequestFactoryServer can decode client requests. Normally
           you would just have a dependency on requestfactory-apt
           with <scope>provided</scope>, but that won't work in
           eclipse due to m2e bug
           https://bugs.eclipse.org/bugs/show_bug.cgi?id=335036 -->
      <plugin>
        <groupId>org.bsc.maven</groupId>
        <artifactId>maven-processor-plugin</artifactId>
        <version>2.0.5</version>
        <executions>
          <execution>
            <id>process</id>
            <goals>
              <goal>process</goal>
            </goals>
            <phase>generate-sources</phase>
            <configuration>
                <outputDirectory>${project.build.directory}/generated-sources/gwt</outputDirectory>
            </configuration>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>com.google.web.bindery</groupId>
            <artifactId>requestfactory-apt</artifactId>
            <version>${gwtVersion}</version>
          </dependency>
        </dependencies>
      </plugin>
      
      <!-- Google Plugin for Eclipse (GPE) won't see the source
           generated above by requestfactory-apt unless it is exposed
           as an additional source dir-->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>1.7</version>
        <executions>
          <execution>
            <id>add-source</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${project.build.directory}/generated-sources/gwt</source>
              </sources>
            </configuration>
          </execution>          
        </executions>
      </plugin>

      <!-- GWT Maven Plugin -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>gwt-maven-plugin</artifactId>
        <version>2.4.0</version>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>test</goal>
              <goal>i18n</goal>
              <goal>generateAsync</goal>
            </goals>
          </execution>
        </executions>
        <!-- Plugin configuration. There are many available options, see 
          gwt-maven-plugin documentation at codehaus.org -->
        <configuration>
          <runTarget>example.html</runTarget>
          <hostedWebapp>${webappDirectory}</hostedWebapp>
          <i18nMessagesBundle>com.example.client.Messages</i18nMessagesBundle>
        </configuration>
      </plugin>

      <!-- Copy static web files before executing gwt:run -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>2.1.1</version>
        <executions>
          <execution>
            <phase>compile</phase>
            <goals>
              <goal>exploded</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <webappDirectory>${webappDirectory}</webappDirectory>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>2.3.2</version>
        <configuration>
          <source>1.5</source>
          <target>1.5</target>
        </configuration>
      </plugin>
    </plugins>
    <pluginManagement>
    	<plugins>
    		<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
    		<plugin>
    			<groupId>org.eclipse.m2e</groupId>
    			<artifactId>lifecycle-mapping</artifactId>
    			<version>1.0.0</version>
    			<configuration>
    				<lifecycleMappingMetadata>
    					<pluginExecutions>
    						<pluginExecution>
    							<pluginExecutionFilter>
    								<groupId>org.codehaus.mojo</groupId>
    								<artifactId>
    									gwt-maven-plugin
    								</artifactId>
    								<versionRange>
    									[2.4.0,)
    								</versionRange>
    								<goals>
    									<goal>generateAsync</goal>
    									<goal>i18n</goal>
    								</goals>
    							</pluginExecutionFilter>
    							<action>
    								<ignore></ignore>
    							</action>
    						</pluginExecution>
    						<pluginExecution>
    							<pluginExecutionFilter>
    								<groupId>org.bsc.maven</groupId>
    								<artifactId>
    									maven-processor-plugin
    								</artifactId>
    								<versionRange>
    									[2.0.5,)
    								</versionRange>
    								<goals>
    									<goal>process</goal>
    								</goals>
    							</pluginExecutionFilter>
    							<action>
    								<ignore></ignore>
    							</action>
    						</pluginExecution>
    					</pluginExecutions>
    				</lifecycleMappingMetadata>
    			</configuration>
    		</plugin>
    	</plugins>
    </pluginManagement>
  </build>

</project>
