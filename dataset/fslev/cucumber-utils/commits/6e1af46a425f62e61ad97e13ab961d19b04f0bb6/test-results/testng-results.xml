<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" ignored="0" total="47" passed="47">
  <reporter-output>
  </reporter-output>
  <suite name="Surefire suite" duration-ms="37242" started-at="2020-07-30T20:14:02 UTC" finished-at="2020-07-30T20:14:40 UTC">
    <groups>
    </groups>
    <test name="Surefire test" duration-ms="37242" started-at="2020-07-30T20:14:02 UTC" finished-at="2020-07-30T20:14:40 UTC">
      <class name="com.cucumber.utils.context.props.internal.SpelParserTest">
        <test-method status="PASS" signature="spELGeneratesNull()" name="spELGeneratesNull" duration-ms="2" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- spELGeneratesNull -->
        <test-method status="PASS" signature="invalidSpelExpression()" name="invalidSpelExpression" duration-ms="6" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- invalidSpelExpression -->
        <test-method status="PASS" signature="testSimpleParse()" name="testSimpleParse" duration-ms="2" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSimpleParse -->
        <test-method status="PASS" signature="emptySourceTest()" name="emptySourceTest" duration-ms="3" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- emptySourceTest -->
      </class> <!-- com.cucumber.utils.context.props.internal.SpelParserTest -->
      <class name="com.cucumber.utils.engineering.utils.RegexUtilsTest">
        <test-method status="PASS" signature="testNullStringContainsSpecialRegexCharacters()" name="testNullStringContainsSpecialRegexCharacters" duration-ms="1" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNullStringContainsSpecialRegexCharacters -->
        <test-method status="PASS" signature="testStringContainsSpecialRegexCharacters()" name="testStringContainsSpecialRegexCharacters" duration-ms="0" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringContainsSpecialRegexCharacters -->
      </class> <!-- com.cucumber.utils.engineering.utils.RegexUtilsTest -->
      <class name="com.cucumber.utils.context.props.internal.ScenarioPropsSubstitutorTest">
        <test-method status="PASS" signature="testStandaloneScenarioPropsSubstitution()" name="testStandaloneScenarioPropsSubstitution" duration-ms="34" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStandaloneScenarioPropsSubstitution -->
        <test-method status="PASS" signature="testStandaloneScenarioPropsSubstitutionWithDynamicValues()" name="testStandaloneScenarioPropsSubstitutionWithDynamicValues" duration-ms="37" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStandaloneScenarioPropsSubstitutionWithDynamicValues -->
        <test-method status="PASS" signature="testSubstitutionWithEmptyScenarioProps()" name="testSubstitutionWithEmptyScenarioProps" duration-ms="79" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubstitutionWithEmptyScenarioProps -->
        <test-method status="PASS" signature="testScenarioPropsSubstitution()" name="testScenarioPropsSubstitution" duration-ms="71" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testScenarioPropsSubstitution -->
      </class> <!-- com.cucumber.utils.context.props.internal.ScenarioPropsSubstitutorTest -->
      <class name="com.cucumber.utils.compare.httpresponsewrapper.HttpResponseWrapperTest">
        <test-method status="PASS" signature="testWrapperInitFromOtherJsonString() throws java.lang.Exception" name="testWrapperInitFromOtherJsonString" duration-ms="420" started-at="2020-07-30T20:14:06 UTC" finished-at="2020-07-30T20:14:07 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWrapperInitFromOtherJsonString -->
        <test-method status="PASS" signature="testWrapperInitFromHttpResponse() throws java.lang.Exception" name="testWrapperInitFromHttpResponse" duration-ms="482" started-at="2020-07-30T20:14:06 UTC" finished-at="2020-07-30T20:14:07 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWrapperInitFromHttpResponse -->
        <test-method status="PASS" signature="testWrapperInitFromString() throws java.lang.Exception" name="testWrapperInitFromString" duration-ms="402" started-at="2020-07-30T20:14:06 UTC" finished-at="2020-07-30T20:14:07 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWrapperInitFromString -->
        <test-method status="PASS" signature="testWrapperInitFromStringStatus() throws java.lang.Exception" name="testWrapperInitFromStringStatus" duration-ms="422" started-at="2020-07-30T20:14:06 UTC" finished-at="2020-07-30T20:14:07 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWrapperInitFromStringStatus -->
        <test-method status="PASS" signature="testWrapperInitFromEmptyJsonString() throws java.lang.Exception" name="testWrapperInitFromEmptyJsonString" duration-ms="485" started-at="2020-07-30T20:14:06 UTC" finished-at="2020-07-30T20:14:07 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWrapperInitFromEmptyJsonString -->
        <test-method status="PASS" signature="testWrapperInitFromEmptyString() throws java.lang.Exception" name="testWrapperInitFromEmptyString" duration-ms="423" started-at="2020-07-30T20:14:06 UTC" finished-at="2020-07-30T20:14:07 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWrapperInitFromEmptyString -->
        <test-method status="PASS" signature="testWrapperInitFromOtherJsonStringMessage()" name="testWrapperInitFromOtherJsonStringMessage" duration-ms="408" started-at="2020-07-30T20:14:06 UTC" finished-at="2020-07-30T20:14:07 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWrapperInitFromOtherJsonStringMessage -->
        <test-method status="PASS" signature="testWrapperInitFromMap() throws java.lang.Exception" name="testWrapperInitFromMap" duration-ms="390" started-at="2020-07-30T20:14:06 UTC" finished-at="2020-07-30T20:14:07 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWrapperInitFromMap -->
      </class> <!-- com.cucumber.utils.compare.httpresponsewrapper.HttpResponseWrapperTest -->
      <class name="com.cucumber.utils.engineering.utils.JsonUtilsTest">
        <test-method status="PASS" signature="testSimpleJsonSpecialRegexCharactersFromArray() throws java.io.IOException" name="testSimpleJsonSpecialRegexCharactersFromArray" duration-ms="1077" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:06 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSimpleJsonSpecialRegexCharactersFromArray -->
        <test-method status="PASS" signature="testSimpleJsonSpecialRegexCharacters() throws java.io.IOException" name="testSimpleJsonSpecialRegexCharacters" duration-ms="1045" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:06 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSimpleJsonSpecialRegexCharacters -->
        <test-method status="PASS" signature="testBigJsonBeautification() throws java.io.IOException" name="testBigJsonBeautification" duration-ms="1025" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:06 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBigJsonBeautification -->
      </class> <!-- com.cucumber.utils.engineering.utils.JsonUtilsTest -->
      <class name="com.cucumber.utils.context.props.ScenarioPropsParserTest">
        <test-method status="PASS" signature="testSimpleSpel()" name="testSimpleSpel" duration-ms="2520" started-at="2020-07-30T20:14:03 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSimpleSpel -->
        <test-method status="PASS" signature="testInvalidSpel()" name="testInvalidSpel" duration-ms="2527" started-at="2020-07-30T20:14:03 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidSpel -->
        <test-method status="PASS" signature="testScenarioPlaceholderFillInSimpleText()" name="testScenarioPlaceholderFillInSimpleText" duration-ms="2521" started-at="2020-07-30T20:14:03 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testScenarioPlaceholderFillInSimpleText -->
        <test-method status="PASS" signature="testSpELWhichGeneratesNull()" name="testSpELWhichGeneratesNull" duration-ms="2530" started-at="2020-07-30T20:14:03 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSpELWhichGeneratesNull -->
        <test-method status="PASS" signature="testEmptySpel()" name="testEmptySpel" duration-ms="2531" started-at="2020-07-30T20:14:03 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmptySpel -->
        <test-method status="PASS" signature="testGlobalAndScenarioPlaceholderFillInSimpleText()" name="testGlobalAndScenarioPlaceholderFillInSimpleText" duration-ms="2530" started-at="2020-07-30T20:14:03 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGlobalAndScenarioPlaceholderFillInSimpleText -->
        <test-method status="PASS" signature="testGlobalPlaceholderFillInSimpleTextAndInvalidParameters()" name="testGlobalPlaceholderFillInSimpleTextAndInvalidParameters" duration-ms="2529" started-at="2020-07-30T20:14:03 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGlobalPlaceholderFillInSimpleTextAndInvalidParameters -->
        <test-method status="PASS" signature="testSpelGeneratesObject()" name="testSpelGeneratesObject" duration-ms="2540" started-at="2020-07-30T20:14:03 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSpelGeneratesObject -->
        <test-method status="PASS" signature="testGlobalAndScenarioPlaceholderFillInJson()" name="testGlobalAndScenarioPlaceholderFillInJson" duration-ms="2542" started-at="2020-07-30T20:14:03 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGlobalAndScenarioPlaceholderFillInJson -->
        <test-method status="PASS" signature="testScenarioPlaceholderFillInSimpleTextAndInvalidParameters()" name="testScenarioPlaceholderFillInSimpleTextAndInvalidParameters" duration-ms="2530" started-at="2020-07-30T20:14:03 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testScenarioPlaceholderFillInSimpleTextAndInvalidParameters -->
        <test-method status="PASS" signature="testGlobalPlaceholderFillInSimpleText()" name="testGlobalPlaceholderFillInSimpleText" duration-ms="2544" started-at="2020-07-30T20:14:03 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGlobalPlaceholderFillInSimpleText -->
        <test-method status="PASS" signature="testSpelWithScenarioProps()" name="testSpelWithScenarioProps" duration-ms="2543" started-at="2020-07-30T20:14:03 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSpelWithScenarioProps -->
      </class> <!-- com.cucumber.utils.context.props.ScenarioPropsParserTest -->
      <class name="com.cucumber.utils.engineering.utils.StringFormatTest">
        <test-method status="PASS" signature="testPropertiesReplaceWithNulls()" name="testPropertiesReplaceWithNulls" duration-ms="125" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPropertiesReplaceWithNulls -->
        <test-method status="PASS" signature="testStringToColumnsFormatter()" name="testStringToColumnsFormatter" duration-ms="49" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringToColumnsFormatter -->
        <test-method status="PASS" signature="testStringToColumnsFormatterWithLines()" name="testStringToColumnsFormatterWithLines" duration-ms="46" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringToColumnsFormatterWithLines -->
        <test-method status="PASS" signature="testStringToColumnsFormatterWithEmptyColumns()" name="testStringToColumnsFormatterWithEmptyColumns" duration-ms="126" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringToColumnsFormatterWithEmptyColumns -->
        <test-method status="PASS" signature="testPropertiesReplace()" name="testPropertiesReplace" duration-ms="79" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPropertiesReplace -->
        <test-method status="PASS" signature="testStringToColumnsFormatterWithNullColumns()" name="testStringToColumnsFormatterWithNullColumns" duration-ms="80" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringToColumnsFormatterWithNullColumns -->
        <test-method status="PASS" signature="testStringToColumnsFormatterWithEmptyValues()" name="testStringToColumnsFormatterWithEmptyValues" duration-ms="50" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringToColumnsFormatterWithEmptyValues -->
        <test-method status="PASS" signature="testStringToColumnsFormatterWithNulls()" name="testStringToColumnsFormatterWithNulls" duration-ms="48" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringToColumnsFormatterWithNulls -->
        <test-method status="PASS" signature="testStringToColumnsFormatterWithBigStrings()" name="testStringToColumnsFormatterWithBigStrings" duration-ms="125" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringToColumnsFormatterWithBigStrings -->
        <test-method status="PASS" signature="testStringToColumnsFormatterWithInvalidColumnWidth()" name="testStringToColumnsFormatterWithInvalidColumnWidth" duration-ms="7" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringToColumnsFormatterWithInvalidColumnWidth -->
      </class> <!-- com.cucumber.utils.engineering.utils.StringFormatTest -->
      <class name="com.cucumber.utils.engineering.utils.XmlUtilsTest">
        <test-method status="PASS" signature="testXmlsAreValid()" name="testXmlsAreValid" duration-ms="8" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testXmlsAreValid -->
        <test-method status="PASS" signature="testXmlIsNotValid()" name="testXmlIsNotValid" duration-ms="12" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testXmlIsNotValid -->
        <test-method status="PASS" signature="testXmlSpecialRegexChars_fromXmlWithNone() throws java.io.IOException,org.xml.sax.SAXException,javax.xml.parsers.ParserConfigurationException" name="testXmlSpecialRegexChars_fromXmlWithNone" duration-ms="14" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testXmlSpecialRegexChars_fromXmlWithNone -->
        <test-method status="PASS" signature="testXmlSpecialRegexChars() throws java.io.IOException,org.xml.sax.SAXException,javax.xml.parsers.ParserConfigurationException" name="testXmlSpecialRegexChars" duration-ms="24" started-at="2020-07-30T20:14:05 UTC" finished-at="2020-07-30T20:14:05 UTC">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testXmlSpecialRegexChars -->
      </class> <!-- com.cucumber.utils.engineering.utils.XmlUtilsTest -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
