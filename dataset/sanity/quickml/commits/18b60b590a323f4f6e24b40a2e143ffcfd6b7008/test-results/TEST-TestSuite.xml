<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" name="TestSuite" time="141.297" tests="106" errors="0" skipped="6" failures="0">
  <properties>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="sun.boot.library.path" value="/usr/local/openjdk-8/jre/lib/amd64"/>
    <property name="java.vm.version" value="25.262-b10"/>
    <property name="animal.sniffer.skip" value="true"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="maven.multiModuleProjectDirectory" value="/tmp/tmp6xfrnaau/quickml"/>
    <property name="maven.javadoc.skip" value="true"/>
    <property name="java.vendor.url" value="http://java.oracle.com/"/>
    <property name="path.separator" value=":"/>
    <property name="guice.disable.misplaced.annotation.check" value="true"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="file.encoding.pkg" value="sun.io"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.os.patch.level" value="unknown"/>
    <property name="source.skip" value="true"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="user.dir" value="/tmp/tmp6xfrnaau/quickml"/>
    <property name="java.runtime.version" value="1.8.0_262-b10"/>
    <property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
    <property name="java.endorsed.dirs" value="/usr/local/openjdk-8/jre/lib/endorsed"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="os.name" value="Linux"/>
    <property name="classworlds.conf" value="/usr/share/maven/bin/m2.conf"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib"/>
    <property name="license.skip" value="true"/>
    <property name="maven.conf" value="/usr/share/maven/conf"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.class.version" value="52.0"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="maven.test.failure.ignore" value="true"/>
    <property name="os.version" value="4.15.0-109-generic"/>
    <property name="library.jansi.path" value="/usr/share/maven/lib/jansi-native"/>
    <property name="user.home" value="/home/jdbl"/>
    <property name="user.timezone" value="Etc/UTC"/>
    <property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
    <property name="java.specification.version" value="1.8"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="user.name" value="jdbl"/>
    <property name="java.class.path" value="/usr/share/maven/boot/plexus-classworlds-2.6.0.jar"/>
    <property name="java.vm.specification.version" value="1.8"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.home" value="/usr/local/openjdk-8/jre"/>
    <property name="sun.java.command" value="org.codehaus.plexus.classworlds.launcher.Launcher test -e --fail-never -ntp -Dmaven.test.failure.ignore=true -B -Dmaven.javadoc.skip=true -Drat.skip=true -Danimal.sniffer.skip=true -Dmaven.javadoc.skip=true -Dlicense.skip=true -Dsource.skip=true"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="user.language" value="en"/>
    <property name="awt.toolkit" value="sun.awt.X11.XToolkit"/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.version" value="1.8.0_262"/>
    <property name="java.ext.dirs" value="/usr/local/openjdk-8/jre/lib/ext:/usr/java/packages/lib/ext"/>
    <property name="securerandom.source" value="file:/dev/./urandom"/>
    <property name="sun.boot.class.path" value="/usr/local/openjdk-8/jre/lib/resources.jar:/usr/local/openjdk-8/jre/lib/rt.jar:/usr/local/openjdk-8/jre/lib/sunrsasign.jar:/usr/local/openjdk-8/jre/lib/jsse.jar:/usr/local/openjdk-8/jre/lib/jce.jar:/usr/local/openjdk-8/jre/lib/charsets.jar:/usr/local/openjdk-8/jre/lib/jfr.jar:/usr/local/openjdk-8/jre/classes"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="rat.skip" value="true"/>
    <property name="maven.home" value="/usr/share/maven"/>
    <property name="file.separator" value="/"/>
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="sun.cpu.isalist" value=""/>
  </properties>
  <testcase name="simpleTest" classname="quickml.supervised.downsampling.DownsamplingPredictiveModelTest" time="0.399"/>
  <testcase name="testAdd" classname="quickml.supervised.tree.decisionTree.OldClassificationCounterTest" time="0.017"/>
  <testcase name="testMerge" classname="quickml.supervised.tree.decisionTree.OldClassificationCounterTest" time="0.001"/>
  <testcase name="testSubtract" classname="quickml.supervised.tree.decisionTree.OldClassificationCounterTest" time="0"/>
  <testcase name="simpleAdTest" classname="quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilderTest" time="8.979"/>
  <testcase name="testError3ClassificationsInDataSet" classname="quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilderTest" time="0"/>
  <testcase name="testGetEntryWithLowestValue" classname="quickml.MapUtilsTest" time="0"/>
  <testcase name="simpleTest" classname="quickml.supervised.featureEngineering.ProbabilityInjectingEnricherTest" time="0"/>
  <testcase name="simpleTest" classname="quickml.supervised.featureEngineering.AttributeCombiningEnricherTest" time="0.002"/>
  <testcase name="simpleTest" classname="quickml.collections.ValueSummingMapTest" time="0"/>
  <testcase name="simpleTest" classname="quickml.supervised.featureEngineering.FeatureEngineeringClassifierBuilderTest" time="0.017"/>
  <testcase name="testCreateAttributesEnricher" classname="quickml.supervised.featureEngineering.ProbabilityEnrichStrategyTest" time="0.002"/>
  <testcase name="ridgePMOTest on ridgePMOTest(quickml.supervised.regressionModel.RidgeRegressionBuilderTest)" classname="quickml.supervised.regressionModel.RidgeRegressionBuilderTest" time="0.004"/>
  <testcase name="ridgeRegressionBuilderTest on ridgeRegressionBuilderTest(quickml.supervised.regressionModel.RidgeRegressionBuilderTest)" classname="quickml.supervised.regressionModel.RidgeRegressionBuilderTest" time="0.086"/>
  <testcase name="simpleRidgeRegressionBuilderTest on simpleRidgeRegressionBuilderTest(quickml.supervised.regressionModel.RidgeRegressionBuilderTest)" classname="quickml.supervised.regressionModel.RidgeRegressionBuilderTest" time="0.098"/>
  <testcase name="getAdvertisingInstancesTest on getAdvertisingInstancesTest(quickml.InstanceLoaderTest)" classname="quickml.InstanceLoaderTest" time="5.332"/>
  <testcase name="testLossFunctionsWithTwoOrMoreAreValid on testLossFunctionsWithTwoOrMoreAreValid(quickml.supervised.crossValidation.attributeImportance.LossFunctionTrackerTest)" classname="quickml.supervised.crossValidation.attributeImportance.LossFunctionTrackerTest" time="0"/>
  <testcase name="testLossFunctionsWithAtLeastOneFunctionAreValid on testLossFunctionsWithAtLeastOneFunctionAreValid(quickml.supervised.crossValidation.attributeImportance.LossFunctionTrackerTest)" classname="quickml.supervised.crossValidation.attributeImportance.LossFunctionTrackerTest" time="0"/>
  <testcase name="testEmptyListIsInvalid on testEmptyListIsInvalid(quickml.supervised.crossValidation.attributeImportance.LossFunctionTrackerTest)" classname="quickml.supervised.crossValidation.attributeImportance.LossFunctionTrackerTest" time="0"/>
  <testcase name="testgetMaximalAttributes on testgetMaximalAttributes(quickml.supervised.crossValidation.attributeImportance.AttributeLossSummaryTest)" classname="quickml.supervised.crossValidation.attributeImportance.AttributeLossSummaryTest" time="0"/>
  <testcase name="testGetOptimalAttributesReturnsTrackerWithLowestLoss on testGetOptimalAttributesReturnsTrackerWithLowestLoss(quickml.supervised.crossValidation.attributeImportance.AttributeLossSummaryTest)" classname="quickml.supervised.crossValidation.attributeImportance.AttributeLossSummaryTest" time="0"/>
  <testcase name="testGetAUCPoint on testGetAUCPoint(quickml.supervised.crossValidation.lossfunctions.WeightedAUCCrossValLossFunctionTest)" classname="quickml.supervised.crossValidation.lossfunctions.WeightedAUCCrossValLossFunctionTest" time="0.001"/>
  <testcase name="testOnlySupportBinaryClassifications on testOnlySupportBinaryClassifications(quickml.supervised.crossValidation.lossfunctions.WeightedAUCCrossValLossFunctionTest)" classname="quickml.supervised.crossValidation.lossfunctions.WeightedAUCCrossValLossFunctionTest" time="0.001"/>
  <testcase name="testGetTotalLoss on testGetTotalLoss(quickml.supervised.crossValidation.lossfunctions.WeightedAUCCrossValLossFunctionTest)" classname="quickml.supervised.crossValidation.lossfunctions.WeightedAUCCrossValLossFunctionTest" time="0.001"/>
  <testcase name="testSortDataByProbability on testSortDataByProbability(quickml.supervised.crossValidation.lossfunctions.WeightedAUCCrossValLossFunctionTest)" classname="quickml.supervised.crossValidation.lossfunctions.WeightedAUCCrossValLossFunctionTest" time="0"/>
  <testcase name="testAUCWhenAlwaysPredict0 on testAUCWhenAlwaysPredict0(quickml.supervised.crossValidation.lossfunctions.WeightedAUCCrossValLossFunctionTest)" classname="quickml.supervised.crossValidation.lossfunctions.WeightedAUCCrossValLossFunctionTest" time="0.008"/>
  <testcase name="setTrueAndFalseTrainingSetsTestForCatBranch on setTrueAndFalseTrainingSetsTestForCatBranch(quickml.supervised.UtilsTest)" classname="quickml.supervised.UtilsTest" time="0.002"/>
  <testcase name="setTrueAndFalseTrainingSetsTestForNumBranch on setTrueAndFalseTrainingSetsTestForNumBranch(quickml.supervised.UtilsTest)" classname="quickml.supervised.UtilsTest" time="0.001"/>
  <testcase name="setTrueFalseOnespotInstances on setTrueFalseOnespotInstances(quickml.supervised.UtilsTest)" classname="quickml.supervised.UtilsTest" time="4.843"/>
  <testcase name="testName on testName(quickml.supervised.crossValidation.lossfunctions.LossFunctionsTest)" classname="quickml.supervised.crossValidation.lossfunctions.LossFunctionsTest" time="0.001"/>
  <testcase name="findBestCategoricalSplit on findBestCategoricalSplit(quickml.supervised.tree.branchFinders.SplittingUtilsTest)" classname="quickml.supervised.tree.branchFinders.SplittingUtilsTest" time="0.003"/>
  <testcase name="testMinSplitFractionEffect on testMinSplitFractionEffect(quickml.supervised.tree.branchFinders.SplittingUtilsTest)" classname="quickml.supervised.tree.branchFinders.SplittingUtilsTest" time="0"/>
  <testcase name="findBestNumericSplit on findBestNumericSplit(quickml.supervised.tree.branchFinders.SplittingUtilsTest)" classname="quickml.supervised.tree.branchFinders.SplittingUtilsTest" time="0"/>
  <testcase name="simpleTest on simpleTest(quickml.supervised.tree.scorers.PenalizedMSEScorerTest)" classname="quickml.supervised.tree.scorers.PenalizedMSEScorerTest" time="0.001"/>
  <testcase name="testCycleThrough5Of10Folds on testCycleThrough5Of10Folds(quickml.supervised.crossValidation.data.FoldedDataTest)" classname="quickml.supervised.crossValidation.data.FoldedDataTest" time="0.003"/>
  <testcase name="testFoldsUsedIs0 on testFoldsUsedIs0(quickml.supervised.crossValidation.data.FoldedDataTest)" classname="quickml.supervised.crossValidation.data.FoldedDataTest" time="0"/>
  <testcase name="testNumFoldsIsZero on testNumFoldsIsZero(quickml.supervised.crossValidation.data.FoldedDataTest)" classname="quickml.supervised.crossValidation.data.FoldedDataTest" time="0"/>
  <testcase name="testFoldsUsedMustBeLessThanFolds on testFoldsUsedMustBeLessThanFolds(quickml.supervised.crossValidation.data.FoldedDataTest)" classname="quickml.supervised.crossValidation.data.FoldedDataTest" time="0"/>
  <testcase name="testNoEmptySet on testNoEmptySet(quickml.supervised.crossValidation.data.FoldedDataTest)" classname="quickml.supervised.crossValidation.data.FoldedDataTest" time="0"/>
  <testcase name="advertisingDataTest on advertisingDataTest(quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilderTest)" classname="quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilderTest" time="0">
    <skipped/>
  </testcase>
  <testcase name="testOptimizer on testOptimizer(quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizerIntegrationTest)" classname="quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizerIntegrationTest" time="4.741"/>
  <testcase name="testMoboInstances on testMoboInstances(quickml.BenchmarkTest)" classname="quickml.BenchmarkTest" time="12.402"/>
  <testcase name="performanceTest on performanceTest(quickml.BenchmarkTest)" classname="quickml.BenchmarkTest" time="2.224"/>
  <testcase name="testDiaInstances on testDiaInstances(quickml.BenchmarkTest)" classname="quickml.BenchmarkTest" time="0.383"/>
  <testcase name="testStoresCountsCorrectly on testStoresCountsCorrectly(quickml.supervised.inspection.NumericDistributionSamplerTest)" classname="quickml.supervised.inspection.NumericDistributionSamplerTest" time="0.071"/>
  <testcase name="samplesDistCorrectly on samplesDistCorrectly(quickml.supervised.inspection.NumericDistributionSamplerTest)" classname="quickml.supervised.inspection.NumericDistributionSamplerTest" time="0.022"/>
  <testcase name="diffClassificationTest on diffClassificationTest(quickml.supervised.tree.scorers.PenalizedInformationGainScorerTest)" classname="quickml.supervised.tree.scorers.PenalizedInformationGainScorerTest" time="0"/>
  <testcase name="sameClassificationTest on sameClassificationTest(quickml.supervised.tree.scorers.PenalizedInformationGainScorerTest)" classname="quickml.supervised.tree.scorers.PenalizedInformationGainScorerTest" time="0"/>
  <testcase name="binCatReducerGetAttributeStatsTest on binCatReducerGetAttributeStatsTest(quickml.supervised.tree.decisionTree.reducers.BinaryCatOldBranchReducerTest)" classname="quickml.supervised.tree.decisionTree.reducers.BinaryCatOldBranchReducerTest" time="0"/>
  <testcase name="testPopulateNameToIndexMap on testPopulateNameToIndexMap(quickml.supervised.classifier.logRegression.InstanceTransformerUtilsTest)" classname="quickml.supervised.classifier.logRegression.InstanceTransformerUtilsTest" time="0"/>
  <testcase name="testGetAttributeProductCounts on testGetAttributeProductCounts(quickml.supervised.classifier.logRegression.InstanceTransformerUtilsTest)" classname="quickml.supervised.classifier.logRegression.InstanceTransformerUtilsTest" time="0">
    <skipped/>
  </testcase>
  <testcase name="testGetAttributeProductCounts1 on testGetAttributeProductCounts1(quickml.supervised.classifier.logRegression.InstanceTransformerUtilsTest)" classname="quickml.supervised.classifier.logRegression.InstanceTransformerUtilsTest" time="0"/>
  <testcase name="testGetNumericClassLabels on testGetNumericClassLabels(quickml.supervised.classifier.logRegression.InstanceTransformerUtilsTest)" classname="quickml.supervised.classifier.logRegression.InstanceTransformerUtilsTest" time="0"/>
  <testcase name="allValuesSameTest on allValuesSameTest(quickml.supervised.tree.decisionTree.reducers.DTNumOldBranchReducerTest)" classname="quickml.supervised.tree.decisionTree.reducers.DTNumOldBranchReducerTest" time="0"/>
  <testcase name="fillReservoirSampler on fillReservoirSampler(quickml.supervised.tree.decisionTree.reducers.DTNumOldBranchReducerTest)" classname="quickml.supervised.tree.decisionTree.reducers.DTNumOldBranchReducerTest" time="0.004"/>
  <testcase name="getDeterministicSplitTest2 on getDeterministicSplitTest2(quickml.supervised.tree.decisionTree.reducers.DTNumOldBranchReducerTest)" classname="quickml.supervised.tree.decisionTree.reducers.DTNumOldBranchReducerTest" time="0"/>
  <testcase name="getAttributeStatsOptionalTest on getAttributeStatsOptionalTest(quickml.supervised.tree.decisionTree.reducers.DTNumOldBranchReducerTest)" classname="quickml.supervised.tree.decisionTree.reducers.DTNumOldBranchReducerTest" time="0"/>
  <testcase name="getDeterministicSplitTest on getDeterministicSplitTest(quickml.supervised.tree.decisionTree.reducers.DTNumOldBranchReducerTest)" classname="quickml.supervised.tree.decisionTree.reducers.DTNumOldBranchReducerTest" time="0"/>
  <testcase name="getBinDividerPointsTest on getBinDividerPointsTest(quickml.supervised.tree.decisionTree.reducers.DTNumOldBranchReducerTest)" classname="quickml.supervised.tree.decisionTree.reducers.DTNumOldBranchReducerTest" time="0"/>
  <testcase name="testFindSimpleBestConfig on testFindSimpleBestConfig(quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizerTest)" classname="quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizerTest" time="0.123"/>
  <testcase name="testTotalLossNoData on testTotalLossNoData(quickml.supervised.crossValidation.PredictionMapResultsTest)" classname="quickml.supervised.crossValidation.PredictionMapResultsTest" time="0"/>
  <testcase name="createCalibrationSetTestWeighted on createCalibrationSetTestWeighted(quickml.supervised.regressionModel.PoolAdjacentViolatorsModelTest)" classname="quickml.supervised.regressionModel.PoolAdjacentViolatorsModelTest" time="0.005"/>
  <testcase name="createCalibrationSetTestUnweighted on createCalibrationSetTestUnweighted(quickml.supervised.regressionModel.PoolAdjacentViolatorsModelTest)" classname="quickml.supervised.regressionModel.PoolAdjacentViolatorsModelTest" time="0"/>
  <testcase name="testDcg on testDcg(quickml.supervised.crossValidation.lossfunctions.rankingLossFunctions.NDCGTest)" classname="quickml.supervised.crossValidation.lossfunctions.rankingLossFunctions.NDCGTest" time="0.002"/>
  <testcase name="testIdcg on testIdcg(quickml.supervised.crossValidation.lossfunctions.rankingLossFunctions.NDCGTest)" classname="quickml.supervised.crossValidation.lossfunctions.rankingLossFunctions.NDCGTest" time="0.001"/>
  <testcase name="testOutOfTimeData on testOutOfTimeData(quickml.supervised.crossValidation.data.OutOfTimeDataTest)" classname="quickml.supervised.crossValidation.data.OutOfTimeDataTest" time="0.006"/>
  <testcase name="testValidateIfThereIsABreakInTheDataWeMoveOnToTheNextPeriod on testValidateIfThereIsABreakInTheDataWeMoveOnToTheNextPeriod(quickml.supervised.crossValidation.data.OutOfTimeDataTest)" classname="quickml.supervised.crossValidation.data.OutOfTimeDataTest" time="0.022"/>
  <testcase name="calcMeanAndMedianDepth on calcMeanAndMedianDepth(quickml.supervised.tree.nodes.OldLeafDepthStatsTest)" classname="quickml.supervised.tree.nodes.OldLeafDepthStatsTest" time="0">
    <skipped/>
  </testcase>
  <testcase name="simpleTest on simpleTest(quickml.supervised.downsampling.DownsamplingClassifierBuilderTest)" classname="quickml.supervised.downsampling.DownsamplingClassifierBuilderTest" time="0.046"/>
  <testcase name="simpleBmiTest on simpleBmiTest(quickml.supervised.downsampling.DownsamplingClassifierBuilderTest)" classname="quickml.supervised.downsampling.DownsamplingClassifierBuilderTest" time="0.104"/>
  <testcase name="testWeContinueIfWeHaventGoneOverTheTolerance on testWeContinueIfWeHaventGoneOverTheTolerance(quickml.supervised.predictiveModelOptimizer.fieldValueRecommenders.MonotonicConvergenceRecommenderTest)" classname="quickml.supervised.predictiveModelOptimizer.fieldValueRecommenders.MonotonicConvergenceRecommenderTest" time="0.001"/>
  <testcase name="testWeStopIfThresholdIsNotReached on testWeStopIfThresholdIsNotReached(quickml.supervised.predictiveModelOptimizer.fieldValueRecommenders.MonotonicConvergenceRecommenderTest)" classname="quickml.supervised.predictiveModelOptimizer.fieldValueRecommenders.MonotonicConvergenceRecommenderTest" time="0"/>
  <testcase name="testStoresCountsCorrectly on testStoresCountsCorrectly(quickml.supervised.inspection.CategoricalDistributionSamplerTest)" classname="quickml.supervised.inspection.CategoricalDistributionSamplerTest" time="0.002"/>
  <testcase name="updatesCorrectly on updatesCorrectly(quickml.supervised.inspection.CategoricalDistributionSamplerTest)" classname="quickml.supervised.inspection.CategoricalDistributionSamplerTest" time="0.002"/>
  <testcase name="samplesDistCorrectly on samplesDistCorrectly(quickml.supervised.inspection.CategoricalDistributionSamplerTest)" classname="quickml.supervised.inspection.CategoricalDistributionSamplerTest" time="0.018"/>
  <testcase name="testCrossValidation on testCrossValidation(quickml.supervised.crossValidation.SimpleCrossValidatorIntegrationTest)" classname="quickml.supervised.crossValidation.SimpleCrossValidatorIntegrationTest" time="5.114"/>
  <testcase name="testDiabetesInstances on testDiabetesInstances(quickml.supervised.classifier.logRegression.RidgeRegressionBuilderTest)" classname="quickml.supervised.classifier.logRegression.RidgeRegressionBuilderTest" time="55.437"/>
  <testcase name="optimizerTest on optimizerTest(quickml.supervised.classifier.logRegression.RidgeRegressionBuilderTest)" classname="quickml.supervised.classifier.logRegression.RidgeRegressionBuilderTest" time="0">
    <skipped/>
  </testcase>
  <testcase name="testAdInstances on testAdInstances(quickml.supervised.classifier.logRegression.RidgeRegressionBuilderTest)" classname="quickml.supervised.classifier.logRegression.RidgeRegressionBuilderTest" time="0">
    <skipped/>
  </testcase>
  <testcase name="addNonNumerericProductAttributesTest on addNonNumerericProductAttributesTest(quickml.supervised.dataProcessing.instanceTranformer.CommonCoocurrenceProductFeatureAppenderTest)" classname="quickml.supervised.dataProcessing.instanceTranformer.CommonCoocurrenceProductFeatureAppenderTest" time="0"/>
  <testcase name="addNumericOnlyProductAttributesTest on addNumericOnlyProductAttributesTest(quickml.supervised.dataProcessing.instanceTranformer.CommonCoocurrenceProductFeatureAppenderTest)" classname="quickml.supervised.dataProcessing.instanceTranformer.CommonCoocurrenceProductFeatureAppenderTest" time="0"/>
  <testcase name="addAllProductAttributesTest on addAllProductAttributesTest(quickml.supervised.dataProcessing.instanceTranformer.CommonCoocurrenceProductFeatureAppenderTest)" classname="quickml.supervised.dataProcessing.instanceTranformer.CommonCoocurrenceProductFeatureAppenderTest" time="0.001"/>
  <testcase name="testApplyMaxGradientNorm on testApplyMaxGradientNorm(quickml.supervised.classifier.logRegression.SparseSGDTest)" classname="quickml.supervised.classifier.logRegression.SparseSGDTest" time="0"/>
  <testcase name="testReductionToTheGradient on testReductionToTheGradient(quickml.supervised.classifier.logRegression.SparseSGDTest)" classname="quickml.supervised.classifier.logRegression.SparseSGDTest" time="0"/>
  <testcase name="testSparseGetWorkerContributionToTheGradient on testSparseGetWorkerContributionToTheGradient(quickml.supervised.classifier.logRegression.SparseSGDTest)" classname="quickml.supervised.classifier.logRegression.SparseSGDTest" time="0.067"/>
  <testcase name="testGetCurrentMiniBatchSize on testGetCurrentMiniBatchSize(quickml.supervised.classifier.logRegression.SparseSGDTest)" classname="quickml.supervised.classifier.logRegression.SparseSGDTest" time="0"/>
  <testcase name="testIsConverged on testIsConverged(quickml.supervised.classifier.logRegression.SparseSGDTest)" classname="quickml.supervised.classifier.logRegression.SparseSGDTest" time="0"/>
  <testcase name="testSparseReductionToTheGradient on testSparseReductionToTheGradient(quickml.supervised.classifier.logRegression.SparseSGDTest)" classname="quickml.supervised.classifier.logRegression.SparseSGDTest" time="0.008"/>
  <testcase name="testGetThreadStartIndices on testGetThreadStartIndices(quickml.supervised.classifier.logRegression.SparseSGDTest)" classname="quickml.supervised.classifier.logRegression.SparseSGDTest" time="0"/>
  <testcase name="testGetWorkerContributionToTheGradient on testGetWorkerContributionToTheGradient(quickml.supervised.classifier.logRegression.SparseSGDTest)" classname="quickml.supervised.classifier.logRegression.SparseSGDTest" time="0"/>
  <testcase name="testGetWorkerContributionToTheGradient2 on testGetWorkerContributionToTheGradient2(quickml.supervised.classifier.logRegression.SparseSGDTest)" classname="quickml.supervised.classifier.logRegression.SparseSGDTest" time="0"/>
  <testcase name="testMinimizeVarWithRidge on testMinimizeVarWithRidge(quickml.supervised.classifier.logRegression.SparseSGDTest)" classname="quickml.supervised.classifier.logRegression.SparseSGDTest" time="0.583"/>
  <testcase name="testGetGradient on testGetGradient(quickml.supervised.classifier.logRegression.SparseSGDTest)" classname="quickml.supervised.classifier.logRegression.SparseSGDTest" time="0"/>
  <testcase name="testSparseGetWorkerContributionToTheGradient2 on testSparseGetWorkerContributionToTheGradient2(quickml.supervised.classifier.logRegression.SparseSGDTest)" classname="quickml.supervised.classifier.logRegression.SparseSGDTest" time="0"/>
  <testcase name="testMinimizeNoRegularization on testMinimizeNoRegularization(quickml.supervised.classifier.logRegression.SparseSGDTest)" classname="quickml.supervised.classifier.logRegression.SparseSGDTest" time="0.642"/>
  <testcase name="testGetTotalLoss on testGetTotalLoss(quickml.supervised.crossValidation.lossfunctions.ClassifierMSELossFunctionTest)" classname="quickml.supervised.crossValidation.lossfunctions.ClassifierMSELossFunctionTest" time="0.001"/>
  <testcase name="getAttributeStatsTest on getAttributeStatsTest(quickml.supervised.tree.decisionTree.reducers.DTCatOldBranchReducerTest)" classname="quickml.supervised.tree.decisionTree.reducers.DTCatOldBranchReducerTest" time="0.001"/>
  <testcase name="timeTest on timeTest(quickml.supervised.OldTreeBuildTimeTest)" classname="quickml.supervised.OldTreeBuildTimeTest" time="0">
    <skipped/>
  </testcase>
  <testcase name="mockTreeTest on mockTreeTest(quickml.supervised.tree.decisionTree.DecisionOldOldTreeBuilderTest)" classname="quickml.supervised.tree.decisionTree.DecisionOldOldTreeBuilderTest" time="10.194"/>
  <testcase name="singleTreeTest on singleTreeTest(quickml.supervised.tree.decisionTree.DecisionOldOldTreeBuilderTest)" classname="quickml.supervised.tree.decisionTree.DecisionOldOldTreeBuilderTest" time="9.326"/>
  <testcase name="randomForestTest on randomForestTest(quickml.supervised.tree.decisionTree.DecisionOldOldTreeBuilderTest)" classname="quickml.supervised.tree.decisionTree.DecisionOldOldTreeBuilderTest" time="8.774"/>
  <testcase name="testAttributeImportanceFinder on testAttributeImportanceFinder(quickml.supervised.crossValidation.attributeImportance.AttributeImportanceFinderIntegrationTest)" classname="quickml.supervised.crossValidation.attributeImportance.AttributeImportanceFinderIntegrationTest" time="9.62"/>
  <testcase name="transformAllTest on transformAllTest(quickml.supervised.dataProcessing.instanceTranformer.OneHotEncoderTest)" classname="quickml.supervised.dataProcessing.instanceTranformer.OneHotEncoderTest" time="0"/>
  <testcase name="diffClassificationTest on diffClassificationTest(quickml.supervised.tree.scorers.GiniImpurityScorerTest)" classname="quickml.supervised.tree.scorers.GiniImpurityScorerTest" time="0"/>
  <testcase name="sameClassificationTest on sameClassificationTest(quickml.supervised.tree.scorers.GiniImpurityScorerTest)" classname="quickml.supervised.tree.scorers.GiniImpurityScorerTest" time="0"/>
  <testcase name="parentClassificationSameAsIdenticalChildTest on parentClassificationSameAsIdenticalChildTest(quickml.supervised.tree.scorers.GiniImpurityScorerTest)" classname="quickml.supervised.tree.scorers.GiniImpurityScorerTest" time="0"/>
</testsuite>