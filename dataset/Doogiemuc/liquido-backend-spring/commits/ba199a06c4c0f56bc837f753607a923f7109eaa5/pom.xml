<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.doogie.liquido</groupId>
	<artifactId>liquido-backend-spring</artifactId>
	<version>2.2.2</version>
	<packaging>jar</packaging>

	<name>liquido-backend-spring</name>
	<description>RESTfull backend for my Liquid Democracy web app "Liquido"</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.4.RELEASE</version>
		<!-- relativePath />   lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<spring-boot.version>2.1.0.RELEASE</spring-boot.version>
		<jjwt.version>0.9.1</jjwt.version>

		<!-- Prefix for docker image in docker repository. ArtifactId will be appended to this. -->
		<docker.image.prefix>org.doogie</docker.image.prefix>

		<!-- command line arguments that maven surefire will pass to TESTs
		<argLine>-D=loadSampleDB=true</argLine -->

		<!-- The main class to start by executing "java -jar"
		<start-class>org.doogie.liquido.LiquidoBackendSpringApplication</start-class>
		-->
	</properties>

	<scm>
		<connection>scm:git:https://github.com/Doogiemuc/liquido-backend-spring.git</connection>
		<developerConnection>scm:git:https://github.com/Doogiemuc/liquido-backend-spring.git</developerConnection>
		<url>https://github.com/Doogiemuc/liquido-backend-spring/</url>
		<tag>HEAD</tag>
  	</scm>

	<dependencies>
    	<!-- Spring Web MVC -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<version>${spring-boot.version}</version>
		</dependency>

		<!-- Spring data JPA: Java Persistence API with hibernate -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
			<version>${spring-boot.version}</version>
		</dependency>

		<!-- Spring Data REST: expose repositories as REST endpoint -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-rest</artifactId>
			<version>${spring-boot.version}</version>
		</dependency>

		<!-- (de)serialize LocalDate into ISO datetime format https://stackoverflow.com/questions/30871255/spring-boot-localdate-field-serialization-and-deserialization -->
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-jsr310</artifactId>
		</dependency>

		<!-- Jackson (de)serialization support for new JDK8 data types, e.g. Optional https://mvnrepository.com/artifact/com.fasterxml.jackson.datatype/jackson-datatype-jdk8 -->
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-jdk8</artifactId>
			<version>2.9.8</version>
		</dependency>

		<!-- Spring Security -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
			<version>${spring-boot.version}</version>
		</dependency>

		<!-- Database connector for MySQL-->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.postgresql/postgresql
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>42.2.9</version>
		</dependency -->

		<!--Jwt-->
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt</artifactId>
			<version>${jjwt.version}</version>
		</dependency>

		<!-- Json Web Tokens (JWT)
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-jwt</artifactId>
			<version>1.0.9.RELEASE</version>
		</dependency>
		-->


		<!-- Spring Developer Tools https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html  provide /h2-console for H2 DB  -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- H2 Database that is automatically embedded in memory when the server starts. -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
		</dependency>

		<!-- Spring boot starter Quartz - task scheduler -->
		<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-quartz</artifactId>
				<version>2.0.6.RELEASE</version>
		</dependency>

		<!-- Springfox Swagger2 - for autogenerated API documentation https://mvnrepository.com/artifact/io.springfox/springfox-swagger2
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.9.2</version>
		</dependency>

		 Springfox support for autogenerating /v2/api-docs from spring-data-rest java sources (still in incubation
		<dependency>
		  <groupId>io.springfox</groupId>
		  <artifactId>springfox-data-rest</artifactId>
		  <version>2.9.2</version>
		</dependency>

		 Springfox Swagger UI - See http://www.baeldung.com/swagger-2-documentation-for-spring-rest-api
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.9.2</version>
		</dependency>

		-->

		<!-- AWS SDK, currently used for sending SMS via AWS SNS.  https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk -->
		<dependency>
			<groupId>com.amazonaws</groupId>
			<artifactId>aws-java-sdk</artifactId>
			<version>1.11.670</version>
		</dependency>


		<!-- Apache Http Client for PATCH requests  https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient -->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5.2</version>
		</dependency>


		<!-- Project Lombok - https://projectlombok.org/ If you used it once you will never want to work without it. -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.12</version>
			<scope>provided</scope>
		</dependency>

		<!-- For sending mails via SMTP -->
		<dependency>
			<groupId>com.sun.mail</groupId>
			<artifactId>jakarta.mail</artifactId>
			<version>1.6.4</version>
		</dependency>

		<!-- =================== TEST ==================== -->

        <!-- spring-boot-starter-test: JUnit test case support -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- spring-security-test for testing with logged in users -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- JUnit4.12 for testing -->
	    <dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
      		<scope>test</scope>
    	</dependency>
		<dependency>
			<groupId>com.jayway.jsonpath</groupId>
			<artifactId>json-path</artifactId>
		</dependency>

	</dependencies>

	<build>
		<!--finalName>${project.artifactId}-${project.version}-build${buildNumber}</finalName -->
        <finalName>${project.artifactId}-${project.version}</finalName>
		<plugins>

			<!-- maven-surefire-plugin for running JUnit tests -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<systemPropertyVariables>
						<loadSampleDB>true</loadSampleDB>
					</systemPropertyVariables>
				</configuration>
			</plugin>

			<!-- Sets the main class and creates an runnable fast JAR -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<!-- Auto increment a numerical build number. Stored in buildNumber.properties file.
			     mvn buildnumber:create
			-->
			<!-- plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>buildnumber-maven-plugin</artifactId>
				<version>1.4</version>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>create</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<!- See https://stackoverflow.com/questions/8988405/automatically-incrementing-a-build-number-in-a-java-project ->
					<format>{0,number}</format>
					<items>
					  <item>buildNumber</item>
					</items>
					<buildNumberPropertiesFileLocation>${basedir}/build/buildNumber.properties</buildNumberPropertiesFileLocation>
					<!- buildnumber-maven-plugin by default checks for local changes, ie. not yet commited files ->
					<doCheck>false</doCheck>
					<doUpdate>false</doUpdate>
				</configuration>
			</plugin -->

			<!-- Create docker container
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>dockerfile-maven-plugin</artifactId>
				<version>1.3.7</version>
				<configuration>
					<repository>${docker.image.prefix}/${project.artifactId}</repository>
					<tag>${project.version}</tag>   will default to "latest"
					<buildArgs>
						<JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
					</buildArgs>
				</configuration>
			</plugin>
			-->


		</plugins>
	</build>

</project>
