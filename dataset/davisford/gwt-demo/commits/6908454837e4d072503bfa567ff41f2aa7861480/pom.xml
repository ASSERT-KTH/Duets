<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.example</groupId>
	<artifactId>gwt-demo</artifactId>
	<packaging>war</packaging>
	<version>1.0-SNAPSHOT</version>
	<name>Google Web Toolkit Demo</name>
	<properties>
		<!-- versions of frameworks we depend on -->
		<gwt.version>2.0.0</gwt.version>
		<gin.version>1.0-SNAPSHOT</gin.version>
		<guice.version>2.0</guice.version>
		<spring.version>2.5.6</spring.version>

		<!--  java version we use -->
		<maven.compiler.source>1.6</maven.compiler.source>
		<maven.compiler.target>1.6</maven.compiler.target>

		<!-- define a transient output directory for gwt -->
		<gwt.output.directory>${basedir}/war</gwt.output.directory>

		<!-- this will end up being the war name -->
		<final.build.name>gwt-demo</final.build.name>
	</properties>
	<repositories>
		<repository>
			<id>jboss.org</id>
			<name>JBoss.org maven2 repo</name>
			<url>http://repository.jboss.org/maven2</url>
		</repository>
		<repository>
			<id>cobogw</id>
			<name>Cobogw repository at googlecode</name>
			<url>http://cobogw.googlecode.com/svn/maven2</url>
		</repository>
		<repository>
			<!-- this is a total hack to get around some jars that aren't in public mvn repos; you should deploy to local repo manager instead -->
			<id>local</id>
			<url>file:///${basedir}/lib</url>
			<layout>legacy</layout>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>codehaus</id>
			<name>Codehaus Release Repo</name>
			<url>http://repository.codehaus.org</url>
		</pluginRepository>
		<pluginRepository>
			<id>codehaus-snapshot</id>
			<name>Codehaus Snapshot Repo</name>
			<url>http://snapshots.repository.codehaus.org</url>
		</pluginRepository>
	</pluginRepositories>
	<dependencies>
		<dependency>
			<!-- GWT servlet -->
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-servlet</artifactId>
			<version>${gwt.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<!-- main GWT classes -->
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-user</artifactId>
			<version>${gwt.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<!-- spring web MVC -->
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<!-- for logging -->
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.13</version>
		</dependency>

		<!-- TEST SCOPE DEPENDENCIES -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.4</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- mock framework -->
			<groupId>org.easymock</groupId>
			<artifactId>easymock</artifactId>
			<version>2.5.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.easymock</groupId>
			<artifactId>easymockclassextension</artifactId>
			<version>2.4</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<build>
		<finalName>${final.build.name}</finalName>
		<!--
			compile into war transient directory for hosted mode live editing
		-->
		<outputDirectory>${gwt.output.directory}/WEB-INF/classes</outputDirectory>
		<testResources>
			<testResource>
				<!-- so our test cases can find spring/properties files -->
				<directory>${basedir}/conf</directory>
			</testResource>
			<testResource>
				<!-- now you have to explicitly include this -->
				<directory>${basedir}/src/test/resources</directory>
			</testResource>
		</testResources>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>gwt-maven-plugin</artifactId>
				<version>1.2</version>
				<configuration>
					<output>${basedir}/war</output>
					<webXml>${basedir}/war/WEB-INF/web.xml</webXml>
					<hostedWebapp>${basedir}/war</hostedWebapp>
					<extraJvmArgs>-Xmx1024M</extraJvmArgs>
					<runTarget>com.example.Application/Application.html</runTarget>
				</configuration>
				<executions>
					<execution>
						<phase>process-classes</phase>
						<goals>
							<goal>compile</goal>
							<goal>eclipse</goal>
							<goal>eclipseTest</goal>
						</goals>
					</execution>
					<execution>
						<id>integration-test-gwt</id>
						<phase>integration-test</phase>
						<goals>
							<goal>test</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.4.3</version>
				<configuration>
					<excludes>
						<exclude>**/GwtTest*.java</exclude>
						<exclude>**/*IntegrationTest.java</exclude>
						<exclude>**/AbstractTestCase.java</exclude>
					</excludes>
					<argLine>-Xmx256m</argLine>
				</configuration>
				<executions>
					<execution>
						<id>integration-test</id>
						<goals>
							<goal>test</goal>
						</goals>
						<phase>integration-test</phase>
						<configuration>
							<excludes>
								<exclude>none</exclude>
							</excludes>
							<includes>
								<include>**/*IntegrationTest*.java</include>
							</includes>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.0.2</version>
				<configuration>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.4.1</version>
				<!-- set encoding to something not platform dependent -->
				<configuration>
					<encoding>UTF-8</encoding>
				</configuration>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<!-- we need to copy these for hosted mode to work -->
							<outputDirectory>${basedir}/war/WEB-INF/classes</outputDirectory>
							<resources>
								<resource>
									<directory>${basedir}/conf/</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<!-- Include GWT compiler output in the war -->
				<configuration>
					<warSourceDirectory>${basedir}/war</warSourceDirectory>
					<warSourceExcludes>.gwt-tmp/**,WEB-INF/lib/gwt-user*,.svn</warSourceExcludes>
					<!-- we need to exclude these from the war file -->
					<packagingExcludes>**/*.properties,**/applicationContext.xml,**/README.txt</packagingExcludes>
					<webXml>${basedir}/war/WEB-INF/web.xml</webXml>
				</configuration>
			</plugin>
			<plugin>
				<!--
					this picks up ${jboss.home} for local developer deployment to JBOSS
				-->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<version>1.0-alpha-1</version>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>read-project-properties</goal>
						</goals>
						<configuration>
							<files>
								<file>src/main/filters/developer.properties</file>
							</files>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!--
					This will deploy to local JBOSS if you run mvn initialize
					cargo:deploy cargo:start. Then you can hit the URL
					http://localhost:8080
				-->
				<groupId>org.codehaus.cargo</groupId>
				<artifactId>cargo-maven2-plugin</artifactId>
				<version>1.0</version>
				<executions>
					<execution>
						<phase>initialize</phase>
					</execution>
				</executions>
				<configuration>
					<wait>true</wait>
					<container>
						<containerId>jboss42x</containerId>
						<home>${jboss.home}</home>
					</container>
					<configuration>
						<type>existing</type>
						<home>${jboss.home}/server/default</home>
					</configuration>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>maven-jetty-plugin</artifactId>
				<version>6.1.10</version>
				<configuration>
					<webAppSourceDirectory>${basedir}/war</webAppSourceDirectory>
					<webXml>${basedir}/war/WEB-INF/web.xml</webXml>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>