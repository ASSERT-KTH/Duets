[INFO] Error stacktraces are turned on.
[INFO] Scanning for projects...
[INFO] 
[INFO] ---------------------------< org.mvel:mvel2 >---------------------------
[INFO] Building mvel 2.2.8.Final
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-enforcer-plugin:1.0:enforce (default) @ mvel2 ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ mvel2 ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:2.3.2:compile (default-compile) @ mvel2 ---
[INFO] Compiling 430 source files to /tmp/tmph4xkf2pp/mvel/target/classes
[WARNING] /tmp/tmph4xkf2pp/mvel/src/main/java/org/mvel2/util/JITClassLoader.java:[22,15] Unsafe is internal proprietary API and may be removed in a future release
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:manifest (manifest) @ mvel2 ---
[WARNING] Manifest org.mvel:mvel2:jar:2.2.8.Final : Did not find matching referal for sun.*
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ mvel2 ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:2.3.2:testCompile (default-testCompile) @ mvel2 ---
[INFO] Compiling 98 source files to /tmp/tmph4xkf2pp/mvel/target/test-classes
[INFO] 
[INFO] --- maven-surefire-plugin:2.7.2:test (default-test) @ mvel2 ---
[INFO] Surefire report directory: /tmp/tmph4xkf2pp/mvel/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.mvel2.marshalling.MarshallingTest
new org.mvel2.marshalling.MarshallingTest$Person().{ age = 33, cal = with ( java.util.Calendar.getInstance() ) { time = new java.util.Date(1596137870186)} , map =  [ 'key1':13, 'key2':15, 'key3':'value3', 'key4':new org.mvel2.marshalling.MarshallingTest$Cheese().{ age = 11, edible = false, type = 'stilton' } ] , name = 'mark', nullTest = null, pet = new org.mvel2.marshalling.MarshallingTest$Pet().{ age = 7, array =  { 1, 2, 3 } , list =  [ 'a', 12, new org.mvel2.marshalling.MarshallingTest$SomeNumers().{ ABigDecimal = 23.02339999999999875512912694830447, ABigInteger = 1001, ADouble = 22.02, AFloat = 10.02, AInt = 5, ALong = 100 }, new java.util.Date(1596137870178), new org.mvel2.marshalling.MarshallingTest$Cheese().{ age = 6, edible = false, type = 'cheddar' } ] , name = 'rover' }, someDate = new java.util.Date(1596137870186) }
mvel : 0
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.106 sec
Running org.mvel2.util.FastListTest
105556536
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.027 sec
Running org.mvel2.compiler.GenericsTypeInferenceTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 sec
Running org.mvel2.tests.perftests.NestedSubstatementTests
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.133 sec
Running org.mvel2.tests.perftests.ConcurrentEvaluationTests
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.047 sec
Running org.mvel2.tests.classes.ClassTests
My name is Bob and I am 5 years old. I like the color blue.
My name is BOB and I am 5 years old. I like the color blue.

---------

1. BOB
2. BOB
3. BOB
4. BOB
5. BOB
6. BOB
7. BOB
8. BOB
9. BOB
10. BOB
->g
->o
->r
->k
->e
->m
[COW, PIG]
1596137876524
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.025 sec
Running org.mvel2.tests.core.ComparisonTests

[test] begin test for:
----------------------
c != null
----------------------
Expression Decompile
-------------
(0) OPERATION [NOT_EQUAL] {c} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 101ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
a or b or c
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:a
(1) OPERATOR [CHAINED_OR]: 
(2) REFERENCE :: ASTNode:b
(3) OPERATOR [CHAINED_OR]: 
(4) REFERENCE :: ASTNode:c
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
sentence contains 'fox'
----------------------
Expression Decompile
-------------
(0) NODE [Contains] :: 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 6ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
sentence contains 'mike'
----------------------
Expression Decompile
-------------
(0) NODE [Contains] :: 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 4ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
!(sentence contains 'mike')
----------------------
Expression Decompile
-------------
(0) NODE [Negation] :: (sentence contains 'mike')
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 6ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
bwahbwah = 'mikebrock'; testVar10 = 'mike'; bwahbwah contains testVar10
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 'mikebrock'
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: 'mike'
(3) OPERATOR [END_OF_STATEMENT]: 

(4) NODE [Contains] :: 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 5ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
sentence contains ('fox')
----------------------
Expression Decompile
-------------
(0) NODE [Contains] :: 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
'foobar' soundslike 'fubar'
----------------------
Expression Decompile
-------------
(0) LITERAL :: true'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
'flexbar' soundslike 'fubar'
----------------------
Expression Decompile
-------------
(0) LITERAL :: false'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
(c soundslike 'kat')
----------------------
Expression Decompile
-------------
(0) NODE [Substatement] :: c soundslike 'kat'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
c strsim 'kat'
----------------------
Expression Decompile
-------------
(0) NODE [Strsim] :: 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
_xx1 = 'cat'; _xx2 = 'katt'; (_xx1 soundslike _xx2)
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 'cat'
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: 'katt'
(3) OPERATOR [END_OF_STATEMENT]: 

(4) NODE [Substatement] :: _xx1 soundslike _xx2
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
_type = 'fubar';_type soundslike "foobar"
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 'fubar'
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [Soundslike] :: 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
this is org.mvel2.tests.core.res.Base
----------------------
Expression Decompile
-------------
(0) NODE [Instance] :: 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
this.funMap instanceof java.util.Map
----------------------
Expression Decompile
-------------
(0) NODE [Instance] :: 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
this.data == 'cat'
----------------------
Expression Decompile
-------------
(0) OPERATION [EQUAL] {this.data} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 6ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
dt1 < dt2
----------------------
Expression Decompile
-------------
(0) OPERATION [LESS_THAN] {dt1} {dt2}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
pi convertable_to Integer
----------------------
Expression Decompile
-------------
(0) NODE [Convertable] :: 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
ipaddr == '10.1.1.2'
----------------------
Expression Decompile
-------------
(0) OPERATION [EQUAL] {ipaddr} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 5ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
'z' > 'a'
----------------------
Expression Decompile
-------------
(0) LITERAL :: true'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
'z' < 'a'
----------------------
Expression Decompile
-------------
(0) LITERAL :: false'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
'stringValue' > null
----------------------
Expression Decompile
-------------
(0) LITERAL :: false'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
_v1 = 'bar'; isdef _v1
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 'bar'
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [IsDef] :: _v1
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
isdef _v1
----------------------
Expression Decompile
-------------
(0) NODE [IsDef] :: _v1
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 0ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
!(isdef _v1)
----------------------
Expression Decompile
-------------
(0) NODE [Negation] :: (isdef _v1)
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
! (isdef _v1)
----------------------
Expression Decompile
-------------
(0) NODE [Negation] :: (isdef _v1)
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
!isdef _v1
----------------------
Expression Decompile
-------------
(0) NODE [Negation] :: isdef _v1
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
foo.bar.woof ==false
----------------------
Expression Decompile
-------------
(0) OPERATION [EQUAL] {foo.bar.woof} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
foo.bar.woof == true
----------------------
Expression Decompile
-------------
(0) OPERATION [EQUAL] {foo.bar.woof} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 4ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
foo.bar.woof == false
----------------------
Expression Decompile
-------------
(0) OPERATION [EQUAL] {foo.bar.woof} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
foo.bar.woof== true
----------------------
Expression Decompile
-------------
(0) OPERATION [EQUAL] {foo.bar.woof} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
foo.bar.woof==false
----------------------
Expression Decompile
-------------
(0) OPERATION [EQUAL] {foo.bar.woof} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
foo.bar.name == 'dog'
----------------------
Expression Decompile
-------------
(0) OPERATION [EQUAL] {foo.bar.name} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
foo.bar.name != 'foo'
----------------------
Expression Decompile
-------------
(0) OPERATION [NOT_EQUAL] {foo.bar.name} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
a or 'fubar'
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:a
(1) OPERATOR [CHAINED_OR]: 
(2) LITERAL :: fubar'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
pi < 3.15
----------------------
Expression Decompile
-------------
(0) OPERATION [LESS_THAN] {pi} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
pi <= 3.14
----------------------
Expression Decompile
-------------
(0) OPERATION [LESS_THAN_OR_EQUAL] {pi} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
pi > 3.14
----------------------
Expression Decompile
-------------
(0) OPERATION [GREATHER_THAN] {pi} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
pi >= 3.14
----------------------
Expression Decompile
-------------
(0) OPERATION [GREATER_THAN_OR_EQUAL] {pi} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
!fun && !fun
----------------------
Expression Decompile
-------------
(0) NODE [And] :: 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
fun && !fun
----------------------
Expression Decompile
-------------
(0) NODE [And] :: 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
!(fun && fun)
----------------------
Expression Decompile
-------------
(0) NODE [Negation] :: (fun && fun)
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
(fun && fun)
----------------------
Expression Decompile
-------------
(0) NODE [Substatement] :: fun && fun
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
!false
----------------------
Expression Decompile
-------------
(0) NODE [Negation] :: false
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
!true
----------------------
Expression Decompile
-------------
(0) NODE [Negation] :: true
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 0ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
s = false; t = !s; t
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: false
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: !s
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:t
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
s = false; t =! s; t
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: false
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: ! s
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:t
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
foo.bar.name ~= '[a-z].+'
----------------------
Expression Decompile
-------------
(0) NODE [RegExMatch] :: foo.bar.name 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 5ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
!(foo.bar.name ~= '[a-z].+')
----------------------
Expression Decompile
-------------
(0) NODE [Negation] :: (foo.bar.name ~= '[a-z].+')
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 6ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
foo.bar.name ~= '[a-z].+' && foo.bar.name != null
----------------------
Expression Decompile
-------------
(0) NODE [And] :: 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 5ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
foo.bar.name~='[a-z].+'&&foo.bar.name!=null
----------------------
Expression Decompile
-------------
(0) NODE [And] :: 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 5ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
'' == empty
----------------------
Expression Decompile
-------------
(0) LITERAL :: true'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
BWAH == empty
----------------------
Expression Decompile
-------------
(0) OPERATION [EQUAL] {BWAH} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Expression Decompile
-------------
(0) OPERATION [EQUAL] {[]} {}
==END==
Expression Decompile
-------------
(0) OPERATION [NOT_EQUAL] {['a']} {}
==END==
Expression Decompile
-------------
(0) OPERATION [NOT_EQUAL] {} {['a']}
==END==
Expression Decompile
-------------
(0) OPERATION [NOT_EQUAL] {[]} {}
==END==
Expression Decompile
-------------
(0) OPERATION [EQUAL] {['a']} {}
==END==
Expression Decompile
-------------
(0) OPERATION [EQUAL] {} {['a']}
==END==

[test] begin test for:
----------------------
c is java.lang.String
----------------------
Expression Decompile
-------------
(0) NODE [Instance] :: 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 0ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
pi is java.lang.Integer
----------------------
Expression Decompile
-------------
(0) NODE [Instance] :: 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 0ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
foo is org.mvel2.tests.core.res.Foo
----------------------
Expression Decompile
-------------
(0) NODE [Instance] :: 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 7ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
list contains 'Happy!'
----------------------
Expression Decompile
-------------
(0) NODE [Contains] :: 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
list contains 'Foobie'
----------------------
Expression Decompile
-------------
(0) NODE [Contains] :: 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
foo.bar.woof == true
----------------------
Expression Decompile
-------------
(0) OPERATION [EQUAL] {foo.bar.woof} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 4ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Tests run: 69, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.262 sec
Running org.mvel2.tests.core.SamplesTests
Hello, are you there?
Is it wonderful?
Did you try to escape the population?

[test] begin test for:
----------------------
/**
 * Sample MVEL 2.0 Script
 * "QuickSort"
 * by: Christopher Michael Brock
 */


array = null;

def swap(i, j) {
    temp = array[i];
    array[i] = array[j];
    array[j] = temp;
}

def partition(low, high) {
    pivotPoint = array[low];

    i = low - 1;
    j = high + 1;

    while (i < j) {
        i++; while (array[i] < pivotPoint) ++i;
        j--; while (array[j] > pivotPoint) --j;
        if (i < j) swap(i, j);
    }

    j; //return j
}

def sort(low, high) {
    if (low < high) {
        var p;
        sort(low, p = partition(low, high));
        sort(p + 1, high);
    }
}

def quicksort() {
    sort(0, array.length - 1);
}

array = {99,20,21,209,10,77,8,9,55,73,41,50};

quicksort();

array; // return array                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: null
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [Function] :: swap
(3) OPERATOR [END_OF_STATEMENT]: 

(4) NODE [Function] :: partition
(5) OPERATOR [END_OF_STATEMENT]: 

(6) NODE [Function] :: sort
(7) OPERATOR [END_OF_STATEMENT]: 

(8) NODE [Function] :: quicksort
(9) OPERATOR [END_OF_STATEMENT]: 

(10) NODE [AssignmentNode] :: {99,20,21,209,10,77,8,9,55,73,41,50}
(11) OPERATOR [END_OF_STATEMENT]: 

(12) REFERENCE :: ASTNode:quicksort()
(13) OPERATOR [END_OF_STATEMENT]: 

(14) REFERENCE :: ASTNode:array
(15) OPERATOR [END_OF_STATEMENT]: 

==END==
All threads have stopped.
Result Count: 1
[test] finished in: 49ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Mr. Good is Good
Mr. Evil is Evil
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.079 sec
Running org.mvel2.tests.core.CommentParsingTests
Got here!
Got here!

[test] begin test for:
----------------------
import org.mvel2.tests.core.res.Foo;
 [ 10, 20 /* ... */ ]
----------------------
Expression Decompile
-------------
(0) NODE [ImportNode] :: org.mvel2.tests.core.res.Foo
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [InlineCollectionNode] :: [ 10, 20           ]
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 8ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
/** This is a fun test script **/
a = 10;
/**
* Here is a useful variable
*/
b = 20; // set b to '20'
return ((a + b) * 2) - 10;
// last comment

----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 10
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: 20
(3) OPERATOR [END_OF_STATEMENT]: 

(4) OPERATOR [RETURN]: ((a + b) * 2) - 10
(5) OPERATOR [END_OF_STATEMENT]: 

==END==
All threads have stopped.
Result Count: 1
[test] finished in: 4ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
foo./*Hey!*/name
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:foo.        name
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
// This is a comment
5 + 5
----------------------
Expression Decompile
-------------
(0) LITERAL :: 10'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
/* This is a test of
MVEL's support for
multi-line comments
*/
 15 + 15
----------------------
Expression Decompile
-------------
(0) LITERAL :: 30'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
10 + 10; // This is a comment
----------------------
Expression Decompile
-------------
(0) LITERAL :: 20'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Tests run: 22, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.03 sec
Running org.mvel2.tests.core.PropertyAccessTests

[test] begin test for:
----------------------
fun
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:fun
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 11ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
foo.bar.name.toUpperCase()
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:foo.bar.name.toUpperCase()
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 4ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
foo. bar. name.toUpperCase()
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:foo. bar. name.toUpperCase()
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 4ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
foo.bar.name
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:foo.bar.name
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 4ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
DATA
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:DATA
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
derived.data
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:derived.data
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
testImpl.name
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:testImpl.name
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 4ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
testImpl.foo
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:testImpl.foo
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
funMap['foo'].happy()
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:funMap['foo'].happy()
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
sarahl
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:sarahl
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
foo.happy()
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:foo.happy()
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
foo.toUC( 'fubar' )
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:foo.toUC( 'fubar' )
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
equalityCheck(c, 'cat')
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:equalityCheck(c, 'cat')
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
readBack(null)
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:readBack(null)
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
appendTwoStrings(null, 'test')
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:appendTwoStrings(null, 'test')
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
   equalityCheck(   c  
  ,   
   'cat'      )   
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:equalityCheck(   c  
  ,   
   'cat'      )
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
true
----------------------
Expression Decompile
-------------
(0) LITERAL :: true'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
false
----------------------
Expression Decompile
-------------
(0) LITERAL :: false'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
null
----------------------
Expression Decompile
-------------
(0) LITERAL :: null'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
null or 'foo'
----------------------
Expression Decompile
-------------
(0) LITERAL :: foo'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
'foo' + 'bar' + 'car'
----------------------
Expression Decompile
-------------
(0) LITERAL :: foobarcar'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
'foobar' + 'car' + 1
----------------------
Expression Decompile
-------------
(0) LITERAL :: foobarcar1'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
funMap['foo'].bar.name
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:funMap['foo'].bar.name
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
funMap.foo.bar.name
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:funMap.foo.bar.name
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 7ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
String.valueOf(Class.forName('java.lang.String').getName())
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:String.valueOf(Class.forName('java.lang.String').getName())
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 5ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
new java.lang.String('foobie')
----------------------
Expression Decompile
-------------
(0) NODE [NewObjectNode] :: java.lang.String('foobie')
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 4ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
new String('foobie')  . toUpperCase()
----------------------
Expression Decompile
-------------
(0) NODE [NewObjectNode] :: String('foobie')  . toUpperCase()
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
new String() is String
----------------------
Expression Decompile
-------------
(0) NODE [Instance] :: 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
new java.text.SimpleDateFormat('yyyy').format(new java.util.Date(System.currentTimeMillis()))
----------------------
Expression Decompile
-------------
(0) NODE [NewObjectNode] :: java.text.SimpleDateFormat('yyyy').format(new java.util.Date(System.currentTimeMillis()))
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 8ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
this
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:this
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
this.funMap
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:this.funMap
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
Integer.parseInt(this.number)
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:Integer.parseInt(this.number)
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 5ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
new String(this.number)
----------------------
Expression Decompile
-------------
(0) NODE [NewObjectNode] :: String(this.number)
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 4ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
"\"Mike Brock\""
----------------------
Expression Decompile
-------------
(0) LITERAL :: "Mike Brock"'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
'MVEL\'s Parser is Fast'
----------------------
Expression Decompile
-------------
(0) LITERAL :: MVEL's Parser is Fast'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
java.util.ArrayList
----------------------
Expression Decompile
-------------
(0) LITERAL :: class java.util.ArrayList'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
java.lang.String.valueOf('FooBar')
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:java.lang.String.valueOf('FooBar')
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
java.lang.Integer.MAX_VALUE
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:java.lang.Integer.MAX_VALUE
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
Integer.MAX_VALUE
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:Integer.MAX_VALUE
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
String.valueOf(Integer.MAX_VALUE)
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:String.valueOf(Integer.MAX_VALUE)
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
stringArray.size()
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:stringArray.size()
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
intArray.size()
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:intArray.size()
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
new Integer( 6 )
----------------------
Expression Decompile
-------------
(0) NODE [NewObjectNode] :: Integer( 6 )
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
10 * 100
----------------------
Expression Decompile
-------------
(0) LITERAL :: 1000'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
abc = 'foo'; abc[1]
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 'foo'
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:abc[1]
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 5ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
foo.happy(); foo.bar.happy()
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:foo.happy()
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:foo.bar.happy()
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Result = null

[test] begin test for:
----------------------
map=new java.util.Hashtable();map.foo='bar'
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: new java.util.Hashtable()
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [DeepAssignmentNode] :: 'bar'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 6ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Expression Decompile
-------------
(0) REFERENCE :: Union:test1
==END==
Expression Decompile
-------------
(0) REFERENCE :: Union:get('test1')
==END==
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: ['test1' : null]
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:a.test1
==END==
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: ['test1' : null]
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:a.get('test1')
==END==
Expression Decompile
-------------
(0) REFERENCE :: Union:[0]
==END==
Expression Decompile
-------------
(0) REFERENCE :: Union:get(0)
==END==
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: [null]
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:a[0]
==END==
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: [null]
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:a.get(0)
==END==
Expression Decompile
-------------
(0) REFERENCE :: Union:[0]
==END==
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: {null}
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:a[0]
==END==
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:org.mvel2.tests.core.res.Foo.STATIC_BAR
==END==
Tests run: 66, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.21 sec
Running org.mvel2.tests.core.MVELTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec
Running org.mvel2.tests.core.InlineCollectionsTests

[test] begin test for:
----------------------
[]
----------------------
Expression Decompile
-------------
(0) NODE [InlineCollectionNode] :: []
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
{    }
----------------------
Expression Decompile
-------------
(0) NODE [InlineCollectionNode] :: {    }
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
{}
----------------------
Expression Decompile
-------------
(0) NODE [InlineCollectionNode] :: {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
["test"]
----------------------
Expression Decompile
-------------
(0) NODE [InlineCollectionNode] :: ["test"]
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
[66]
----------------------
Expression Decompile
-------------
(0) NODE [InlineCollectionNode] :: [66]
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
["apple"].size()
----------------------
Expression Decompile
-------------
(0) REFERENCE :: Union:size()
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
Array.getLength({'foo', 'bar'})
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:Array.getLength({'foo', 'bar'})
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
arrayTest = {{1, 2, 3}, {2, 1, 0}}; arrayTest[1][2]
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: {{1, 2, 3}, {2, 1, 0}}
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:arrayTest[1][2]
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
map = ['mike':'sarah','tom':'jacquelin']; map['mike']
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: ['mike':'sarah','tom':'jacquelin']
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:map['mike']
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
map = ['mike' :'sarah'  ,'tom'  :'jacquelin'  ]; map['mike']
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: ['mike' :'sarah'  ,'tom'  :'jacquelin'  ]
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:map['mike']
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
map = [1 : 'foo']; map[1]
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: [1 : 'foo']
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:map[1]
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
{1,2,3}.size()
----------------------
Expression Decompile
-------------
(0) REFERENCE :: Union:size()
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
['foo', 'bar', 'foobar', 'FOOBAR']
----------------------
Expression Decompile
-------------
(0) NODE [InlineCollectionNode] :: ['foo', 'bar', 'foobar', 'FOOBAR']
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
funMethod( {'gonk', 'foo'} )
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:funMethod( {'gonk', 'foo'} )
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
sum({2,2,2,2,2})
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:sum({2,2,2,2,2})
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
map = ['test' : 'poo', 'foo' : [c, 'pear']]; map['foo'][1]
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: ['test' : 'poo', 'foo' : [c, 'pear']]
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:map['foo'][1]
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
total = 0; a = {1,2,3}; foreach(item : a) { total += item }; total
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 0
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: {1,2,3}
(3) OPERATOR [END_OF_STATEMENT]: 

(4) NODE [ForEachNode] ::  a
(5) OPERATOR [END_OF_STATEMENT]: 

(6) REFERENCE :: ASTNode:total
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
a = {1,2,3}; foreach (i : a) { if (i == 1) { return true; } }
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: {1,2,3}
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [ForEachNode] ::  a
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
a = {1,2,3,4}; builder = ''; foreach (i : a) { if (i == 1) { builder += 'One' } else if (i == 2) { builder += 'Two' } else if (i == 3) { builder += 'Three' } else { builder += 'Four' }}; builder;
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: {1,2,3,4}
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: ''
(3) OPERATOR [END_OF_STATEMENT]: 

(4) NODE [ForEachNode] ::  a
(5) OPERATOR [END_OF_STATEMENT]: 

(6) REFERENCE :: ASTNode:builder
(7) OPERATOR [END_OF_STATEMENT]: 

==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
['Person.age' : [1, 2, 3, 4], 'Person.rating' : ['High', 'Low'], 'Person.something' : (new String('foo').toUpperCase())]
----------------------
Expression Decompile
-------------
(0) NODE [InlineCollectionNode] :: ['Person.age' : [1, 2, 3, 4], 'Person.rating' : ['High', 'Low'], 'Person.something' : (new String('foo').toUpperCase())]
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
[new String('foo') : new String('bar')]
----------------------
Expression Decompile
-------------
(0) NODE [InlineCollectionNode] :: [new String('foo') : new String('bar')]
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
counterX = 0; foreach (item:{1,2,3,4,5,6,7,8,9,10}) { counterX++; }; return counterX + 1;
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 0
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [ForEachNode] :: {1,2,3,4,5,6,7,8,9,10}
(3) OPERATOR [END_OF_STATEMENT]: 

(4) OPERATOR [RETURN]: counterX + 1
(5) OPERATOR [END_OF_STATEMENT]: 

==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
counterX = 10; foreach (item:{1,1,1,1,1,1,1,1,1,1}) { counterX -= item; } return counterX;
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 10
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [ForEachNode] :: {1,1,1,1,1,1,1,1,1,1}
(3) OPERATOR [END_OF_STATEMENT]: 

(4) OPERATOR [RETURN]: counterX
(5) OPERATOR [END_OF_STATEMENT]: 

==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
['Person.age' : [1, 2, 3, 4],'Person.rating' : 'q']
----------------------
Expression Decompile
-------------
(0) NODE [InlineCollectionNode] :: ['Person.age' : [1, 2, 3, 4],'Person.rating' : 'q']
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 4ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
['Person.age' : [1, 2, 3, 4], 'Person.rating' : 'q']
----------------------
Expression Decompile
-------------
(0) NODE [InlineCollectionNode] :: ['Person.age' : [1, 2, 3, 4], 'Person.rating' : 'q']
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
!( ["X", "Y"] contains "Y" )
----------------------
Expression Decompile
-------------
(0) NODE [Negation] :: ( ["X", "Y"] contains "Y" )
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
misc.toList(foo.bar.name, 'hello', 42, ['key1' : 'value1', c : [ foo.bar.age, 'car', 42 ]], [42, [c : 'value1']] )
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:misc.toList(foo.bar.name, 'hello', 42, ['key1' : 'value1', c : [ foo.bar.age, 'car', 42 ]], [42, [c : 'value1']] )
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 17ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
a = {'f00', 'bar'}; a[0] = 'foo'; a[0]
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: {'f00', 'bar'}
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: 'foo'
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:a[0]
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
[1,2,3] + [4,5,6]
----------------------
Expression Decompile
-------------
(0) OPERATION [ADD] {[1,2,3]} {[4,5,6]}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
[1,2,3] + 4
----------------------
Expression Decompile
-------------
(0) OPERATION [ADD] {[1,2,3]} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Tests run: 40, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.08 sec
Running org.mvel2.tests.core.FunctionsTest

[test] begin test for:
----------------------
function heyFoo() { return 'Foobar'; };
return heyFoo() + heyFoo();
----------------------
Expression Decompile
-------------
(0) NODE [Function] :: heyFoo
(1) OPERATOR [END_OF_STATEMENT]: 

(2) OPERATOR [RETURN]: heyFoo() + heyFoo()
(3) OPERATOR [END_OF_STATEMENT]: 

==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
function testFunction() { a = 'foo'; b = 'bar'; a + b; }; testFunction().toUpperCase();  
----------------------
Expression Decompile
-------------
(0) NODE [Function] :: testFunction
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:testFunction().toUpperCase()
(3) OPERATOR [END_OF_STATEMENT]: 

==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
function testFunction(input) { return input; }; testFunction('barfoo');
----------------------
Expression Decompile
-------------
(0) NODE [Function] :: testFunction
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:testFunction('barfoo')
(3) OPERATOR [END_OF_STATEMENT]: 

==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
function testFunction(x, y) { return x + y; }; testFunction(7, 3);
----------------------
Expression Decompile
-------------
(0) NODE [Function] :: testFunction
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:testFunction(7, 3)
(3) OPERATOR [END_OF_STATEMENT]: 

==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
a = function { 'foobar' }; a();
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: function { 'foobar' }
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:a()
(3) OPERATOR [END_OF_STATEMENT]: 

==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
30

[test] begin test for:
----------------------
def increment(i) { i + 1 }; def ff(i) { x = 0; while (i < 1) { x++; while (i < 10) { i = increment(i); } }; if (x == 1) return i; else -1; }; i = 0; ff(i);
----------------------
Expression Decompile
-------------
(0) NODE [Function] :: increment
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [Function] :: ff
(3) OPERATOR [END_OF_STATEMENT]: 

(4) NODE [AssignmentNode] :: 0
(5) OPERATOR [END_OF_STATEMENT]: 

(6) REFERENCE :: ASTNode:ff(i)
(7) OPERATOR [END_OF_STATEMENT]: 

==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
anonFunc = function (a,b) { return a + b; }; anonFunc(1,2)
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: function (a,b) { return a + b; }
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:anonFunc(1,2)
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
function fooFunction(a) { return a; }; x__0 = ''; 'boob' == fooFunction(x__0 = 'boob') && x__0 == 'boob';
----------------------
Expression Decompile
-------------
(0) NODE [Function] :: fooFunction
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: ''
(3) OPERATOR [END_OF_STATEMENT]: 

(4) NODE [And] :: 
(5) OPERATOR [END_OF_STATEMENT]: 

==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
6.75
function_prototype:foo
Word up
function_prototype:bar
Peace out
Tests run: 20, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.029 sec
Running org.mvel2.tests.core.TypesAndInferenceTests
i: 0
i: 1
i: 2
i: 3
i: 4
i: 5
i: 6
i: 7
i: 8
i: 9
i: 10
i: 11
i: 12
i: 13
i: 14
i: 15
i: 16
i: 17
i: 18
i: 19
i: 20
i: 21
i: 22
i: 23
i: 24
i: 25
i: 26
i: 27
i: 28
i: 29
i: 30
i: 31
i: 32
i: 33
i: 34
i: 35
i: 36
i: 37
i: 38
i: 39
i: 40
i: 41
i: 42
i: 43
i: 44
i: 45
i: 46
i: 47
i: 48
i: 49
i: 50
i: 51
i: 52
i: 53
i: 54
i: 55
i: 56
i: 57
i: 58
i: 59
i: 60
i: 61
i: 62
i: 63
i: 64
i: 65
i: 66
i: 67
i: 68
i: 69
i: 70
i: 71
i: 72
i: 73
i: 74
i: 75
i: 76
i: 77
i: 78
i: 79
i: 80
i: 81
i: 82
i: 83
i: 84
i: 85
i: 86
i: 87
i: 88
i: 89
i: 90
i: 91
i: 92
i: 93
i: 94
i: 95
i: 96
i: 97
i: 98
i: 99
i: 0
i: 1
i: 2
i: 3
i: 4
i: 5
i: 6
i: 7
i: 8
i: 9
i: 10
i: 11
i: 12
i: 13
i: 14
i: 15
i: 16
i: 17
i: 18
i: 19
i: 20
i: 21
i: 22
i: 23
i: 24
i: 25
i: 26
i: 27
i: 28
i: 29
i: 30
i: 31
i: 32
i: 33
i: 34
i: 35
i: 36
i: 37
i: 38
i: 39
i: 40
i: 41
i: 42
i: 43
i: 44
i: 45
i: 46
i: 47
i: 48
i: 49
i: 50
i: 51
i: 52
i: 53
i: 54
i: 55
i: 56
i: 57
i: 58
i: 59
i: 60
i: 61
i: 62
i: 63
i: 64
i: 65
i: 66
i: 67
i: 68
i: 69
i: 70
i: 71
i: 72
i: 73
i: 74
i: 75
i: 76
i: 77
i: 78
i: 79
i: 80
i: 81
i: 82
i: 83
i: 84
i: 85
i: 86
i: 87
i: 88
i: 89
i: 90
i: 91
i: 92
i: 93
i: 94
i: 95
i: 96
i: 97
i: 98
i: 99
i: 0
i: 1
i: 2
i: 3
i: 4
i: 5
i: 6
i: 7
i: 8
i: 9
i: 10
i: 11
i: 12
i: 13
i: 14
i: 15
i: 16
i: 17
i: 18
i: 19
i: 20
i: 21
i: 22
i: 23
i: 24
i: 25
i: 26
i: 27
i: 28
i: 29
i: 30
i: 31
i: 32
i: 33
i: 34
i: 35
i: 36
i: 37
i: 38
i: 39
i: 40
i: 41
i: 42
i: 43
i: 44
i: 45
i: 46
i: 47
i: 48
i: 49
i: 50
i: 51
i: 52
i: 53
i: 54
i: 55
i: 56
i: 57
i: 58
i: 59
i: 60
i: 61
i: 62
i: 63
i: 64
i: 65
i: 66
i: 67
i: 68
i: 69
i: 70
i: 71
i: 72
i: 73
i: 74
i: 75
i: 76
i: 77
i: 78
i: 79
i: 80
i: 81
i: 82
i: 83
i: 84
i: 85
i: 86
i: 87
i: 88
i: 89
i: 90
i: 91
i: 92
i: 93
i: 94
i: 95
i: 96
i: 97
i: 98
i: 99
i: 0
i: 1
i: 2
i: 3
i: 4
i: 5
i: 6
i: 7
i: 8
i: 9
i: 10
i: 11
i: 12
i: 13
i: 14
i: 15
i: 16
i: 17
i: 18
i: 19
i: 20
i: 21
i: 22
i: 23
i: 24
i: 25
i: 26
i: 27
i: 28
i: 29
i: 30
i: 31
i: 32
i: 33
i: 34
i: 35
i: 36
i: 37
i: 38
i: 39
i: 40
i: 41
i: 42
i: 43
i: 44
i: 45
i: 46
i: 47
i: 48
i: 49
i: 50
i: 51
i: 52
i: 53
i: 54
i: 55
i: 56
i: 57
i: 58
i: 59
i: 60
i: 61
i: 62
i: 63
i: 64
i: 65
i: 66
i: 67
i: 68
i: 69
i: 70
i: 71
i: 72
i: 73
i: 74
i: 75
i: 76
i: 77
i: 78
i: 79
i: 80
i: 81
i: 82
i: 83
i: 84
i: 85
i: 86
i: 87
i: 88
i: 89
i: 90
i: 91
i: 92
i: 93
i: 94
i: 95
i: 96
i: 97
i: 98
i: 99
Hello;7
Hello;7
[Error: Failed to compileShared: 1 compilation error(s): 
 - (1,11) could not resolve class: Foo244]
[Near : {... x_a = new Foo244( $ba ); x_a.equals($ba); ....}]
                                        ^
[Line: 1, Column: 11]
	at org.mvel2.compiler.ExpressionCompiler.compile(ExpressionCompiler.java:76)
	at org.mvel2.MVEL.compileExpression(MVEL.java:810)
	at org.mvel2.tests.core.TypesAndInferenceTests.testStrictStrongTypingCompilationErrors2(TypesAndInferenceTests.java:680)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:243)
	at junit.framework.TestSuite.run(TestSuite.java:238)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:35)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:115)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
0
1
var1.equals(var2)
[Error: incompatible types in statement: class java.lang.String (compared from: class java.lang.Integer)]
[Near : {... 1-blah ....}]
               ^
[Line: 1, Column: 3]
	at org.mvel2.ast.BinaryOperation.<init>(BinaryOperation.java:87)
	at org.mvel2.util.CompilerTools.finalizePayload(CompilerTools.java:139)
	at org.mvel2.compiler.ExpressionCompiler._compile(ExpressionCompiler.java:280)
	at org.mvel2.compiler.ExpressionCompiler.compile(ExpressionCompiler.java:52)
	at org.mvel2.tests.core.TypesAndInferenceTests.testStrongTyping2(TypesAndInferenceTests.java:947)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:243)
	at junit.framework.TestSuite.run(TestSuite.java:238)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:35)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:115)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
[Error: throwException( ): this should throw an exception]
[Near : {... ( throwException( ) ) ....}]
             ^
[Line: 1, Column: 1]
	at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain(ReflectiveAccessorOptimizer.java:436)
	at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(ReflectiveAccessorOptimizer.java:163)
	at org.mvel2.ast.ASTNode.optimize(ASTNode.java:159)
	at org.mvel2.ast.ASTNode.getReducedValueAccelerated(ASTNode.java:115)
	at org.mvel2.compiler.ExecutableAccessor.getValue(ExecutableAccessor.java:38)
	at org.mvel2.ast.Substatement.getReducedValueAccelerated(Substatement.java:44)
	at org.mvel2.MVELRuntime.execute(MVELRuntime.java:85)
	at org.mvel2.compiler.CompiledExpression.getDirectValue(CompiledExpression.java:123)
	at org.mvel2.compiler.CompiledExpression.getValue(CompiledExpression.java:119)
	at org.mvel2.compiler.CompiledExpression.getValue(CompiledExpression.java:113)
	at org.mvel2.MVEL.executeExpression(MVEL.java:905)
	at org.mvel2.tests.core.TypesAndInferenceTests.testStaticMethodCallThrowsException(TypesAndInferenceTests.java:1430)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:243)
	at junit.framework.TestSuite.run(TestSuite.java:238)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:35)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:115)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(ReflectiveAccessorOptimizer.java:1120)
	at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(ReflectiveAccessorOptimizer.java:1003)
	at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain(ReflectiveAccessorOptimizer.java:363)
	... 36 more
Caused by: java.lang.RuntimeException: this should throw an exception
	at org.mvel2.tests.core.CoreConfidenceTests$StaticMethods.throwException(CoreConfidenceTests.java:2851)
	... 43 more
class java.lang.String
input>order
Tests run: 77, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.045 sec
Running org.mvel2.tests.core.DebuggerTests
Expression Decompile
-------------
(0) DEBUG_SYMBOL :: [SourceLine:1]
(1) NODE [AssignmentNode] :: 7
(2) OPERATOR [END_OF_STATEMENT]: 

(3) DEBUG_SYMBOL :: [SourceLine:2]
(4) NODE [AssignmentNode] :: 8
(5) OPERATOR [END_OF_STATEMENT]: 

(6) DEBUG_SYMBOL :: [SourceLine:3]
(7) NODE [AssignmentNode] :: 9
(8) OPERATOR [END_OF_STATEMENT]: 

(9) DEBUG_SYMBOL :: [SourceLine:4]
(10) NODE [AssignmentNode] :: 10
(11) OPERATOR [END_OF_STATEMENT]: 

(12) DEBUG_SYMBOL :: [SourceLine:5]
(13) NODE [AssignmentNode] :: 11
(14) OPERATOR [END_OF_STATEMENT]: 

(15) DEBUG_SYMBOL :: [SourceLine:6]
(16) NODE [AssignmentNode] :: 12
(17) OPERATOR [END_OF_STATEMENT]: 

(18) DEBUG_SYMBOL :: [SourceLine:7]
(19) NODE [AssignmentNode] :: 13
(20) OPERATOR [END_OF_STATEMENT]: 

(21) DEBUG_SYMBOL :: [SourceLine:8]
(22) NODE [AssignmentNode] :: 14
(23) OPERATOR [END_OF_STATEMENT]: 

==END==
HEI 7
2
1
3
Expression Decompile
-------------
(0) DEBUG_SYMBOL :: [SourceLine:1]
(1) NODE [AssignmentNode] :: 7
(2) OPERATOR [END_OF_STATEMENT]: 

(3) DEBUG_SYMBOL :: [SourceLine:2]
(4) NODE [AssignmentNode] :: 8
(5) OPERATOR [END_OF_STATEMENT]: 

(6) DEBUG_SYMBOL :: [SourceLine:3]
(7) REFERENCE :: ASTNode:System.out.println("h")
(8) OPERATOR [END_OF_STATEMENT]: 

(9) DEBUG_SYMBOL :: [SourceLine:4]
(10) NODE [AssignmentNode] :: 23
(11) OPERATOR [END_OF_STATEMENT]: 

(12) DEBUG_SYMBOL :: [SourceLine:5]
(13) NODE [AssignmentNode] :: 23
(14) OPERATOR [END_OF_STATEMENT]: 

(15) DEBUG_SYMBOL :: [SourceLine:6]
(16) NODE [AssignmentNode] :: 23
(17) OPERATOR [END_OF_STATEMENT]: 

(18) DEBUG_SYMBOL :: [SourceLine:7]
(19) NODE [AssignmentNode] :: 34
(20) OPERATOR [END_OF_STATEMENT]: 

==END==
h
5
System.out.println( "a1" );
c = new Cheese();
with ( c ) { type = 'cheddar',
             price = 10 };
System.out.println( "a1" );

output: Expression Decompile
-------------
(0) DEBUG_SYMBOL :: [SourceLine:1]
(1) REFERENCE :: ASTNode:System.out.println( "a1" )
(2) OPERATOR [END_OF_STATEMENT]: 

(3) DEBUG_SYMBOL :: [SourceLine:2]
(4) NODE [AssignmentNode] :: new Cheese()
(5) OPERATOR [END_OF_STATEMENT]: 

(6) DEBUG_SYMBOL :: [SourceLine:3]
(7) NODE [WithNode] ::  c 
(8) DEBUG_SYMBOL :: [SourceLine:4]
(9) OPERATOR [END_OF_STATEMENT]: 

(10) DEBUG_SYMBOL :: [SourceLine:5]
(11) REFERENCE :: ASTNode:System.out.println( "a1" )
(12) OPERATOR [END_OF_STATEMENT]: 

==END==
Expression:
------------
/** This is a comment
 *  Second comment line
 *  Third Comment Line
 */
System.out.println('4');
System.out.println('5');
a = 0;
b = 1;
a + b
------------
4
5
Breakpoint Encountered [source:test2.mv; line:9]
vars:[dt1, a, b, c, BWAH, dt2, foo, zero, testImpl, hour, array, pi, ipaddr, five, derived, misc, order, $id]
Resume Execution
Breakpoint [source:test2.mv; line:6]
4
Breakpoint [source:test2.mv; line:8]
Breakpoint [source:test2.mv; line:9]
Breakpoint [source:test2.mv; line:10]

Expression:------------
System.out.println('foo');
a = new Foo244();
@Update with (a) { name = 'bar' };
System.out.println('name:' + a.name);
return a.name;
------------
foo
Breakpoint [source:test2.mv; line:3]
fired update interceptor -- before
fired update interceptor -- after
Breakpoint [source:test2.mv; line:4]
name:bar
Breakpoint [source:test2.mv; line:5]

Expression:------------
System.out.println('foo');
a = new Foo244();
a.name = 'bar';
foo.happy();
System.out.println( 'name:' + a.name );               
System.out.println( 'name:' + a.name );         
System.out.println( 'name:' + a.name );     
return a.name;
------------
Expression Decompile
-------------
(0) DEBUG_SYMBOL :: [SourceLine:1]
(1) REFERENCE :: ASTNode:System.out.println('foo')
(2) OPERATOR [END_OF_STATEMENT]: 

(3) DEBUG_SYMBOL :: [SourceLine:2]
(4) NODE [AssignmentNode] :: new Foo244()
(5) OPERATOR [END_OF_STATEMENT]: 

(6) DEBUG_SYMBOL :: [SourceLine:3]
(7) NODE [DeepAssignmentNode] :: 'bar'
(8) OPERATOR [END_OF_STATEMENT]: 

(9) DEBUG_SYMBOL :: [SourceLine:4]
(10) REFERENCE :: ASTNode:foo.happy()
(11) OPERATOR [END_OF_STATEMENT]: 

(12) DEBUG_SYMBOL :: [SourceLine:5]
(13) REFERENCE :: ASTNode:System.out.println( 'name:' + a.name )
(14) OPERATOR [END_OF_STATEMENT]: 

(15) DEBUG_SYMBOL :: [SourceLine:6]
(16) REFERENCE :: ASTNode:System.out.println( 'name:' + a.name )
(17) OPERATOR [END_OF_STATEMENT]: 

(18) DEBUG_SYMBOL :: [SourceLine:7]
(19) REFERENCE :: ASTNode:System.out.println( 'name:' + a.name )
(20) OPERATOR [END_OF_STATEMENT]: 

(21) DEBUG_SYMBOL :: [SourceLine:8]
(22) OPERATOR [RETURN]: a.name
(23) OPERATOR [END_OF_STATEMENT]: 

==END==

==RUN==

Breakpoint [source:test2.mv; line:1]
foo
Breakpoint [source:test2.mv; line:2]
Breakpoint [source:test2.mv; line:3]
Breakpoint [source:test2.mv; line:4]
Breakpoint [source:test2.mv; line:5]
name:bar
Breakpoint [source:test2.mv; line:6]
name:bar
Breakpoint [source:test2.mv; line:7]
name:bar
Breakpoint [source:test2.mv; line:8]
Expression Decompile
-------------
(0) DEBUG_SYMBOL :: [SourceLine:1]
(1) REFERENCE :: ASTNode:System.out.println( "a1" )
(2) OPERATOR [END_OF_STATEMENT]: 

(3) DEBUG_SYMBOL :: [SourceLine:2]
(4) REFERENCE :: ASTNode:System.out.println( "a2" )
(5) OPERATOR [END_OF_STATEMENT]: 

(6) DEBUG_SYMBOL :: [SourceLine:3]
(7) REFERENCE :: ASTNode:System.out.println( "a3" )
(8) OPERATOR [END_OF_STATEMENT]: 

(9) DEBUG_SYMBOL :: [SourceLine:4]
(10) REFERENCE :: ASTNode:System.out.println( "a4" )
(11) OPERATOR [END_OF_STATEMENT]: 

==END==
Expression Decompile
-------------
(0) DEBUG_SYMBOL :: [SourceLine:1]
(1) REFERENCE :: ASTNode:System.out.println( "a1" )
(2) OPERATOR [END_OF_STATEMENT]: 

(3) DEBUG_SYMBOL :: [SourceLine:2]
(4) REFERENCE :: ASTNode:System.out.println( "a2" )
(5) OPERATOR [END_OF_STATEMENT]: 

(6) DEBUG_SYMBOL :: [SourceLine:3]
(7) REFERENCE :: ASTNode:System.out.println( "a3" )
(8) OPERATOR [END_OF_STATEMENT]: 

(9) DEBUG_SYMBOL :: [SourceLine:4]
(10) REFERENCE :: ASTNode:System.out.println( "a4" )
(11) OPERATOR [END_OF_STATEMENT]: 

==END==
stilton
-------
[C@253d9f73
-------

Breakpoint [source:test.mv; line:1]
Good
Breakpoint [source:test.mv; line:7]
output: Expression Decompile
-------------
(0) DEBUG_SYMBOL :: [SourceLine:1]
(1) REFERENCE :: ASTNode:System.out.println( "a1" )
(2) OPERATOR [END_OF_STATEMENT]: 

(3) DEBUG_SYMBOL :: [SourceLine:2]
(4) REFERENCE :: ASTNode:System.out.println( "a2" )
(5) OPERATOR [END_OF_STATEMENT]: 

(6) DEBUG_SYMBOL :: [SourceLine:3]
(7) REFERENCE :: ASTNode:System.out.println( "a3" )
(8) OPERATOR [END_OF_STATEMENT]: 

(9) DEBUG_SYMBOL :: [SourceLine:4]
(10) REFERENCE :: ASTNode:System.out.println( "a4" )
(11) OPERATOR [END_OF_STATEMENT]: 

==END==
Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.016 sec
Running org.mvel2.tests.core.WithTests

[test] begin test for:
----------------------
with (foo) {aValue = 'One',bValue='Two'}; with (foo) {aValue += 'One', bValue += 'Two'}; foo.aValue + foo.bValue;
----------------------
Expression Decompile
-------------
(0) NODE [WithNode] :: foo
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [WithNode] :: foo
(3) OPERATOR [END_OF_STATEMENT]: 

(4) OPERATION [ADD] {foo.aValue} {foo.bValue}
(5) OPERATOR [END_OF_STATEMENT]: 

==END==
All threads have stopped.
Result Count: 1
[test] finished in: 8ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
with (foo) {countTest += 5 }; with (foo) { countTest *= 2 }; foo.countTest
----------------------
Expression Decompile
-------------
(0) NODE [WithNode] :: foo
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [WithNode] :: foo
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:foo.countTest
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 6ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
with (foo) {aValue = 'One',bValue='Two'}; foo.aValue + foo.bValue;
----------------------
Expression Decompile
-------------
(0) NODE [WithNode] :: foo
(1) OPERATOR [END_OF_STATEMENT]: 

(2) OPERATION [ADD] {foo.aValue} {foo.bValue}
(3) OPERATOR [END_OF_STATEMENT]: 

==END==
All threads have stopped.
Result Count: 1
[test] finished in: 5ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
with (foo) { countTest += 5, 
// foobar!
aValue = 'Hello',
/** Comment! **/
bValue = 'Goodbye'
 }; with (foo) { countTest *= 2 }; foo
----------------------
Expression Decompile
-------------
(0) NODE [WithNode] :: foo
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [WithNode] :: foo
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:foo
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 5ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
var y; with (foo) { 
aValue = (y = 'One'), // this is a comment 
bValue='Two'  // this is also a comment 
}; 
foo.aValue + foo.bValue + y;
----------------------
Expression Decompile
-------------
(0) NODE [DeclTypedVarNode] :: y
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [WithNode] :: foo
(3) OPERATOR [END_OF_STATEMENT]: 

(4) OPERATION [ADD] {} {y}
(5) OPERATOR [END_OF_STATEMENT]: 

==END==
All threads have stopped.
Result Count: 1
[test] finished in: 5ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Tests run: 24, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.067 sec
Running org.mvel2.tests.core.ProtoTests
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec
Running org.mvel2.tests.core.LiteralParsingTests

[test] begin test for:
----------------------
java.lang.String
----------------------
Expression Decompile
-------------
(0) LITERAL :: class java.lang.String'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
true && true
----------------------
Expression Decompile
-------------
(0) LITERAL :: true'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec
Running org.mvel2.tests.core.StaticMethodImportTests
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.018 sec
Running org.mvel2.tests.core.PropertyHandlerTests
Listener Fired:list
Listener Fired:list
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.008 sec
Running org.mvel2.tests.core.UtilsTests
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec
Running org.mvel2.tests.core.MutationsTests

[test] begin test for:
----------------------
populate(); blahfoo = barfoo
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:populate()
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: barfoo
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
array[zero] = array[zero+1]; array[zero]
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: array[zero+1]
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:array[zero]
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 4ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
blah = 5
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 5
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 0ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
a = 'foobar'; new String(a.toCharArray(), 0, 3)
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 'foobar'
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [NewObjectNode] :: String(a.toCharArray(), 0, 3)
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
a = 100 + 1 + 1
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 100 + 1 + 1
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
populate(); blahfoo = 'sarah'; blahfoo == 'sarah'
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:populate()
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: 'sarah'
(3) OPERATOR [END_OF_STATEMENT]: 

(4) OPERATION [EQUAL] {blahfoo} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
a = 'foo'; b = 'bar'; c = 'jim'; list = {a,b,c}; list[1]
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 'foo'
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: 'bar'
(3) OPERATOR [END_OF_STATEMENT]: 

(4) NODE [AssignmentNode] :: 'jim'
(5) OPERATOR [END_OF_STATEMENT]: 

(6) NODE [AssignmentNode] :: {a,b,c}
(7) OPERATOR [END_OF_STATEMENT]: 

(8) REFERENCE :: ASTNode:list[1]
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
String mikeBrock = 1; mikeBrock
----------------------
Expression Decompile
-------------
(0) NODE [TypedVarNode] :: mikeBrock
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:mikeBrock
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
squareRoot = java.lang.Math.sqrt; squareRoot(4)
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: java.lang.Math.sqrt
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:squareRoot(4)
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 5ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
x = 1; x++; x
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 1
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [PostFixIncNode] :: 
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:x
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
x = 1; ++x
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 1
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [PreFixIncNode] :: 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
x = 2; x--; x
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 2
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [PostFixDecNode] :: 
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:x
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
x = 2; --x
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 2
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [PreFixDecNode] :: 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
java.math.BigDecimal a = new java.math.BigDecimal( 10.0 ); java.math.BigDecimal b = new java.math.BigDecimal( 10.0 ); java.math.BigDecimal c = a + b; return c; 
----------------------
Expression Decompile
-------------
(0) NODE [TypedVarNode] :: a
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [TypedVarNode] :: b
(3) OPERATOR [END_OF_STATEMENT]: 

(4) NODE [TypedVarNode] :: c
(5) OPERATOR [END_OF_STATEMENT]: 

(6) OPERATOR [RETURN]: c
(7) OPERATOR [END_OF_STATEMENT]: 

==END==
All threads have stopped.
Result Count: 1
[test] finished in: 6ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
xx = new java.util.HashMap(); xx.put('foo', 'bar'); prop = 'foo'; xx[prop];
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: new java.util.HashMap()
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:xx.put('foo', 'bar')
(3) OPERATOR [END_OF_STATEMENT]: 

(4) NODE [AssignmentNode] :: 'foo'
(5) OPERATOR [END_OF_STATEMENT]: 

(6) REFERENCE :: ASTNode:xx[prop]
(7) OPERATOR [END_OF_STATEMENT]: 

==END==
All threads have stopped.
Result Count: 1
[test] finished in: 4ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Tests run: 20, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.044 sec
Running org.mvel2.tests.core.ArithmeticTests

[test] begin test for:
----------------------
-(-1)
----------------------
Expression Decompile
-------------
(0) NODE [Sign] :: (-1)
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Expression: (100 % 90) * 20 - 15 / 16 + 80 + (50 * 21)

[test] begin test for:
----------------------
foo.number-1
----------------------
Expression Decompile
-------------
(0) OPERATION [SUBTRACT] {foo.number} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
(10 * 5) * 2 / 3
----------------------
Expression Decompile
-------------
(0) LITERAL :: 33.333333333333336'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
(100 % 3) * 2 - 1 / 1 + 8 + (5 * 2)
----------------------
Expression Decompile
-------------
(0) LITERAL :: 19.0'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
300.5 / 5.3 / 2.1 / 1.5
----------------------
Expression Decompile
-------------
(0) LITERAL :: 17.999401018268944'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Expression: 300.5 / 5.3 / 2.1 / 1.5
>>(300 * five + 1) + (100 / 2 * 2)<<

[test] begin test for:
----------------------
(100 % 3) * 2 - 1 / 1 + 8 + (5 * 2)
----------------------
Expression Decompile
-------------
(0) LITERAL :: 19.0'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
5 * (100.56 * 30.1)
----------------------
Expression Decompile
-------------
(0) LITERAL :: 15134.28'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
5 ** 2
----------------------
Expression Decompile
-------------
(0) LITERAL :: 25'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 20ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
10-5*2 + 5*8-4
----------------------
Expression Decompile
-------------
(0) LITERAL :: 36'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
100-500*200 + 500*800-400
----------------------
Expression Decompile
-------------
(0) LITERAL :: 299700'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
100-500*200*150 + 500*800-400
----------------------
Expression Decompile
-------------
(0) LITERAL :: -14600300'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 0ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
(100d * 50d) * 20d / 30d * 2d
----------------------
Expression Decompile
-------------
(0) LITERAL :: 6666.666666666667'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Expression: a = 100d; b = 50d; c = 20d; d = 30d; e = 2d; (a * b) * c / d * e
Expression: a = 100; b = 500; c = 200; d = 150; e = 500; f = 800; g = 400; a-b*c*d + e*f-g
Expression: x = 20; y = 10; z = 5; x-y-z
Expression: x = 20; y = 2; z = 2; x/y/z
Expression: 10-5*7-3*8-6

[test] begin test for:
----------------------
10-5*7-3*8-6
----------------------
Expression Decompile
-------------
(0) LITERAL :: -55'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Expression: 100-50*70-30*80-60

[test] begin test for:
----------------------
100-50*70-30*80-60
----------------------
Expression Decompile
-------------
(0) LITERAL :: -5860'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 0ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Expression: (100-50)*70-30*(20-9)**3

[test] begin test for:
----------------------
(100-50)*70-30*(20-9)**3
----------------------
Expression Decompile
-------------
(0) LITERAL :: -36430'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Expression: a = 100; b = 50; c = 70; d = 30; e = 20; f = 9; g = 3; (a-b)*c-d*(e-f)**g
Expression: 10 ** (3)*10**3

[test] begin test for:
----------------------
10 ** (3)*10**3
----------------------
Expression Decompile
-------------
(0) LITERAL :: 1000000'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Expression: 51 * 52 * 33 / 24 / 15 + 45 * 66 * 47 * 28 + 19
Expected Result: 3908782.1

[test] begin test for:
----------------------
51 * 52 * 33 / 24 / 15 + 45 * 66 * 47 * 28 + 19
----------------------
Expression Decompile
-------------
(0) LITERAL :: 3908782.1'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Expression: 51 * (40 - 1000 * 50) + 100 + 50 * 20 / 10 + 11 + 12 - 80
Expected Result: -2547817.0

[test] begin test for:
----------------------
51 * (40 - 1000 * 50) + 100 + 50 * 20 / 10 + 11 + 12 - 80
----------------------
Expression Decompile
-------------
(0) LITERAL :: -2547817.0'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Expression: 5 + 3 * 8 * 2 ** 2
Expected Result: 101

[test] begin test for:
----------------------
5 + 3 * 8 * 2 ** 2
----------------------
Expression Decompile
-------------
(0) LITERAL :: 101'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 0ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Expression: 50 + 30 * 80 * 20 ** 3 * 51
Expected Result: 9.7920005E8

[test] begin test for:
----------------------
50 + 30 * 80 * 20 ** 3 * 51
----------------------
Expression Decompile
-------------
(0) LITERAL :: 979200050'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
50 + 30 + 80 + 11 ** 2 ** 2 * 51
----------------------
Expression Decompile
-------------
(0) LITERAL :: 746851'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Expression: 10 + 20 / 4 / 4
Expression: 40 / 20 + 10 + 60 / 21
Expression: 100 + 200 - 300 + 400 - 500 + 105 / 205 - 405 + 305 * 206
CorrectResult:62325.51219512195
Expression: 147 + 60 / 167 % 448 + 36 * 23 / 166
CorrectRes: 152.34723324435467
Expression: 228 - 338 % 375 - 103 + 260 + 412 * 177 + 121
CorrectRes: 73092.0
Expression: 304d - 246d / 242d % 235d / 425d - 326d + 355d * 264d % 308d
CorrectRes: 65.99760816723386
Expression: 11d - 7d / 3d * 18d % 14d * 8d * 11d - 2d - 11d / 13d + 14d
CorrectRes: 22.153846153846153
Expression: 4d/3d*6d%8d*5d*8d+7d+9d*1d
CorrectRes: 16.0
Expression: 6d+8d/9d*1d*9d*10d%4d*4d-4d*6d*3d
CorrectRes: -66.0

[test] begin test for:
----------------------
_x_001 = 500.2; _x_002 = 200.8; _r_001 = 701; _r_001 == _x_001 + _x_002 || _x_001 == 500 + 0.1
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 500.2
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: 200.8
(3) OPERATOR [END_OF_STATEMENT]: 

(4) NODE [AssignmentNode] :: 701
(5) OPERATOR [END_OF_STATEMENT]: 

(6) NODE [Or] :: 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 6ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
_x_001 = 500.2; _x_002 = 200.8; _r_001 = 701; _r_001 == _x_001 + _x_002 && _x_001 == 500 + 0.2
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 500.2
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: 200.8
(3) OPERATOR [END_OF_STATEMENT]: 

(4) NODE [AssignmentNode] :: 701
(5) OPERATOR [END_OF_STATEMENT]: 

(6) NODE [And] :: 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
_x_001 = 500.2; _x_002 = 200.9; _r_001 = 701; _r_001 == _x_001 + _x_002 && _x_001 == 500 + 0.2
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 500.2
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: 200.9
(3) OPERATOR [END_OF_STATEMENT]: 

(4) NODE [AssignmentNode] :: 701
(5) OPERATOR [END_OF_STATEMENT]: 

(6) NODE [And] :: 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 7ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
_x_001 = 500.2; _x_002 = 200.9; _r_001 = 701; _r_001 == _x_001 + _x_002 || _x_001 == 500 + 0.2
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 500.2
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: 200.9
(3) OPERATOR [END_OF_STATEMENT]: 

(4) NODE [AssignmentNode] :: 701
(5) OPERATOR [END_OF_STATEMENT]: 

(6) NODE [Or] :: 
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
38392 % 2
----------------------
Expression Decompile
-------------
(0) LITERAL :: 0'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
2|4
----------------------
Expression Decompile
-------------
(0) LITERAL :: 6'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 0ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
(2 | 1) > 0
----------------------
Expression Decompile
-------------
(0) LITERAL :: true'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 0ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
(2|1) == 3
----------------------
Expression Decompile
-------------
(0) LITERAL :: true'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
2|five
----------------------
Expression Decompile
-------------
(0) OPERATION [BIT_OR] {} {five}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
2 & 3
----------------------
Expression Decompile
-------------
(0) LITERAL :: 2'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
five & 3
----------------------
Expression Decompile
-------------
(0) OPERATION [BIT_AND] {five} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
2 << 1
----------------------
Expression Decompile
-------------
(0) LITERAL :: 4'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
five << 1
----------------------
Expression Decompile
-------------
(0) OPERATION [BIT_SHIFT_LEFT] {five} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
-2 <<< 0
----------------------
Expression Decompile
-------------
(0) LITERAL :: 2'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
256 >> 1
----------------------
Expression Decompile
-------------
(0) LITERAL :: 128'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
five >> 1
----------------------
Expression Decompile
-------------
(0) OPERATION [BIT_SHIFT_RIGHT] {five} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
-5 >>> 1
----------------------
Expression Decompile
-------------
(0) LITERAL :: 2147483645'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
(five - 10) >>> 1
----------------------
Expression Decompile
-------------
(0) OPERATION [BIT_UNSIGNED_SHIFT_RIGHT] {five - 10} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
_zZz = 5; _zZz >>= 2
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 5
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [OperativeAssign] ::  2
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
_yYy = 10; _yYy <<= 2
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 10
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [OperativeAssign] ::  2
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
1 ^ 2
----------------------
Expression Decompile
-------------
(0) LITERAL :: 3'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
five ^ 2
----------------------
Expression Decompile
-------------
(0) OPERATION [BIT_XOR] {five} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
~10
----------------------
Expression Decompile
-------------
(0) NODE [Invert] :: 10
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 17ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
~(10 + 1)
----------------------
Expression Decompile
-------------
(0) NODE [Invert] :: (10 + 1)
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
~10 + (1 + ~50)
----------------------
Expression Decompile
-------------
(0) OPERATION [ADD] {10} {1 + ~50}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
foo.countTest+ 10
----------------------
Expression Decompile
-------------
(0) OPERATION [ADD] {foo.countTest} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
foo.countTest += 5; if (foo.countTest == 5) { foo.countTest = 0; return true; } else { foo.countTest = 0; return false; }
----------------------
Expression Decompile
-------------
(0) NODE [DeepAssignmentNode] :: 5
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NEST [IfNode]: { foo.countTest == 5 }
(3) NODE [DeepAssignmentNode] :: 0
(4) OPERATOR [END_OF_STATEMENT]: 

(5) OPERATOR [RETURN]: true
==END==NODE [IfNode] :: foo.countTest == 5
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 8ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
with (foo) { countTest += 5 }; if (foo.countTest == 5) { foo.countTest = 0; return true; } else { foo.countTest = 0; return false; }
----------------------
Expression Decompile
-------------
(0) NODE [WithNode] :: foo
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NEST [IfNode]: { foo.countTest == 5 }
(3) NODE [DeepAssignmentNode] :: 0
(4) OPERATOR [END_OF_STATEMENT]: 

(5) OPERATOR [RETURN]: true
==END==NODE [IfNode] :: foo.countTest == 5
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 15ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
int val = 5; val %= 2; val
----------------------
Expression Decompile
-------------
(0) NODE [TypedVarNode] :: val
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [OperativeAssign] ::  2
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:val
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
int val = 10; val /= 2; val
----------------------
Expression Decompile
-------------
(0) NODE [TypedVarNode] :: val
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [OperativeAssign] ::  2
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:val
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 6ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
int val = 5; val <<= 2; val
----------------------
Expression Decompile
-------------
(0) NODE [TypedVarNode] :: val
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [OperativeAssign] ::  2
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:val
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
int val = 5; val >>= 2; val
----------------------
Expression Decompile
-------------
(0) NODE [TypedVarNode] :: val
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [OperativeAssign] ::  2
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:val
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
int val = -5; val >>>= 2; val
----------------------
Expression Decompile
-------------
(0) NODE [TypedVarNode] :: val
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [OperativeAssign] ::  2
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:val
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
xx0 = 5; xx0 += 4; xx0 + 1
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 5
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [OperativeAssign] :: 4
(3) OPERATOR [END_OF_STATEMENT]: 

(4) OPERATION [ADD] {xx0} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 16ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
xx0 = 5; xx0 =+ 4; xx0 + 1
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 5
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [OperativeAssign] ::  4
(3) OPERATOR [END_OF_STATEMENT]: 

(4) OPERATION [ADD] {xx0} {}
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
xx0 = 20; xx0 /= 10; xx0
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 20
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [OperativeAssign] ::  10
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:xx0
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
xx0 = 6; xx0 *= 6; xx0
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 6
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [OperativeAssign] ::  6
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:xx0
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
xx0 = 15; xx0 -= 4; xx0
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 15
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [OperativeAssign] ::  4
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:xx0
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
xx0 = 5; xx0 =- 100
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 5
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [OperativeAssign] ::  100
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
"foo" + true
----------------------
Expression Decompile
-------------
(0) LITERAL :: footrue'
==END==
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Evaluating 'bal - 80 - 90 - 30': ......
Evaluating 'bal-80-90-30': ......
Evaluating '100 + 80 == 180': ......
Evaluating '100+80==180': ......
Evaluating 'bal / 80 * 80': ......
Evaluating 'bal - 1 + "abc"': ......
Tests run: 119, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.196 sec
Running org.mvel2.tests.core.MacroProcessorTest
Expression Decompile
-------------
(0) DEBUG_SYMBOL :: [SourceLine:1]
(1) REFERENCE :: ASTNode:System.out.println('hello')
(2) OPERATOR [END_OF_STATEMENT]: 

(3) DEBUG_SYMBOL :: [SourceLine:2]
(4) REFERENCE :: ASTNode:System.out.println('bye')
(5) OPERATOR [END_OF_STATEMENT]: 

(6) DEBUG_SYMBOL :: [SourceLine:3]
(7) NODE [InterceptorWrapper] :: 
(8) DEBUG_SYMBOL :: [SourceLine:4]
(9) OPERATOR [END_OF_STATEMENT]: 

(10) DEBUG_SYMBOL :: [SourceLine:5]
(11) REFERENCE :: ASTNode:mod
==END==
hello
bye
test.mv:3
test.mv:4
test.mv:5
test.mv:1
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec
Running org.mvel2.tests.core.IntegrationTests
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec
Running org.mvel2.tests.core.CoreConfidenceTests

[test] begin test for:
----------------------
set = new java.util.LinkedHashSet(); set.add('foo');set.add('bar');output = '';foreach (item : set) {output = output + item + ' ';} foreach (item : set) {output = output + item + ' ';} output = output.trim();if (set.size() == 2) { return output; }
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: new java.util.LinkedHashSet()
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:set.add('foo')
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:set.add('bar')
(5) OPERATOR [END_OF_STATEMENT]: 

(6) NODE [AssignmentNode] :: ''
(7) OPERATOR [END_OF_STATEMENT]: 

(8) NODE [ForEachNode] ::  set
(9) OPERATOR [END_OF_STATEMENT]: 

(10) NODE [ForEachNode] ::  set
(11) OPERATOR [END_OF_STATEMENT]: 

(12) NODE [AssignmentNode] :: output.trim()
(13) OPERATOR [END_OF_STATEMENT]: 

(14) NODE [IfNode] :: set.size() == 2
==END==
unittest:1
unittest:1
unittest:1
unittest:1
unittest:-1
All threads have stopped.
Result Count: 1
[test] finished in: 8ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
l = new java.util.LinkedList(); l.add('fun'); l.add('happy'); l.add('fun'); l.add('slide');l.add('crap'); poo = new java.util.ArrayList(l); poo.size();
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: new java.util.LinkedList()
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:l.add('fun')
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:l.add('happy')
(5) OPERATOR [END_OF_STATEMENT]: 

(6) REFERENCE :: ASTNode:l.add('fun')
(7) OPERATOR [END_OF_STATEMENT]: 

(8) REFERENCE :: ASTNode:l.add('slide')
(9) OPERATOR [END_OF_STATEMENT]: 

(10) REFERENCE :: ASTNode:l.add('crap')
(11) OPERATOR [END_OF_STATEMENT]: 

(12) NODE [AssignmentNode] :: new java.util.ArrayList(l)
(13) OPERATOR [END_OF_STATEMENT]: 

(14) REFERENCE :: ASTNode:poo.size()
(15) OPERATOR [END_OF_STATEMENT]: 

==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 8ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
l = new java.util.ArrayList(); l.add('plop'); l.add('poo'); m = new java.util.HashMap();m.put('foo', l); m.put('cah', 'mah'); m.put('bar', 'foo'); m.put('sarah', 'mike');m.put('edgar', 'poe'); if (m.edgar == 'poe') { return m.foo[1] + m.size(); }
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: new java.util.ArrayList()
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:l.add('plop')
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:l.add('poo')
(5) OPERATOR [END_OF_STATEMENT]: 

(6) NODE [AssignmentNode] :: new java.util.HashMap()
(7) OPERATOR [END_OF_STATEMENT]: 

(8) REFERENCE :: ASTNode:m.put('foo', l)
(9) OPERATOR [END_OF_STATEMENT]: 

(10) REFERENCE :: ASTNode:m.put('cah', 'mah')
(11) OPERATOR [END_OF_STATEMENT]: 

(12) REFERENCE :: ASTNode:m.put('bar', 'foo')
(13) OPERATOR [END_OF_STATEMENT]: 

(14) REFERENCE :: ASTNode:m.put('sarah', 'mike')
(15) OPERATOR [END_OF_STATEMENT]: 

(16) REFERENCE :: ASTNode:m.put('edgar', 'poe')
(17) OPERATOR [END_OF_STATEMENT]: 

(18) NODE [IfNode] :: m.edgar == 'poe'
==END==
unittest:1
unittest:1
unittest:1
unittest:1
unittest:-1
All threads have stopped.
Result Count: 1
[test] finished in: 13ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
stk = new java.util.Stack();stk.push(5);stk.push(5);stk.pop() + stk.pop();
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: new java.util.Stack()
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:stk.push(5)
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:stk.push(5)
(5) OPERATOR [END_OF_STATEMENT]: 

(6) OPERATION [ADD] {stk.pop()} {stk.pop()}
(7) OPERATOR [END_OF_STATEMENT]: 

==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 7ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
a = 0;
System.out.println('This is a test');
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 0
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:System.out.println('This is a test')
(3) OPERATOR [END_OF_STATEMENT]: 

==END==
This is a test
This is a test
This is a test
This is a test
This is a test
unittest:1
unittest:2
This is a test
unittest:1
unittest:2
This is a test
unittest:1
unittest:2
unittest:1
This is a test
All threads have stopped.
Result Count: 1
[test] finished in: 4ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
hour-1
----------------------
Expression Decompile
-------------
(0) OPERATION [SUBTRACT] {hour} {}
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
[Error: unable to resolve method using strict-mode: java.lang.Object.foo()]
[Near : {... a.foo; ....}]
               ^
[Line: 1, Column: 3]
	at org.mvel2.compiler.PropertyVerifier.getMethod(PropertyVerifier.java:580)
	at org.mvel2.compiler.PropertyVerifier.getBeanProperty(PropertyVerifier.java:288)
	at org.mvel2.compiler.PropertyVerifier.analyze(PropertyVerifier.java:117)
	at org.mvel2.compiler.ExpressionCompiler.verify(ExpressionCompiler.java:373)
	at org.mvel2.compiler.ExpressionCompiler._compile(ExpressionCompiler.java:266)
	at org.mvel2.compiler.ExpressionCompiler.compile(ExpressionCompiler.java:52)
	at org.mvel2.tests.core.CoreConfidenceTests.testStrictTypingCompilation(CoreConfidenceTests.java:334)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:243)
	at junit.framework.TestSuite.run(TestSuite.java:238)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:35)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:115)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)

[test] begin test for:
----------------------
map = new java.util.HashMap(); map['test'] = 'foo'; map['test'];
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: new java.util.HashMap()
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: 'foo'
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:map['test']
(5) OPERATOR [END_OF_STATEMENT]: 

==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
foo.bar.testList.add(new String()); foo.bar.testList == empty
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:foo.bar.testList.add(new String())
(1) OPERATOR [END_OF_STATEMENT]: 

(2) OPERATION [EQUAL] {foo.bar.testList} {}
==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 10ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
a = new java.util.ArrayList(); a.add('foo'); a.add('BAR'); a[1] = 'bar'; a[1]
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: new java.util.ArrayList()
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:a.add('foo')
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:a.add('BAR')
(5) OPERATOR [END_OF_STATEMENT]: 

(6) NODE [AssignmentNode] :: 'bar'
(7) OPERATOR [END_OF_STATEMENT]: 

(8) REFERENCE :: ASTNode:a[1]
==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 6ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
System.out.println('1)your guess was:');
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:System.out.println('1)your guess was:')
(1) OPERATOR [END_OF_STATEMENT]: 

==END==
1)your guess was:
1)your guess was:
1)your guess was:
1)your guess was:
1)your guess was:
unittest:1
1)your guess was:
unittest:1
1)your guess was:
unittest:1
unittest:1
1)your guess was:
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
new String(new String(new String("foo")));
----------------------
Expression Decompile
-------------
(0) NODE [NewObjectNode] :: String(new String(new String("foo")))
(1) OPERATOR [END_OF_STATEMENT]: 

==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 4ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
(String) 10
----------------------
Expression Decompile
-------------
(0) NODE [TypeCast] ::  10
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
map = new java.util.HashMap(); map.put('doggie', new java.util.ArrayList()); ((java.util.ArrayList) map['doggie']).size()
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: new java.util.HashMap()
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:map.put('doggie', new java.util.ArrayList())
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: Union:size()
==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 4ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
java.util.Map map = new java.util.HashMap(); map.put('conan', 'foobar'); map['conan'];
----------------------
Expression Decompile
-------------
(0) NODE [TypedVarNode] :: map
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:map.put('conan', 'foobar')
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:map['conan']
(5) OPERATOR [END_OF_STATEMENT]: 

==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 4ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
list = [java.lang.Integer.MIN_VALUE]; list[0]
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: [java.lang.Integer.MIN_VALUE]
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:list[0]
==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 4ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
5 > 6 && 2 < 1 || 10 > 9
----------------------
Expression Decompile
-------------
(0) NODE [Or] :: 
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 0ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
( order.number == 1 || order.number == ( 1+1) || order.number == $id )
----------------------
Expression Decompile
-------------
(0) NODE [Substatement] :: order.number == 1 || order.number == ( 1+1) || order.number == $id
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 10ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
source.mv:1
bean.today: Thu Jul 30 19:37:57 UTC 2020
formatDate(bean.today): 07/30/20
formatString(bean.nullString): <NULL>
bean.myDate = bean.nullDate: null
formatDate(bean.myDate): null
null
org.mvel2.tests.core.res.WorkingMemoryImpl@51e37590

[test] begin test for:
----------------------
BWAH
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:BWAH
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 0ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
hour == (hour + 0)
----------------------
Expression Decompile
-------------
(0) OPERATION [EQUAL] {hour} {hour + 0}
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
import java.util.HashMap; HashMap;
----------------------
Expression Decompile
-------------
(0) NODE [ImportNode] :: java.util.HashMap
(1) OPERATOR [END_OF_STATEMENT]: 

(2) LITERAL :: class java.util.HashMap'
(3) OPERATOR [END_OF_STATEMENT]: 

==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
import_static java.lang.Math.sqrt; sqrt(4)
----------------------
Expression Decompile
-------------
(0) NODE [StaticImportNode] :: java.lang.Math.sqrt
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:sqrt(4)
==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
BEFORE Node: System.out.println('MIDDLE')
MIDDLE
AFTER Node: System.out.println('MIDDLE')
null
null
foo
bar
org.mvel2.tests.core.res.Foo@e8fadb0
null

[test] begin test for:
----------------------
Foo244 = String; new Foo244('foobar')
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: String
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [NewObjectNode] :: Foo244('foobar')
==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
if ((x15 = foo.bar) == foo.bar && x15 == foo.bar) { return 'HelloWorld'; } else { return 'GoodbyeWorld' } 
----------------------
Expression Decompile
-------------
(0) NODE [IfNode] :: (x15 = foo.bar) == foo.bar && x15 == foo.bar
(1) OPERATOR [END_OF_STATEMENT]: 

==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 5ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
result = org.mvel2.MVEL.eval('10 * 3'); result == (10 * 3);
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: org.mvel2.MVEL.eval('10 * 3')
(1) OPERATOR [END_OF_STATEMENT]: 

(2) OPERATION [EQUAL] {result} {}
(3) OPERATOR [END_OF_STATEMENT]: 

==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
FooClassRef = foo.getClass(); fooInst = new FooClassRef(); name = org.mvel2.MVEL.eval('name', fooInst); return name == 'dog'
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: foo.getClass()
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: new FooClassRef()
(3) OPERATOR [END_OF_STATEMENT]: 

(4) NODE [AssignmentNode] :: org.mvel2.MVEL.eval('name', fooInst)
(5) OPERATOR [END_OF_STATEMENT]: 

(6) OPERATOR [RETURN]: name == 'dog'
==END==
unittest:1
unittest:1
unittest:1
unittest:1
unittest:-1
All threads have stopped.
Result Count: 1
[test] finished in: 4ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
exprString = '250' + ' ' + '*' + ' ' + '2'; compiledExpr = org.mvel2.MVEL.compileExpression(exprString); return org.mvel2.MVEL.executeExpression(compiledExpr);
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: '250' + ' ' + '*' + ' ' + '2'
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: org.mvel2.MVEL.compileExpression(exprString)
(3) OPERATOR [END_OF_STATEMENT]: 

(4) OPERATOR [RETURN]: org.mvel2.MVEL.executeExpression(compiledExpr)
(5) OPERATOR [END_OF_STATEMENT]: 

==END==
unittest:1
unittest:1
unittest:1
unittest:1
unittest:-1
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
'foobar'.toUpperCase();
----------------------
Expression Decompile
-------------
(0) REFERENCE :: Union:toUpperCase()
(1) OPERATOR [END_OF_STATEMENT]: 

==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
'someString'.intern(); 'someString'.hashCode() == 'someString'.hashCode();
----------------------
Expression Decompile
-------------
(0) REFERENCE :: Union:intern()
(1) OPERATOR [END_OF_STATEMENT]: 

(2) OPERATION [EQUAL] {hashCode()} {hashCode()}
(3) OPERATOR [END_OF_STATEMENT]: 

==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 4ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
_abc = 'someString'.hashCode(); _xyz = _abc + 1; _abc == _xyz
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 'someString'.hashCode()
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: _abc + 1
(3) OPERATOR [END_OF_STATEMENT]: 

(4) OPERATION [EQUAL] {_abc} {_xyz}
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
(_abc = (_xyz = 'someString'.hashCode()) + 1); _abc == _xyz
----------------------
Expression Decompile
-------------
(0) NODE [Substatement] :: _abc = (_xyz = 'someString'.hashCode()) + 1
(1) OPERATOR [END_OF_STATEMENT]: 

(2) OPERATION [EQUAL] {_abc} {_xyz}
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
true||false||false
----------------------
Expression Decompile
-------------
(0) NODE [Or] :: 
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
equalityCheck(1,1)||fun||ackbar
----------------------
Expression Decompile
-------------
(0) NODE [Or] :: 
==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
a = 'foobar'; a[4] == 'a'
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 'foobar'
(1) OPERATOR [END_OF_STATEMENT]: 

(2) OPERATION [EQUAL] {a[4]} {}
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
import java.io.*; BufferedReader
----------------------
Expression Decompile
-------------
(0) NODE [ImportNode] :: java.io.*
(1) OPERATOR [END_OF_STATEMENT]: 

(2) LITERAL :: class java.io.BufferedReader'
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
var barfoo = 'FOO_BAR'; return barfoo;
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 'FOO_BAR'
(1) OPERATOR [END_OF_STATEMENT]: 

(2) OPERATOR [RETURN]: barfoo
(3) OPERATOR [END_OF_STATEMENT]: 

==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
x = (10) + (5); x
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: (10) + (5)
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:x
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
java.lang.Integer number = (java.lang.Integer) '1';
----------------------
Expression Decompile
-------------
(0) NODE [TypedVarNode] :: number
(1) OPERATOR [END_OF_STATEMENT]: 

==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
First evaluation: true
Second evaluation: true

[test] begin test for:
----------------------
(char[]) 'abcd'
----------------------
Expression Decompile
-------------
(0) NODE [TypeCast] ::  'abcd'
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
_xyxy = (char[]) 'abcd'; _xyxy[0] == 'a'
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: (char[]) 'abcd'
(1) OPERATOR [END_OF_STATEMENT]: 

(2) OPERATION [EQUAL] {_xyxy[0]} {}
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
char[] _c___ = new char[10]; _c___ instanceof char[]
----------------------
Expression Decompile
-------------
(0) NODE [TypedVarNode] :: _c___
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [Instance] :: 
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
java.math.BigDecimal axx = new java.math.BigDecimal( 10.0 ); java.math.BigDecimal bxx = new java.math.BigDecimal( 10.0 ); java.math.BigDecimal cxx = axx + bxx; return cxx; 
----------------------
Expression Decompile
-------------
(0) NODE [TypedVarNode] :: axx
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [TypedVarNode] :: bxx
(3) OPERATOR [END_OF_STATEMENT]: 

(4) NODE [TypedVarNode] :: cxx
(5) OPERATOR [END_OF_STATEMENT]: 

(6) OPERATOR [RETURN]: cxx
(7) OPERATOR [END_OF_STATEMENT]: 

==END==
unittest:1
unittest:1
unittest:1
unittest:1
unittest:-1
All threads have stopped.
Result Count: 1
[test] finished in: 4ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
array param method called!
sigle param method called!

[test] begin test for:
----------------------
foo.sampleBean.bar.name
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:foo.sampleBean.bar.name
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 5ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
[Error: cannot assign type java.lang.Integer to org.mvel2.tests.core.res.Bar]
[Near : {... foo.bar = 0 ....}]
             ^
[Line: 1, Column: 1]
	at org.mvel2.compiler.ExpressionCompiler.verify(ExpressionCompiler.java:436)
	at org.mvel2.compiler.ExpressionCompiler._compile(ExpressionCompiler.java:266)
	at org.mvel2.compiler.ExpressionCompiler.compile(ExpressionCompiler.java:52)
	at org.mvel2.tests.core.CoreConfidenceTests.testSetAccessorOverloadedEqualsStrictMode(CoreConfidenceTests.java:1551)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:243)
	at junit.framework.TestSuite.run(TestSuite.java:238)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:35)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:115)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)

[test] begin test for:
----------------------
hour++ < 61 && hour == 61
----------------------
Expression Decompile
-------------
(0) NODE [And] :: 
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
++hour == 61
----------------------
Expression Decompile
-------------
(0) OPERATION [EQUAL] {} {}
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 0ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
10l
----------------------
Expression Decompile
-------------
(0) LITERAL :: 10'
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 6ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
char chr; chr = 100; chr
----------------------
Expression Decompile
-------------
(0) NODE [DeclTypedVarNode] :: chr
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: 100
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:chr
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 6ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
{'foo', 'test'}[1]
----------------------
Expression Decompile
-------------
(0) REFERENCE :: Union:[1]
==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
org.mvel2.tests.core.CoreConfidenceTests.minim( new double[] {456.2, 2.3} ) == 2.3
----------------------
Expression Decompile
-------------
(0) OPERATION [EQUAL] {org.mvel2.tests.core.CoreConfidenceTests.minim( new double[] {456.2, 2.3} )} {}
==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
foo.toUC("abcd").equals("ABCD")
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:foo.toUC("abcd").equals("ABCD")
==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
c = 'str'; if (c is String) { true; } else { false; } 
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 'str'
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [IfNode] :: c is String
(3) OPERATOR [END_OF_STATEMENT]: 

==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
>a
>a
>a
>a
dog is running
cat is running

[test] begin test for:
----------------------
import org.mvel2.tests.core.CoreConfidenceTests; CoreConfidenceTests.Fruit.Apple
----------------------
Expression Decompile
-------------
(0) NODE [ImportNode] :: org.mvel2.tests.core.CoreConfidenceTests
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:CoreConfidenceTests.Fruit.Apple
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 8ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
list = new java.util.ArrayList(); list.add(new String('foo')); list[0]
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: new java.util.ArrayList()
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:list.add(new String('foo'))
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:list[0]
==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 5ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
false
interpreted: true
result: [13, 49, 15, 52, 20, 30, 8, 32, 21, 4, 43, 47, 0, 39, 10, 51, 1, 33, 38, 42, 46, 14, 27, 2, 6, 31, 3, 19, 24, 12, 9, 28, 50, 22, 5, 34, 40, 11, 18, 17, 35, 23, 16, 36, 48, 37, 45, 7, 41, 29, 44, 26, 25]

[test] begin test for:
----------------------
!new Boolean(true)
----------------------
Expression Decompile
-------------
(0) NODE [Negation] :: new Boolean(true)
==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
!isdef _foozy_
----------------------
Expression Decompile
-------------
(0) NODE [Negation] :: isdef _foozy_
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
i: 0
i: 1
i: 2
i: 3
i: 4
i: 5
i: 6
i: 7
i: 8
i: 9
i: 10
i: 11
i: 12
i: 13
i: 14
i: 15
i: 16
i: 17
i: 18
i: 19
i: 20
i: 21
i: 22
i: 23
i: 24
i: 25
i: 26
i: 27
i: 28
i: 29
i: 30
i: 31
i: 32
i: 33
i: 34
i: 35
i: 36
i: 37
i: 38
i: 39
i: 40
i: 41
i: 42
i: 43
i: 44
i: 45
i: 46
i: 47
i: 48
i: 49
i: 50
i: 51
i: 52
i: 53
i: 54
i: 55
i: 56
i: 57
i: 58
i: 59
i: 60
i: 61
i: 62
i: 63
i: 64
i: 65
i: 66
i: 67
i: 68
i: 69
i: 70
i: 71
i: 72
i: 73
i: 74
i: 75
i: 76
i: 77
i: 78
i: 79
i: 80
i: 81
i: 82
i: 83
i: 84
i: 85
i: 86
i: 87
i: 88
i: 89
i: 90
i: 91
i: 92
i: 93
i: 94
i: 95
i: 96
i: 97
i: 98
i: 99
i: 0
i: 1
i: 2
i: 3
i: 4
i: 5
i: 6
i: 7
i: 8
i: 9
i: 10
i: 11
i: 12
i: 13
i: 14
i: 15
i: 16
i: 17
i: 18
i: 19
i: 20
i: 21
i: 22
i: 23
i: 24
i: 25
i: 26
i: 27
i: 28
i: 29
i: 30
i: 31
i: 32
i: 33
i: 34
i: 35
i: 36
i: 37
i: 38
i: 39
i: 40
i: 41
i: 42
i: 43
i: 44
i: 45
i: 46
i: 47
i: 48
i: 49
i: 50
i: 51
i: 52
i: 53
i: 54
i: 55
i: 56
i: 57
i: 58
i: 59
i: 60
i: 61
i: 62
i: 63
i: 64
i: 65
i: 66
i: 67
i: 68
i: 69
i: 70
i: 71
i: 72
i: 73
i: 74
i: 75
i: 76
i: 77
i: 78
i: 79
i: 80
i: 81
i: 82
i: 83
i: 84
i: 85
i: 86
i: 87
i: 88
i: 89
i: 90
i: 91
i: 92
i: 93
i: 94
i: 95
i: 96
i: 97
i: 98
i: 99
private!
private!
private!
private!
private!
private!
private!
public!
public!
public!
public!
public!
1 -> 2
2 -> 2
3 -> 2
1 -> 2
2 -> 2
3 -> 2
1 -> 2
2 -> 2
3 -> 2
1 -> 2
2 -> 2
3 -> 2
returned value: 5
returned value: FOO2
Process started
Name
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:ord(true,-1)
==END==
num: -1
num: -1
num: -1
num: -1
num: -1
unittest:1
num: -1
unittest:1
num: -1
unittest:1
unittest:1
num: -1
Evaluating 'bal > 200 or bal < 100': ......
Evaluating 'bal > 200 || bal < 100': ......
Evaluating 'bal < 100 and bal > 200': ......
Evaluating 'bal < 100 && bal > 200': ......
Evaluating 'bal > 200 and bal < 100': ......
Evaluating 'bal > 200 && bal < 100': ......
44247.78761061946902654867256637168
org.mvel2.tests.core.res.Foo
org.mvel2.tests.core.res.Foo
Thursday
Thursday
 bar
[a, b, c]

Expression Decompile
-------------
(0) NODE [ImportNode] :: org.mvel2.tests.core.res.AStatic
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: null
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:AStatic.process(a)
==END==
unittest:1
unittest:1
unittest:1
unittest:1
Expression Decompile
-------------
(0) NODE [ImportNode] :: org.mvel2.tests.core.res.AStatic
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:AStatic.process("hello","world")
==END==
unittest:1
unittest:1
unittest:1
unittest:1
Expression Decompile
-------------
(0) NODE [ImportNode] :: org.mvel2.tests.core.res.AStatic
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:AStatic.process()
==END==
unittest:1
unittest:1
unittest:1
Expression Decompile
-------------
(0) NODE [ImportNode] :: org.mvel2.tests.core.res.AStatic
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:AStatic.process(null)
==END==
unittest:1
unittest:1
unittest:1
unittest:1
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:String.format("xxx")
==END==
unittest:1
unittest:1
unittest:1
unittest:1
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:String.format("%010d", 123)
==END==
unittest:1
unittest:1
unittest:1
unittest:1
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: new Object[1]
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: 123
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:String.format("%010d", a)
==END==
unittest:1
unittest:1
unittest:1
unittest:1
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 123
(1) OPERATOR [END_OF_STATEMENT]: 

(2) REFERENCE :: ASTNode:String.format("%010d", a)
==END==
unittest:1
unittest:1
unittest:1
unittest:1
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 123
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: 456
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:String.format("%010d -- %010d", {a, b})
==END==
unittest:1
unittest:1
unittest:1
unittest:1
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: new Object[2]
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: 123
(3) OPERATOR [END_OF_STATEMENT]: 

(4) NODE [AssignmentNode] :: 456
(5) OPERATOR [END_OF_STATEMENT]: 

(6) REFERENCE :: ASTNode:String.format("%010d -- %010d", a)
==END==
unittest:1
unittest:1
unittest:1
unittest:1
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:String.format("%010d -- %010d", 123, 456)
==END==
unittest:1
unittest:1
unittest:1
unittest:1
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 123
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: 456
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:String.format("%010d -- %010d", a, b)
==END==
unittest:1
unittest:1
unittest:1
unittest:1
Expression Decompile
-------------
(0) NODE [ImportNode] :: org.mvel2.tests.core.CoreConfidenceTests.A
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [ImportNode] :: org.mvel2.tests.core.CoreConfidenceTests.B
(3) OPERATOR [END_OF_STATEMENT]: 

(4) NODE [NewObjectNode] :: A().invoke("s1", "s2")
==END==
unittest:1
unittest:2
unittest:3
unittest:1
unittest:2
unittest:3
unittest:1
unittest:2
unittest:3
unittest:1
Expression Decompile
-------------
(0) NODE [ImportNode] :: org.mvel2.tests.core.CoreConfidenceTests.A
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [ImportNode] :: org.mvel2.tests.core.CoreConfidenceTests.B
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:A.invokeSum(3)
==END==
unittest:1
unittest:2
unittest:3
unittest:1
unittest:2
unittest:3
unittest:1
unittest:2
unittest:3
unittest:1
Expression Decompile
-------------
(0) NODE [ImportNode] :: org.mvel2.tests.core.CoreConfidenceTests.A
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [ImportNode] :: org.mvel2.tests.core.CoreConfidenceTests.B
(3) OPERATOR [END_OF_STATEMENT]: 

(4) NODE [NewObjectNode] :: A().invoke("s1", "s2", new B(), new B(), new B())
==END==
unittest:1
unittest:2
unittest:3
unittest:1
unittest:2
unittest:3
unittest:1
unittest:2
unittest:3
unittest:1
Expression Decompile
-------------
(0) NODE [ImportNode] :: org.mvel2.tests.core.CoreConfidenceTests.A
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [ImportNode] :: org.mvel2.tests.core.CoreConfidenceTests.B
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:A.invokeSum(3, new B(4), new B(5))
==END==
unittest:1
unittest:2
unittest:3
unittest:1
unittest:2
unittest:3
unittest:1
unittest:2
unittest:3
unittest:1
java.lang.StringIndexOutOfBoundsException: String index out of range: -1
	at java.lang.String.substring(String.java:1927)
	at org.mvel2.util.ErrorUtil.rewriteIfNeeded(ErrorUtil.java:17)
	at org.mvel2.compiler.ExpressionCompiler._compile(ExpressionCompiler.java:295)
	at org.mvel2.compiler.ExpressionCompiler.compile(ExpressionCompiler.java:52)
	at org.mvel2.MVEL.compileExpression(MVEL.java:810)
	at org.mvel2.tests.core.CoreConfidenceTests.expressionReturnType(CoreConfidenceTests.java:3940)
	at org.mvel2.tests.core.CoreConfidenceTests.wrongExpressionMustFail(CoreConfidenceTests.java:3928)
	at org.mvel2.tests.core.CoreConfidenceTests.testWrongExpressions(CoreConfidenceTests.java:3923)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:243)
	at junit.framework.TestSuite.run(TestSuite.java:238)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:35)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:115)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
Expression Decompile
-------------
(0) LITERAL :: 110.0'
==END==
unittest:1
unittest:1
unittest:1
Expression Decompile
-------------
(0) LITERAL :: 90.0'
==END==
unittest:1
unittest:1
unittest:1
Expression Decompile
-------------
(0) LITERAL :: 10.01'
==END==
unittest:1
unittest:1
unittest:1
1
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:System.out.println("Hello World")
(1) OPERATOR [END_OF_STATEMENT]: 

==END==
Hello World
Hello World
Hello World
Hello World
Hello World
unittest:1
Hello World
unittest:1
Hello World
unittest:1
unittest:1
Hello World
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:System.out.myPrintln("Hello World")
(1) OPERATOR [END_OF_STATEMENT]: 

==END==
Hello World
Hello World
Hello World
Hello World
Hello World
unittest:1
Hello World
unittest:1
Hello World
unittest:1
unittest:1
Hello World
1.00

[test] begin test for:
----------------------

2x * 3

----------------------
Expression Decompile
-------------
(0) OPERATION [MULTIPLY] {2x} {}
==END==
[Error: could not access: 2x; in class: org.mvel2.tests.core.res.Base]
[Near : {... 2x * 3 ....}]
              ^
[Line: 2, Column: 1]
	at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(ReflectiveAccessorOptimizer.java:707)
	at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain(ReflectiveAccessorOptimizer.java:360)
	at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(ReflectiveAccessorOptimizer.java:163)
	at org.mvel2.ast.ASTNode.optimize(ASTNode.java:159)
	at org.mvel2.ast.ASTNode.getReducedValueAccelerated(ASTNode.java:115)
	at org.mvel2.ast.BinaryOperation.getReducedValueAccelerated(BinaryOperation.java:117)
	at org.mvel2.compiler.ExecutableAccessor.getValue(ExecutableAccessor.java:42)
	at org.mvel2.MVEL.executeExpression(MVEL.java:921)
	at org.mvel2.tests.core.AbstractTest._test(AbstractTest.java:365)
	at org.mvel2.tests.core.AbstractTest.runSingleTest(AbstractTest.java:265)
	at org.mvel2.tests.core.AbstractTest$TestRunner.run(AbstractTest.java:253)
	at java.lang.Thread.run(Thread.java:748)
	at org.mvel2.tests.core.AbstractTest.test(AbstractTest.java:152)
	at org.mvel2.tests.core.CoreConfidenceTests.testCompilerExceptionFormatting(CoreConfidenceTests.java:4447)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:243)
	at junit.framework.TestSuite.run(TestSuite.java:238)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:35)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:115)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
unittest:2
unittest:2
unittest:2
Expression Decompile
-------------
(0) DEBUG_SYMBOL :: [SourceLine:2]
(1) OPERATION [MULTIPLY] {2x} {}
==END==
thread terminating due to exception
java.lang.AssertionError: Detailed Failure Report:

FIRST TEST: { 
2x * 3
 }: EXCEPTION REPORT: 

[Error: [Error: could not access: 2x; in class: org.mvel2.tests.core.res.Base]
[Near : {... 2x * 3 ....}]
             ^
[Line: 1, Column: 1]]
[Near : {... 2x * 3 ....}]
             ^
[Line: 1, Column: 1]
	at org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor(ASMAccessorOptimizer.java:892)
	at org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer.optimizeAccessor(ASMAccessorOptimizer.java:268)
	at org.mvel2.ast.ASTNode.optimize(ASTNode.java:159)
	at org.mvel2.ast.ASTNode.getReducedValueAccelerated(ASTNode.java:115)
	at org.mvel2.ast.BinaryOperation.getReducedValueAccelerated(BinaryOperation.java:117)
	at org.mvel2.MVELRuntime.execute(MVELRuntime.java:85)
	at org.mvel2.compiler.CompiledExpression.getDirectValue(CompiledExpression.java:123)
	at org.mvel2.compiler.CompiledExpression.getValue(CompiledExpression.java:119)
	at org.mvel2.compiler.CompiledExpression.getValue(CompiledExpression.java:113)
	at org.mvel2.MVEL.executeExpression(MVEL.java:921)
	at org.mvel2.tests.core.AbstractTest._test(AbstractTest.java:295)
	at org.mvel2.tests.core.AbstractTest.runSingleTest(AbstractTest.java:265)
	at org.mvel2.tests.core.AbstractTest$TestRunner.run(AbstractTest.java:253)
	at java.lang.Thread.run(Thread.java:748)
	at org.mvel2.tests.core.AbstractTest.test(AbstractTest.java:152)
	at org.mvel2.tests.core.CoreConfidenceTests.testCompilerExceptionFormatting(CoreConfidenceTests.java:4447)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TAestResult.rll threuanPds have stoppedrotected(TestResult.j.
Result Count: 0
[test] finished in: 6ms (execution count: 8 [mixead vamo:128)
	at jdunit.es])fra
mework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:243)
	at junit.framework.TestSuite.run(TestSuite.java:238)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:35)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:115)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
Caused by: [Error: could not access: 2x; in class: org.mvel2.tests.core.res.Base]
[Near : {... 2x * 3 ....}]
             ^
[Line: 1, Column: 1]
	at org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(ASMAccessorOptimizer.java:1248)
	at org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor(ASMAccessorOptimizer.java:779)
	... 40 more

SECOND TEST: { 
2x * 3
 }: EXCEPTION REPORT: 

[Error: [Error: could not access: 2x; in class: org.mvel2.tests.core.res.Base]
[Near : {... 2x * 3 ....}]
             ^
[Line: 1, Column: 1]]
[Near : {... 2x * 3 ....}]
             ^
[Line: 1, Column: 1]
	at org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor(ASMAccessorOptimizer.java:892)
	at org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer.optimizeAccessor(ASMAccessorOptimizer.java:268)
	at org.mvel2.ast.ASTNode.optimize(ASTNode.java:159)
	at org.mvel2.ast.ASTNode.getReducedValueAccelerated(ASTNode.java:115)
	at org.mvel2.ast.BinaryOperation.getReducedValueAccelerated(BinaryOperation.java:117)
	at org.mvel2.MVELRuntime.execute(MVELRuntime.java:85)
	at org.mvel2.compiler.CompiledExpression.getDirectValue(CompiledExpression.java:123)
	at org.mvel2.compiler.CompiledExpression.getValue(CompiledExpression.java:119)
	at org.mvel2.MVEL.executeExpression(MVEL.java:921)
	at org.mvel2.tests.core.AbstractTest._test(AbstractTest.java:307)
	at org.mvel2.tests.core.AbstractTest.runSingleTest(AbstractTest.java:265)
	at org.mvel2.tests.core.AbstractTest$TestRunner.run(AbstractTest.java:253)
	at java.lang.Thread.run(Thread.java:748)
	at org.mvel2.tests.core.AbstractTest.test(AbstractTest.java:152)
	at org.mvel2.tests.core.CoreConfidenceTests.testCompilerExceptionFormatting(CoreConfidenceTests.java:4447)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:243)
	at junit.framework.TestSuite.run(TestSuite.java:238)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:35)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:115)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
Caused by: [Error: could not access: 2x; in class: org.mvel2.tests.core.res.Base]
[Near : {... 2x * 3 ....}]
             ^
[Line: 1, Column: 1]
	at org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(ASMAccessorOptimizer.java:1248)
	at org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor(ASMAccessorOptimizer.java:779)
	... 39 more

THIRD TEST: { 
2x * 3
 }: EXCEPTION REPORT: 

[Error: could not access: 2x; in class: org.mvel2.tests.core.res.Base]
[Near : {... 2x * 3 ....}]
              ^
[Line: 2, Column: 1]
	at org.mvel2.PropertyAccessor.getBeanProperty(PropertyAccessor.java:679)
	at org.mvel2.PropertyAccessor.getNormal(PropertyAccessor.java:178)
	at org.mvel2.PropertyAccessor.get(PropertyAccessor.java:145)
	at org.mvel2.PropertyAccessor.get(PropertyAccessor.java:125)
	at org.mvel2.ast.ASTNode.getReducedValue(ASTNode.java:187)
	at org.mvel2.MVELInterpretedRuntime.parseAndExecuteInterpreted(MVELInterpretedRuntime.java:101)
	at org.mvel2.MVELInterpretedRuntime.parse(MVELInterpretedRuntime.java:47)
	at org.mvel2.MVEL.eval(MVEL.java:185)
	at org.mvel2.tests.core.AbstractTest._test(AbstractTest.java:321)
	at org.mvel2.tests.core.AbstractTest.runSingleTest(AbstractTest.java:265)
	at org.mvel2.tests.core.AbstractTest$TestRunner.run(AbstractTest.java:253)
	at java.lang.Thread.run(Thread.java:748)
	at org.mvel2.tests.core.AbstractTest.test(AbstractTest.java:152)
	at org.mvel2.tests.core.CoreConfidenceTests.testCompilerExceptionFormatting(CoreConfidenceTests.java:4447)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:243)
	at junit.framework.TestSuite.run(TestSuite.java:238)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:35)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:115)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)

FOURTH TEST: { 
2x * 3
 }: EXCEPTION REPORT: 

[Error: could not access: 2x; in class: org.mvel2.tests.core.res.Base]
[Near : {... 2x * 3 ....}]
              ^
[Line: 2, Column: 1]
	at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(ReflectiveAccessorOptimizer.java:707)
	at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain(ReflectiveAccessorOptimizer.java:360)
	at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(ReflectiveAccessorOptimizer.java:163)
	at org.mvel2.ast.ASTNode.optimize(ASTNode.java:159)
	at org.mvel2.ast.ASTNode.getReducedValueAccelerated(ASTNode.java:115)
	at org.mvel2.ast.BinaryOperation.getReducedValueAccelerated(BinaryOperation.java:117)
	at org.mvel2.compiler.ExecutableAccessor.getValue(ExecutableAccessor.java:42)
	at org.mvel2.MVEL.executeExpression(MVEL.java:921)
	at org.mvel2.tests.core.AbstractTest._test(AbstractTest.java:352)
	at org.mvel2.tests.core.AbstractTest.runSingleTest(AbstractTest.java:265)
	at org.mvel2.tests.core.AbstractTest$TestRunner.run(AbstractTest.java:253)
	at java.lang.Thread.run(Thread.java:748)
	at org.mvel2.tests.core.AbstractTest.test(AbstractTest.java:152)
	at org.mvel2.tests.core.CoreConfidenceTests.testCompilerExceptionFormatting(CoreConfidenceTests.java:4447)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:243)
	at junit.framework.TestSuite.run(TestSuite.java:238)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:35)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:115)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)

FIFTH TEST: { 
2x * 3
 }: EXCEPTION REPORT: 

[Error: could not access: 2x; in class: org.mvel2.tests.core.res.Base]
[Near : {... 2x * 3 ....}]
              ^
[Line: 2, Column: 1]
	at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(ReflectiveAccessorOptimizer.java:707)
	at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain(ReflectiveAccessorOptimizer.java:360)
	at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(ReflectiveAccessorOptimizer.java:163)
	at org.mvel2.ast.ASTNode.optimize(ASTNode.java:159)
	at org.mvel2.ast.ASTNode.getReducedValueAccelerated(ASTNode.java:115)
	at org.mvel2.ast.BinaryOperation.getReducedValueAccelerated(BinaryOperation.java:117)
	at org.mvel2.compiler.ExecutableAccessor.getValue(ExecutableAccessor.java:42)
	at org.mvel2.MVEL.executeExpression(MVEL.java:921)
	at org.mvel2.tests.core.AbstractTest._test(AbstractTest.java:365)
	at org.mvel2.tests.core.AbstractTest.runSingleTest(AbstractTest.java:265)
	at org.mvel2.tests.core.AbstractTest$TestRunner.run(AbstractTest.java:253)
	at java.lang.Thread.run(Thread.java:748)
	at org.mvel2.tests.core.AbstractTest.test(AbstractTest.java:152)
	at org.mvel2.tests.core.CoreConfidenceTests.testCompilerExceptionFormatting(CoreConfidenceTests.java:4447)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:243)
	at junit.framework.TestSuite.run(TestSuite.java:238)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:35)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:115)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)

SIXTH TEST: { 
2x * 3
 }: EXCEPTION REPORT: 

[Error: could not access: 2x; in class: org.mvel2.tests.core.res.Base]
[Near : {... 2x * 3 ....}]
              ^
[Line: 2, Column: 1]
	at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(ReflectiveAccessorOptimizer.java:707)
	at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain(ReflectiveAccessorOptimizer.java:360)
	at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(ReflectiveAccessorOptimizer.java:163)
	at org.mvel2.ast.ASTNode.optimize(ASTNode.java:159)
	at org.mvel2.ast.ASTNode.getReducedValueAccelerated(ASTNode.java:115)
	at org.mvel2.ast.BinaryOperation.getReducedValueAccelerated(BinaryOperation.java:117)
	at org.mvel2.MVELRuntime.execute(MVELRuntime.java:85)
	at org.mvel2.compiler.CompiledExpression.getDirectValue(CompiledExpression.java:123)
	at org.mvel2.compiler.CompiledExpression.getValue(CompiledExpression.java:119)
	at org.mvel2.compiler.CompiledExpression.getValue(CompiledExpression.java:113)
	at org.mvel2.MVEL.executeExpression(MVEL.java:921)
	at org.mvel2.tests.core.AbstractTest._test(AbstractTest.java:395)
	at org.mvel2.tests.core.AbstractTest.runSingleTest(AbstractTest.java:265)
	at org.mvel2.tests.core.AbstractTest$TestRunner.run(AbstractTest.java:253)
	at java.lang.Thread.run(Thread.java:748)
	at org.mvel2.tests.core.AbstractTest.test(AbstractTest.java:152)
	at org.mvel2.tests.core.CoreConfidenceTests.testCompilerExceptionFormatting(CoreConfidenceTests.java:4447)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:243)
	at junit.framework.TestSuite.run(TestSuite.java:238)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:35)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:115)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)

SEVENTH TEST: { 
2x * 3
 }: EXCEPTION REPORT: 

[Error: could not access: 2x; in class: org.mvel2.tests.core.res.Base]
[Near : {... 2x * 3 ....}]
              ^
[Line: 2, Column: 1]
	at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(ReflectiveAccessorOptimizer.java:707)
	at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain(ReflectiveAccessorOptimizer.java:360)
	at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(ReflectiveAccessorOptimizer.java:163)
	at org.mvel2.ast.ASTNode.optimize(ASTNode.java:159)
	at org.mvel2.ast.ASTNode.getReducedValueAccelerated(ASTNode.java:115)
	at org.mvel2.ast.BinaryOperation.getReducedValueAccelerated(BinaryOperation.java:117)
	at org.mvel2.MVELRuntime.execute(MVELRuntime.java:85)
	at org.mvel2.compiler.CompiledExpression.getDirectValue(CompiledExpression.java:123)
	at org.mvel2.compiler.CompiledExpression.getValue(CompiledExpression.java:119)
	at org.mvel2.MVEL.executeExpression(MVEL.java:921)
	at org.mvel2.tests.core.AbstractTest._test(AbstractTest.java:424)
	at org.mvel2.tests.core.AbstractTest.runSingleTest(AbstractTest.java:265)
	at org.mvel2.tests.core.AbstractTest$TestRunner.run(AbstractTest.java:253)
	at java.lang.Thread.run(Thread.java:748)
	at org.mvel2.tests.core.AbstractTest.test(AbstractTest.java:152)
	at org.mvel2.tests.core.CoreConfidenceTests.testCompilerExceptionFormatting(CoreConfidenceTests.java:4447)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:243)
	at junit.framework.TestSuite.run(TestSuite.java:238)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:35)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:115)
	at org.apache.maven.surefire.junit4.JUnit[test] analyzing res4Prultsovider.invoke(JU ... @Snit4ProvideLTesrts.java run: 287, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.454 sec
:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)

EIGHTH TEST (Serializability): { 
2x * 3
 }: EXCEPTION REPORT: 

[Error: could not access: 2x; in class: org.mvel2.tests.core.res.Base]
[Near : {... 2x * 3 ....}]
              ^
[Line: 2, Column: 1]
	at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(ReflectiveAccessorOptimizer.java:707)
	at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain(ReflectiveAccessorOptimizer.java:360)
	at org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(ReflectiveAccessorOptimizer.java:163)
	at org.mvel2.ast.ASTNode.optimize(ASTNode.java:159)
	at org.mvel2.ast.ASTNode.getReducedValueAccelerated(ASTNode.java:115)
	at org.mvel2.ast.BinaryOperation.getReducedValueAccelerated(BinaryOperation.java:117)
	at org.mvel2.MVELRuntime.execute(MVELRuntime.java:85)
	at org.mvel2.compiler.CompiledExpression.getDirectValue(CompiledExpression.java:123)
	at org.mvel2.compiler.CompiledExpression.getValue(CompiledExpression.java:119)
	at org.mvel2.MVEL.executeExpression(MVEL.java:929)
	at org.mvel2.tests.core.AbstractTest._test(AbstractTest.java:445)
	at org.mvel2.tests.core.AbstractTest.runSingleTest(AbstractTest.java:265)
	at org.mvel2.tests.core.AbstractTest$TestRunner.run(AbstractTest.java:253)
	at java.lang.Thread.run(Thread.java:748)
	at org.mvel2.tests.core.AbstractTest.test(AbstractTest.java:152)
	at org.mvel2.tests.core.CoreConfidenceTests.testCompilerExceptionFormatting(CoreConfidenceTests.java:4447)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:243)
	at junit.framework.TestSuite.run(TestSuite.java:238)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:35)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:115)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)

	at org.mvel2.tests.core.AbstractTest._test(AbstractTest.java:467)
	at org.mvel2.tests.core.AbstractTest.runSingleTest(AbstractTest.java:265)
	at org.mvel2.tests.core.AbstractTest$TestRunner.run(AbstractTest.java:253)
	at java.lang.Thread.run(Thread.java:748)
	at org.mvel2.tests.core.AbstractTest.test(AbstractTest.java:152)
	at org.mvel2.tests.core.CoreConfidenceTests.testCompilerExceptionFormatting(CoreConfidenceTests.java:4447)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:243)
	at junit.framework.TestSuite.run(TestSuite.java:238)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:35)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:115)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
Running org.mvel2.tests.core.IndexedVariablesTests
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.211 sec
Running org.mvel2.tests.core.ScopeTests
[Error: no such identifier: i]
[Near : {... if (true) { var i = 0 }; i ....}]
                                      ^
[Line: 1, Column: 26]
	at org.mvel2.compiler.ExpressionCompiler.verify(ExpressionCompiler.java:388)
	at org.mvel2.compiler.ExpressionCompiler._compile(ExpressionCompiler.java:266)
	at org.mvel2.compiler.ExpressionCompiler.compile(ExpressionCompiler.java:52)
	at org.mvel2.MVEL.compileExpression(MVEL.java:810)
	at org.mvel2.tests.core.ScopeTests.testNoScopeLeakageCompiled(ScopeTests.java:31)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:243)
	at junit.framework.TestSuite.run(TestSuite.java:238)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:35)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:115)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:97)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec
Running org.mvel2.tests.core.ProjectionsTests

[test] begin test for:
----------------------
(name in things)contains'Bob'
----------------------
Expression Decompile
-------------
(0) NODE [Contains] :: 
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 4ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
(name in things) contains 'Bob'
----------------------
Expression Decompile
-------------
(0) NODE [Contains] :: 
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
(name in things).size()
----------------------
Expression Decompile
-------------
(0) REFERENCE :: Union:size()
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
(toUpperCase() in ['bar', 'foo'])[1]
----------------------
Expression Decompile
-------------
(0) REFERENCE :: Union:[1]
==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
(toUpperCase() in ['zero', 'zen', 'bar', 'foo'] if ($ == 'bar'))
----------------------
Expression Decompile
-------------
(0) NODE [Fold] :: toUpperCase() in ['zero', 'zen', 'bar', 'foo'] if ($ == 'bar')
==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
(toUpperCase() in ['zero', 'zen', 'bar', 'foo'] if ($.startsWith('z')))
----------------------
Expression Decompile
-------------
(0) NODE [Fold] :: toUpperCase() in ['zero', 'zen', 'bar', 'foo'] if ($.startsWith('z'))
==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
( name in things ) contains 'Bob'
----------------------
Expression Decompile
-------------
(0) NODE [Contains] :: 
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.017 sec
Running org.mvel2.tests.core.PropertyAccessUnitTest
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec
Running org.mvel2.tests.core.ControlFlowTests

[test] begin test for:
----------------------
zero==0?'foobie':zero
----------------------
Expression Decompile
-------------
(0) OPERATION [EQUAL] {zero} {}
(1) OPERATOR [TERNARY_IF]: 
(2) LITERAL :: foobie'
(3) OPERATOR [TERNARY_ELSE]: 
(4) REFERENCE :: ASTNode:zero
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
if (true) { System.out.println("test!") }  

----------------------
Expression Decompile
-------------
(0) NODE [IfNode] :: true
(1) OPERATOR [END_OF_STATEMENT]: 

==END==
test!
test!
test!
test!
test!
unittest:1
test!
unittest:1
test!
unittest:1
unittest:1
test!
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
c != null && foo.bar.name == 'dog' && foo.bar.woof
----------------------
Expression Decompile
-------------
(0) NODE [And] :: 
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 4ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
c!=null&&foo.bar.name=='dog'&&foo.bar.woof
----------------------
Expression Decompile
-------------
(0) NODE [And] :: 
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 5ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
(pi * hour) > 0 && foo.happy() == 'happyBar'
----------------------
Expression Decompile
-------------
(0) NODE [And] :: 
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
4 > 3 || foo.toUC('test')
----------------------
Expression Decompile
-------------
(0) NODE [Or] :: 
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
4>3||foo.toUC('test')
----------------------
Expression Decompile
-------------
(0) NODE [Or] :: 
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
fun || true
----------------------
Expression Decompile
-------------
(0) NODE [Or] :: 
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
true||true
----------------------
Expression Decompile
-------------
(0) LITERAL :: true'
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
2 > 3 || 3 > 2
----------------------
Expression Decompile
-------------
(0) NODE [Or] :: 
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
pi > 5 || pi > 6 || pi > 3
----------------------
Expression Decompile
-------------
(0) NODE [Or] :: 
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
defnull != null  && defnull.length() > 0
----------------------
Expression Decompile
-------------
(0) NODE [And] :: 
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
populate(); barfoo == 'sarah'
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:populate()
(1) OPERATOR [END_OF_STATEMENT]: 

(2) OPERATION [EQUAL] {barfoo} {}
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
zero==1?'foobie':'blimpie'
----------------------
Expression Decompile
-------------
(0) OPERATION [EQUAL] {zero} {}
(1) OPERATOR [TERNARY_IF]: 
(2) LITERAL :: foobie'
(3) OPERATOR [TERNARY_ELSE]: 
(4) LITERAL :: blimpie'
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
zero==1?'foobie':'foobie'+'barbie'
----------------------
Expression Decompile
-------------
(0) OPERATION [EQUAL] {zero} {}
(1) OPERATOR [TERNARY_IF]: 
(2) LITERAL :: foobie'
(3) OPERATOR [TERNARY_ELSE]: 
(4) LITERAL :: foobiebarbie'
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
isdef someWierdVar ? 'squid' : 'skat!';
----------------------
Expression Decompile
-------------
(0) NODE [IsDef] :: someWierdVar
(1) OPERATOR [TERNARY_IF]: 
(2) LITERAL :: squid'
(3) OPERATOR [TERNARY_ELSE]: 
(4) LITERAL :: skat!'
(5) OPERATOR [END_OF_STATEMENT]: 

==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
a = 5; if (a == 5) { }; return a;
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 5
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NEST [IfNode]: { a == 5 }
==END==NODE [IfNode] :: a == 5
(3) OPERATOR [END_OF_STATEMENT]: 

(4) OPERATOR [RETURN]: a
(5) OPERATOR [END_OF_STATEMENT]: 

==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
a=5;if(a==5){};return a;
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 5
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NEST [IfNode]: { a==5 }
==END==NODE [IfNode] :: a==5
(3) OPERATOR [END_OF_STATEMENT]: 

(4) OPERATOR [RETURN]: a
(5) OPERATOR [END_OF_STATEMENT]: 

==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 5ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
if (5 < 4) { return 5; } else { return 10; }
----------------------
Expression Decompile
-------------
(0) NODE [IfNode] :: 5 < 4
==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
if(5<4){return 5;}else{return 10;}
----------------------
Expression Decompile
-------------
(0) NODE [IfNode] :: 5<4
==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
if (false) { return false; } else { return true; }
----------------------
Expression Decompile
-------------
(0) NODE [IfNode] :: false
==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
if (false) { return false; } else if(100 < 50) { return false; } else if (10 > 5) return true;
----------------------
Expression Decompile
-------------
(0) NODE [IfNode] :: false
==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
if (false) return 'Bar'; else return 'Foo244';
----------------------
Expression Decompile
-------------
(0) NODE [IfNode] :: false
==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
true ? '<test>' : '<poo>'
----------------------
Expression Decompile
-------------
(0) LITERAL :: true'
(1) OPERATOR [TERNARY_IF]: 
(2) LITERAL :: <test>'
(3) OPERATOR [TERNARY_ELSE]: 
(4) LITERAL :: <poo>'
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 0ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Expression: 50 > 60 && 20 < 10 || 100 > 90

[test] begin test for:
----------------------
i = 0; do { i++ } while (i != 10); i
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 0
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [DoNode] :: i != 10
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:i
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
i=100;do{i--}until(i==50); i
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: 100
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [DoUntilNode] :: i==50
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:i
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
String str = ''; for(i=0;i<6;i++) { str += i }; str
----------------------
Expression Decompile
-------------
(0) NODE [TypedVarNode] :: str
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [ForNode] :: i=0;i<6;i++
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:str
==END==
unittest:1
unittest:1
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
String str = ''; int i = 0; until (i == 6) { str += i++; }; str
----------------------
Expression Decompile
-------------
(0) NODE [TypedVarNode] :: str
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [TypedVarNode] :: i
(3) OPERATOR [END_OF_STATEMENT]: 

(4) NODE [UntilNode] :: 
(5) OPERATOR [END_OF_STATEMENT]: 

(6) REFERENCE :: ASTNode:str
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 3ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
StringBuffer sbuf = new StringBuffer(); foreach (int i : new int[] { 1,2,3,4 }) { sbuf.append(i); }; sbuf.toString()
----------------------
Expression Decompile
-------------
(0) NODE [TypedVarNode] :: sbuf
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [ForEachNode] ::  new int[] { 1,2,3,4 }
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:sbuf.toString()
==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 8ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
System.out.print("Hello : " + (foo != null ? "FOO!" : "NO FOO") + ". Bye.");
----------------------
Expression Decompile
-------------
(0) REFERENCE :: ASTNode:System.out.print("Hello : " + (foo != null ? "FOO!" : "NO FOO") + ". Bye.")
(1) OPERATOR [END_OF_STATEMENT]: 

==END==
Hello : FOO!. Bye.Hello : FOO!. Bye.Hello : FOO!. Bye.Hello : FOO!. Bye.Hello : FOO!. Bye.unittest:1
Hello : FOO!. Bye.unittest:1
Hello : FOO!. Bye.unittest:1
unittest:1
Hello : FOO!. Bye.All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
if (false) 'bar'; else 'foo';
----------------------
Expression Decompile
-------------
(0) NODE [IfNode] :: false
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
LOOP0
...
...
...
def cond(x, y) {
	if (x ~= "fet.*") {
		if ((x.endsWith(('sock')))) {
 			return 1;
		}  else if ((x.endsWith(('lock')))) {
 			return [1: ((y > 12) ? 1 : 2), 2: (12 + 1)];
		} ;
	}
(null).print();

}

cond('fetlock', 12)
[2, 3, 4]
Tests run: 53, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.09 sec
Running org.mvel2.tests.core.ArraysTests

[test] begin test for:
----------------------
new String[5]
----------------------
Expression Decompile
-------------
(0) NODE [NewObjectNode] :: String[5]
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
xStr = new String[5]; xStr.size() == 5
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: new String[5]
(1) OPERATOR [END_OF_STATEMENT]: 

(2) OPERATION [EQUAL] {xStr.size()} {}
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
xStr = new String[5][5]; xStr[4][0] = 'foo'; xStr[4][0]
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: new String[5][5]
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: 'foo'
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:xStr[4][0]
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
xStr = new String[5][10]; xStr[4][0] = 'foo'; xStr[4].length
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: new String[5][10]
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [AssignmentNode] :: 'foo'
(3) OPERATOR [END_OF_STATEMENT]: 

(4) REFERENCE :: ASTNode:xStr[4].length
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
new String[][] {{"2008-04-01", "2008-05-10"}, {"2007-03-01", "2007-02-12"}}
----------------------
Expression Decompile
-------------
(0) NODE [InlineCollectionNode] :: {{"2008-04-01", "2008-05-10"}, {"2007-03-01", "2007-02-12"}}
==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 1ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!

[test] begin test for:
----------------------
new String[][]{{"2008-04-01", "2008-05-10"}, {"2007-03-01", "2007-02-12"}}
----------------------
Expression Decompile
-------------
(0) NODE [InlineCollectionNode] :: {{"2008-04-01", "2008-05-10"}, {"2007-03-01", "2007-02-12"}}
==END==
unittest:1
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.015 sec
Running org.mvel2.tests.core.I18nTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec
Running org.mvel2.tests.core.StacklangTests
<EMPTY> >> 102:'foo'
[foo] >> 102:'bar'
[bar, foo] >> 102:0
<EMPTY> >> 102:10
[10] >> 102:5
[5, 10] >> 102:2
<EMPTY> >> 102:10
[10] >> 109:i
[10] >> 111:loop
[10] >> 104:i
[10, 10] >> 102:1
[1, 10, 10] >> 102:1
[1, 1, 10, 10] >> 114:null
[9, 10] >> 109:i
[9, 10] >> 102:0
[0, 9, 10] >> 102:18
[18, 0, 9, 10] >> 114:null
[false, 10] >> 113:endloop
[10] >> 105:java.lang.System
[class java.lang.System, 10] >> 110:null
[class java.lang.System, class java.lang.System, 10] >> 107:out
[org.apache.maven.surefire.util.TeeStream@6e0c6a7a, 10] >> 105:java.io.PrintStream
[class java.io.PrintStream, org.apache.maven.surefire.util.TeeStream@6e0c6a7a, 10] >> 104:i
[9, class java.io.PrintStream, org.apache.maven.surefire.util.TeeStream@6e0c6a7a, 10] >> 106:println
9
[null, 10] >> 112:loop
[null, 10] >> 104:i
[9, null, 10] >> 102:1
[1, 9, null, 10] >> 102:1
[1, 1, 9, null, 10] >> 114:null
[8, null, 10] >> 109:i
[8, null, 10] >> 102:0
[0, 8, null, 10] >> 102:18
[18, 0, 8, null, 10] >> 114:null
[false, null, 10] >> 113:endloop
[null, 10] >> 105:java.lang.System
[class java.lang.System, null, 10] >> 110:null
[class java.lang.System, class java.lang.System, null, 10] >> 107:out
[org.apache.maven.surefire.util.TeeStream@6e0c6a7a, null, 10] >> 105:java.io.PrintStream
[class java.io.PrintStream, org.apache.maven.surefire.util.TeeStream@6e0c6a7a, null, 10] >> 104:i
[8, class java.io.PrintStream, org.apache.maven.surefire.util.TeeStream@6e0c6a7a, null, 10] >> 106:println
8
[null, null, 10] >> 112:loop
[null, null, 10] >> 104:i
[8, null, null, 10] >> 102:1
[1, 8, null, null, 10] >> 102:1
[1, 1, 8, null, null, 10] >> 114:null
[7, null, null, 10] >> 109:i
[7, null, null, 10] >> 102:0
[0, 7, null, null, 10] >> 102:18
[18, 0, 7, null, null, 10] >> 114:null
[false, null, null, 10] >> 113:endloop
[null, null, 10] >> 105:java.lang.System
[class java.lang.System, null, null, 10] >> 110:null
[class java.lang.System, class java.lang.System, null, null, 10] >> 107:out
[org.apache.maven.surefire.util.TeeStream@6e0c6a7a, null, null, 10] >> 105:java.io.PrintStream
[class java.io.PrintStream, org.apache.maven.surefire.util.TeeStream@6e0c6a7a, null, null, 10] >> 104:i
[7, class java.io.PrintStream, org.apache.maven.surefire.util.TeeStream@6e0c6a7a, null, null, 10] >> 106:println
7
[null, null, null, 10] >> 112:loop
[null, null, null, 10] >> 104:i
[7, null, null, null, 10] >> 102:1
[1, 7, null, null, null, 10] >> 102:1
[1, 1, 7, null, null, null, 10] >> 114:null
[6, null, null, null, 10] >> 109:i
[6, null, null, null, 10] >> 102:0
[0, 6, null, null, null, 10] >> 102:18
[18, 0, 6, null, null, null, 10] >> 114:null
[false, null, null, null, 10] >> 113:endloop
[null, null, null, 10] >> 105:java.lang.System
[class java.lang.System, null, null, null, 10] >> 110:null
[class java.lang.System, class java.lang.System, null, null, null, 10] >> 107:out
[org.apache.maven.surefire.util.TeeStream@6e0c6a7a, null, null, null, 10] >> 105:java.io.PrintStream
[class java.io.PrintStream, org.apache.maven.surefire.util.TeeStream@6e0c6a7a, null, null, null, 10] >> 104:i
[6, class java.io.PrintStream, org.apache.maven.surefire.util.TeeStream@6e0c6a7a, null, null, null, 10] >> 106:println
6
[null, null, null, null, 10] >> 112:loop
[null, null, null, null, 10] >> 104:i
[6, null, null, null, null, 10] >> 102:1
[1, 6, null, null, null, null, 10] >> 102:1
[1, 1, 6, null, null, null, null, 10] >> 114:null
[5, null, null, null, null, 10] >> 109:i
[5, null, null, null, null, 10] >> 102:0
[0, 5, null, null, null, null, 10] >> 102:18
[18, 0, 5, null, null, null, null, 10] >> 114:null
[false, null, null, null, null, 10] >> 113:endloop
[null, null, null, null, 10] >> 105:java.lang.System
[class java.lang.System, null, null, null, null, 10] >> 110:null
[class java.lang.System, class java.lang.System, null, null, null, null, 10] >> 107:out
[org.apache.maven.surefire.util.TeeStream@6e0c6a7a, null, null, null, null, 10] >> 105:java.io.PrintStream
[class java.io.PrintStream, org.apache.maven.surefire.util.TeeStream@6e0c6a7a, null, null, null, null, 10] >> 104:i
[5, class java.io.PrintStream, org.apache.maven.surefire.util.TeeStream@6e0c6a7a, null, null, null, null, 10] >> 106:println
5
[null, null, null, null, null, 10] >> 112:loop
[null, null, null, null, null, 10] >> 104:i
[5, null, null, null, null, null, 10] >> 102:1
[1, 5, null, null, null, null, null, 10] >> 102:1
[1, 1, 5, null, null, null, null, null, 10] >> 114:null
[4, null, null, null, null, null, 10] >> 109:i
[4, null, null, null, null, null, 10] >> 102:0
[0, 4, null, null, null, null, null, 10] >> 102:18
[18, 0, 4, null, null, null, null, null, 10] >> 114:null
[false, null, null, null, null, null, 10] >> 113:endloop
[null, null, null, null, null, 10] >> 105:java.lang.System
[class java.lang.System, null, null, null, null, null, 10] >> 110:null
[class java.lang.System, class java.lang.System, null, null, null, null, null, 10] >> 107:out
[org.apache.maven.surefire.util.TeeStream@6e0c6a7a, null, null, null, null, null, 10] >> 105:java.io.PrintStream
[class java.io.PrintStream, org.apache.maven.surefire.util.TeeStream@6e0c6a7a, null, null, null, null, null, 10] >> 104:i
[4, class java.io.PrintStream, org.apache.maven.surefire.util.TeeStream@6e0c6a7a, null, null, null, null, null, 10] >> 106:println
4
[null, null, null, null, null, null, 10] >> 112:loop
[null, null, null, null, null, null, 10] >> 104:i
[4, null, null, null, null, null, null, 10] >> 102:1
[1, 4, null, null, null, null, null, null, 10] >> 102:1
[1, 1, 4, null, null, null, null, null, null, 10] >> 114:null
[3, null, null, null, null, null, null, 10] >> 109:i
[3, null, null, null, null, null, null, 10] >> 102:0
[0, 3, null, null, null, null, null, null, 10] >> 102:18
[18, 0, 3, null, null, null, null, null, null, 10] >> 114:null
[false, null, null, null, null, null, null, 10] >> 113:endloop
[null, null, null, null, null, null, 10] >> 105:java.lang.System
[class java.lang.System, null, null, null, null, null, null, 10] >> 110:null
[class java.lang.System, class java.lang.System, null, null, null, null, null, null, 10] >> 107:out
[org.apache.maven.surefire.util.TeeStream@6e0c6a7a, null, null, null, null, null, null, 10] >> 105:java.io.PrintStream
[class java.io.PrintStream, org.apache.maven.surefire.util.TeeStream@6e0c6a7a, null, null, null, null, null, null, 10] >> 104:i
[3, class java.io.PrintStream, org.apache.maven.surefire.util.TeeStream@6e0c6a7a, null, null, null, null, null, null, 10] >> 106:println
3
[null, null, null, null, null, null, null, 10] >> 112:loop
[null, null, null, null, null, null, null, 10] >> 104:i
[3, null, null, null, null, null, null, null, 10] >> 102:1
[1, 3, null, null, null, null, null, null, null, 10] >> 102:1
[1, 1, 3, null, null, null, null, null, null, null, 10] >> 114:null
[2, null, null, null, null, null, null, null, 10] >> 109:i
[2, null, null, null, null, null, null, null, 10] >> 102:0
[0, 2, null, null, null, null, null, null, null, 10] >> 102:18
[18, 0, 2, null, null, null, null, null, null, null, 10] >> 114:null
[false, null, null, null, null, null, null, null, 10] >> 113:endloop
[null, null, null, null, null, null, null, 10] >> 105:java.lang.System
[class java.lang.System, null, null, null, null, null, null, null, 10] >> 110:null
[class java.lang.System, class java.lang.System, null, null, null, null, null, null, null, 10] >> 107:out
[org.apache.maven.surefire.util.TeeStream@6e0c6a7a, null, null, null, null, null, null, null, 10] >> 105:java.io.PrintStream
[class java.io.PrintStream, org.apache.maven.surefire.util.TeeStream@6e0c6a7a, null, null, null, null, null, null, null, 10] >> 104:i
[2, class java.io.PrintStream, org.apache.maven.surefire.util.TeeStream@6e0c6a7a, null, null, null, null, null, null, null, 10] >> 106:println
2
[null, null, null, null, null, null, null, null, 10] >> 112:loop
[null, null, null, null, null, null, null, null, 10] >> 104:i
[2, null, null, null, null, null, null, null, null, 10] >> 102:1
[1, 2, null, null, null, null, null, null, null, null, 10] >> 102:1
[1, 1, 2, null, null, null, null, null, null, null, null, 10] >> 114:null
[1, null, null, null, null, null, null, null, null, 10] >> 109:i
[1, null, null, null, null, null, null, null, null, 10] >> 102:0
[0, 1, null, null, null, null, null, null, null, null, 10] >> 102:18
[18, 0, 1, null, null, null, null, null, null, null, null, 10] >> 114:null
[false, null, null, null, null, null, null, null, null, 10] >> 113:endloop
[null, null, null, null, null, null, null, null, 10] >> 105:java.lang.System
[class java.lang.System, null, null, null, null, null, null, null, null, 10] >> 110:null
[class java.lang.System, class java.lang.System, null, null, null, null, null, null, null, null, 10] >> 107:out
[org.apache.maven.surefire.util.TeeStream@6e0c6a7a, null, null, null, null, null, null, null, null, 10] >> 105:java.io.PrintStream
[class java.io.PrintStream, org.apache.maven.surefire.util.TeeStream@6e0c6a7a, null, null, null, null, null, null, null, null, 10] >> 104:i
[1, class java.io.PrintStream, org.apache.maven.surefire.util.TeeStream@6e0c6a7a, null, null, null, null, null, null, null, null, 10] >> 106:println
1
[null, null, null, null, null, null, null, null, null, 10] >> 112:loop
[null, null, null, null, null, null, null, null, null, 10] >> 104:i
[1, null, null, null, null, null, null, null, null, null, 10] >> 102:1
[1, 1, null, null, null, null, null, null, null, null, null, 10] >> 102:1
[1, 1, 1, null, null, null, null, null, null, null, null, null, 10] >> 114:null
[0, null, null, null, null, null, null, null, null, null, 10] >> 109:i
[0, null, null, null, null, null, null, null, null, null, 10] >> 102:0
[0, 0, null, null, null, null, null, null, null, null, null, 10] >> 102:18
[18, 0, 0, null, null, null, null, null, null, null, null, null, 10] >> 114:null
[true, null, null, null, null, null, null, null, null, null, 10] >> 113:endloop
stacklang {push 10;store i;label loop;load i;push 1;push 1; reduce;store i;push 0;push 18;reduce;jumpif endloop;ldtype java.lang.System;dup;getfield out;ldtype java.io.PrintStream;load i;invoke println;jump loop;label endloop;}
shit
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec
Running org.mvel2.tests.core.RegularExpressionTests
true

[test] begin test for:
----------------------
vv="Edson"; !(vv ~= "Mark")
----------------------
Expression Decompile
-------------
(0) NODE [AssignmentNode] :: "Edson"
(1) OPERATOR [END_OF_STATEMENT]: 

(2) NODE [Negation] :: (vv ~= "Mark")
==END==
unittest:1
unittest:1
unittest:1
All threads have stopped.
Result Count: 1
[test] finished in: 2ms (execution count: 8 [mixed modes])
[test] analyzing results ... good!
Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec
Running org.mvel2.tests.core.UnsupportedFeaturesTests
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec
Running org.mvel2.tests.templates.TemplateTests
r: aaa
r: aaa
0
Evaluation=====================
Evaluating 'map["foundIt"] = !(map['list'].contains("john"))': ......
'map["foundIt"] = !(map['list'].contains("john")) ' = false
Evaluation=====================
Compilation=====================
Compiling 'map["foundIt"] = !(map['list'].contains("john"))': ......
'map["foundIt"] = !(map['list'].contains("john")) ' = false
Compilation=====================
Templates=====================
Templating '@{map["foundIt"] = !(map['list']).contains("john")}': ......
'@{map["foundIt"] = !(map['list']).contains("john")} ' = false
Templating '@{map["foundIt"] = !(map['list'].contains("john"))}': ......
'@{map["foundIt"] = !(map['list'].contains("john"))} ' = false
Templates=====================
Evaluating 'map['foo']==map['foo']': ......
'map['foo']==map['foo'] ' = true
Evaluating '(map['one'] > 0)': ......
'(map['one'] > 0) ' = true
Evaluating '(map['one'] > 0) && (map['foo'] == map['foo'])': ......
'(map['one'] > 0) && (map['foo'] == map['foo']) ' = true
Evaluating '(map['one'] > 0) && (map['foo']==map['foo'])': ......
'(map['one'] > 0) && (map['foo']==map['foo']) ' = true
Compiling 'map['foo']==map['foo']': ......
'map['foo']==map['foo'] ' = true
Compiling '(map['one'] > 0)': ......
'(map['one'] > 0) ' = true
Compiling '(map['one'] > 0) && (map['foo'] == map['foo'])': ......
'(map['one'] > 0) && (map['foo'] == map['foo']) ' = true
Compiling '(map['one'] > 0) && (map['foo']==map['foo'])': ......
'(map['one'] > 0) && (map['foo']==map['foo']) ' = true
Templating '@{map['foo']==map['foo']}': ......
'@{map['foo']==map['foo']} ' = true
Templating '@(map['one'] > 0)}': ......
'@(map['one'] > 0)} ' = @(map['one'] > 0)}
Templating '@{(map['one'] > 0) && (map['foo'] == map['foo'])}': ......
'@{(map['one'] > 0) && (map['foo'] == map['foo'])} ' = true
Templating '@{(map['one'] > 0) && (map['foo']==map['foo'])}': ......
'@{(map['one'] > 0) && (map['foo']==map['foo'])} ' = true
:10blah
Templating '@code{ buffer = new StringBuilder(); i = 10; buffer.append( i + "blah" );}@{buffer.toString()}': ......
'@code{ buffer = new StringBuilder(); i = 10; buffer.append( i + "blah" );}@{buffer.toString()} ' = 10blah
 plop  plop  plop  plop 
[Error: [Error: unbalanced braces { ... }]
[Near : {... @{ddo ....}]
              ^
[Line: 4, Column: 7]]
[Near : {... @{ddo ....}]
              ^
[Line: 4, Column: 7]
[Error: [Error: expected character ':' in foreach tag]
[Near : {... <<@foreach{arrayList}@{item}@end{}>> ....}]
                                 ^
[Line: 1, Column: 21]]
[Near : {... <<@foreach{arrayList}@{item}@end{}>> ....}]
                                 ^
[Line: 2, Column: 21]
[Error: unclosed @foreach{} block. expected @end{}]
[Near : {... <<@foreach{item:arrayList}@{item}>> ....}]
                                                ^
[Line: 3, Column: 35]
Hello!
r: aaa
r: f1 aaa
Tests run: 130, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.095 sec

Results :

Tests run: 1078, Failures: 0, Errors: 0, Skipped: 0

[INFO] 
[INFO] --- maven-jar-plugin:2.3.1:jar (default-jar) @ mvel2 ---
[INFO] Building jar: /tmp/tmph4xkf2pp/mvel/target/mvel2-2.2.8.Final.jar
[INFO] 
[INFO] --- maven-jar-plugin:2.3.1:test-jar (default) @ mvel2 ---
[INFO] Building jar: /tmp/tmph4xkf2pp/mvel/target/mvel2-2.2.8.Final-tests.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.1.2:jar (default) > generate-sources @ mvel2 >>>
[INFO] 
[INFO] --- maven-enforcer-plugin:1.0:enforce (default) @ mvel2 ---
[INFO] 
[INFO] <<< maven-source-plugin:2.1.2:jar (default) < generate-sources @ mvel2 <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.1.2:jar (default) @ mvel2 ---
[INFO] Building jar: /tmp/tmph4xkf2pp/mvel/target/mvel2-2.2.8.Final-sources.jar
[INFO] 
[INFO] >>> maven-source-plugin:2.1.2:test-jar (default) > generate-sources @ mvel2 >>>
[INFO] 
[INFO] --- maven-enforcer-plugin:1.0:enforce (default) @ mvel2 ---
[INFO] 
[INFO] <<< maven-source-plugin:2.1.2:test-jar (default) < generate-sources @ mvel2 <<<
[INFO] 
[INFO] 
[INFO] --- maven-source-plugin:2.1.2:test-jar (default) @ mvel2 ---
[INFO] Building jar: /tmp/tmph4xkf2pp/mvel/target/mvel2-2.2.8.Final-test-sources.jar
[INFO] 
[INFO] --- maven-assembly-plugin:3.2.0:single (default) @ mvel2 ---
[INFO] Building jar: /tmp/tmph4xkf2pp/mvel/target/mvel2-2.2.8.Final-jar-with-dependencies.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  19.376 s
[INFO] Finished at: 2020-07-30T19:38:01Z
[INFO] ------------------------------------------------------------------------
