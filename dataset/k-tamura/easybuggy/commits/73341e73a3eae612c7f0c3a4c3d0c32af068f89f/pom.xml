<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.t246osslab.easybuggy</groupId>
  <artifactId>easybuggy</artifactId>
  <version>1-SNAPSHOT</version>
  <packaging>war</packaging>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <jetty-version>8.2.0.v20160908</jetty-version>
    <!-- Define double hyphens to avoid XML parse error if commenting out the Payara micro section. -->
    <double-hyphens>--</double-hyphens>
    <easybuggy-port>8080</easybuggy-port>
  </properties>
  <dependencies>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>3.0.1</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>jstl</artifactId>
      <version>1.2</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-jsp</artifactId>
      <version>${jetty-version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-webapp</artifactId>
      <version>${jetty-version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-annotations</artifactId>
      <version>${jetty-version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.derby</groupId>
      <artifactId>derby</artifactId>
      <version>10.8.3.0</version>
    </dependency>
    <dependency>
      <groupId>javassist</groupId>
      <artifactId>javassist</artifactId>
      <version>3.12.1.GA</version>
    </dependency>
    <dependency>
      <groupId>org.openjdk.jol</groupId>
      <artifactId>jol-core</artifactId>
      <version>0.6</version>
    </dependency>
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>5.1.17</version>
    </dependency>
    <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
        <version>1.7.1</version>
    </dependency>
    <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-log4j12</artifactId>
        <version>1.7.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.directory.server</groupId>
      <artifactId>apacheds-all</artifactId>
      <version>1.5.5</version>
      <exclusions>
        <exclusion>
          <groupId>org.apache.directory.shared</groupId>
          <artifactId>shared-ldap</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.owasp.esapi</groupId>
      <artifactId>esapi</artifactId>
      <version>2.1.0.1</version>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>2.3.2</version>
        <configuration>
          <source>1.6</source>
          <target>1.6</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>1.1.1</version>
        <executions>
          <execution>
            <id>enforce-java</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireMavenVersion>
                  <version>[3.0.0,)</version>
                </requireMavenVersion>
                <requireJavaVersion>
                  <version>[1.6,)</version>
                  <message>[ERROR] OLD JDK [${java.version}] in use.
                    Jetty ${jetty-version} requires JDK 1.6 or later</message>
                </requireJavaVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-antrun-plugin</artifactId>
          <executions>
           <execution>
              <id>create-empty-directory-and-english-properties</id>
              <phase>process-classes</phase>
              <goals>
                <goal>run</goal>
              </goals>
              <configuration>
                <tasks>
                  <mkdir dir="logs" />
                  <copy file="${basedir}/src/main/resources/messages_en.properties" tofile="${project.build.outputDirectory}/messages.properties" />
                  <copy file="${basedir}/src/main/resources/indexpage_en.properties" tofile="${project.build.outputDirectory}/indexpage.properties" />
                </tasks>
              </configuration>
            </execution>
          </executions>
        </plugin> -->
      <plugin>
        <artifactId>maven-war-plugin</artifactId>
        <version>2.6</version>
        <configuration>
          <failOnMissingWebXml>false</failOnMissingWebXml>
          <warName>ROOT</warName>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.2</version>
        <!-- Comment out Payara sections to avoid proxy error due to slow downloading. -->
        <dependencies>
          <dependency>
            <groupId>fish.payara.extras</groupId>
            <artifactId>payara-micro</artifactId>
            <version>4.1.1.162</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>payara-uber-jar</id>
            <phase>package</phase>
            <goals>
              <goal>java</goal>
            </goals>
            <configuration>
              <mainClass>fish.payara.micro.PayaraMicro</mainClass>
              <arguments>
                <argument>${double-hyphens}deploy</argument>
                <argument>${basedir}/target/ROOT.war</argument>
                <argument>${double-hyphens}outputUberJar</argument>
                <argument>${basedir}/target/easybuggy.jar</argument>
                <argument>${double-hyphens}port</argument>
                <argument>${easybuggy-port}</argument>
                <argument>${double-hyphens}noCluster</argument>
              </arguments>
              <includeProjectDependencies>false</includeProjectDependencies>
              <includePluginDependencies>true</includePluginDependencies>
              <executableDependency>
                <groupId>fish.payara.extras</groupId>
                <artifactId>payara-micro</artifactId>
              </executableDependency>
            </configuration>
          </execution>
          <execution>
            <id>startup-embedded-jetty</id>
            <phase>install</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
            <classpathScope>test</classpathScope>
            <executable>java</executable>
            <arguments>
              <argument>-Xmx256m</argument>
              <!-- MaxPermSize: For Java 7 or older, MaxMetaspaceSize: For 8 or later -->
              <argument>-XX:MaxPermSize=32m</argument>
              <!-- <argument>-XX:MaxMetaspaceSize=32m</argument> -->
              <argument>-XX:MaxDirectMemorySize=90m</argument>
              <argument>-XX:+UseSerialGC</argument>
              <argument>-Xloggc:logs/gc.log</argument>
              <!-- MaxPermSize: For Java 8 or later, add pid and timestamp prefix -->
              <!-- <argument>-Xloggc:logs/gc_%p_%t.log</argument> -->
              <argument>-XX:+PrintHeapAtGC</argument>
              <argument>-XX:+PrintGCDetails</argument>
              <argument>-XX:+PrintGCDateStamps</argument>
              <argument>-XX:+UseGCLogFileRotation</argument>
              <argument>-XX:NumberOfGCLogFiles=5</argument>
              <argument>-XX:GCLogFileSize=10M</argument>
              <argument>-XX:GCTimeLimit=15</argument>
              <argument>-XX:GCHeapFreeLimit=50</argument>
              <argument>-XX:+HeapDumpOnOutOfMemoryError</argument>
              <argument>-XX:HeapDumpPath=logs/</argument>
              <argument>-XX:ErrorFile=logs/hs_err_pid%p.log</argument>
              <argument>-XX:NativeMemoryTracking=summary</argument>
              <!-- Auto kill JVM when OOME occurs: For post-8u92 JDKs -->
              <!-- <argument>-XX:+CrashOnOutOfMemoryError</argument> -->
              <!-- Auto kill JVM when OOME occurs: For Linux -->
              <!-- <argument>-XX:OnOutOfMemoryError="kill -9 %p"</argument> -->
              <!-- Auto kill JVM when OOME occurs: For Windows -->
              <!-- -XX:OnOutOfMemoryError=taskkill /F /PID %p -->
              <!-- UnlockCommercialFeatures/FlightRecorder: For Oracle Java commercial use -->
              <!-- <argument>-XX:+UnlockCommercialFeatures</argument>
              <argument>-XX:+FlightRecorder</argument> -->
              <argument>-agentlib:jdwp=transport=dt_socket,server=y,address=9009,suspend=n</argument>
              <argument>-Dderby.stream.error.file=logs/derby.log</argument>
              <argument>-Dderby.infolog.append=true</argument>
              <argument>-Dderby.language.logStatementText=true</argument>
              <argument>-Dderby.locks.deadlockTrace=true</argument>
              <argument>-Dderby.locks.monitor=true</argument>
              <argument>-Dderby.storage.rowLocking=true</argument>
              <argument>-Dcom.sun.management.jmxremote</argument>
              <argument>-Dcom.sun.management.jmxremote.port=7900</argument>
              <argument>-Dcom.sun.management.jmxremote.ssl=false</argument>
              <argument>-Dcom.sun.management.jmxremote.authenticate=false</argument>
              <argument>-cp</argument>
              <classpath />
              <argument>org.t246osslab.easybuggy.EmbeddedJettyServer</argument>
              <argument>${easybuggy-port}</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
