<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.n52.android</groupId>
	<artifactId>52n-geoar-codebase</artifactId>
	<packaging>war</packaging>
	<version>0.0.2</version>
	<name>52°North GeoAR Codebase</name>

	<description>A codebase for GeoAR data sources.</description>

	<url>http://52north.org/android</url>
	<inceptionYear>2012</inceptionYear>
	<organization>
		<name>52°North Initiative for Geospatial Open Source Software GmbH</name>
		<url>http://52north.org</url>
	</organization>

	<scm>
		<connection>scm:svn:https://svn.52north.org/svn/geostatistics/main/geoviqua/52n-geoar-codebase/trunk</connection>
		<url>https://svn.52north.org/cgi-bin/viewvc.cgi/?root=geostatistics</url>
	</scm>

	<licenses>
		<license>
			<name>Apache 2</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
			<comments>A business-friendly OSS license</comments>
		</license>
	</licenses>

	<properties>
		<maven.build.timestamp.format>yyyyMMdd-HHmm</maven.build.timestamp.format>
		<webappDirectory>${project.build.directory}/${project.build.finalName}</webappDirectory>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<buildTimestamp>${maven.build.timestamp}</buildTimestamp>
		<restlet.version>2.1-RC5</restlet.version>

		<service.url>http://localhost:8080</service.url>
		<service.path>/geoar</service.path>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.6.4</version>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.6.4</version>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<!-- it’s just the api and the implementation should be provided by the 
				application server/web container -->
			<scope>provided</scope> <!-- for running with tomcat-maven-plugin, see http://singztechmusings.wordpress.com/2011/06/17/java-lang-classcastexception-cannot-be-cast-to-javax-servlet-servlet-how-to-resolve/ -->
		</dependency>

		<dependency>
			<groupId>org.restlet.jee</groupId>
			<artifactId>org.restlet</artifactId>
			<version>${restlet.version}</version>
			<scope>compile</scope>
			<exclusions>
				<exclusion>
					<artifactId>org.osgi.core</artifactId>
					<groupId>org.osgi</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.restlet.jee</groupId>
			<artifactId>org.restlet.ext.servlet</artifactId>
			<version>${restlet.version}</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.1.3</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.restlet.jee</groupId>
			<artifactId>org.restlet.ext.jackson</artifactId>
			<version>${restlet.version}</version>
		</dependency>
		<dependency>
			<groupId>org.restlet.jee</groupId>
			<artifactId>org.restlet.ext.fileupload</artifactId>
			<version>${restlet.version}</version>
		</dependency>

		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.3</version>
		</dependency>
	</dependencies>

	<build>
		<finalName>geoar</finalName>
		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat6-maven-plugin</artifactId>
				<version>2.0-SNAPSHOT</version>
				<!-- advanced configuration: http://tomcat.apache.org/maven-plugin-2.0-SNAPSHOT/run-mojo-features.html -->
				<!-- <configuration> <systemProperties> <java.io.tmpdir>target</java.io.tmpdir> 
					</systemProperties> </configuration> -->
				<configuration>
					<path>${service.path}</path>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>commons-io</groupId>
						<artifactId>commons-io</artifactId>
						<version>2.1</version>
					</dependency>
				</dependencies>
			</plugin>

			<plugin>
				<!-- check for correct source file headers during test phase: http://code.google.com/p/maven-license-plugin/wiki/HowTo -->
				<!-- run "mvn license:check -Dyear=2011" to check -->
				<!-- run "mvn license:format -Dyear=2011" to add to the files -->
				<groupId>com.mycila.maven-license-plugin</groupId>
				<artifactId>maven-license-plugin</artifactId>
				<version>1.9.0</version>
				<configuration>
					<header>src/main/resources/52N_license.txt</header>
					<excludes>
						<exclude>**/log4j*</exclude>
						<exclude>**/buildNumber.properties</exclude>
						<exclude>**/org/restlet/**</exclude>
						<exclude>**/*qrcode.js</exclude>
						<exclude>**/*.css</exclude><!-- buggy -->
					</excludes>
					<includes>
						<include>**/*.java</include>
						<include>**/*.properties</include>
						<include>**/*.jsp</include>
						<include>**/*.js</include>
						<include>**/*.xml</include>
						<include>**/*.xsl</include>
						<include>**/*.html</include>
					</includes>
					<strictCheck>true</strictCheck>
					<properties>
						<year>${project.inceptionYear}</year>
					</properties>
				</configuration>
				<executions>
					<execution>
						<phase>test</phase>
						<!-- test will fail if license headers are not correct, run license:format 
							to add the headers. -->
						<goals>
							<goal>check</goal>
							<!-- <goal>format</goal> -->
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>buildnumber-maven-plugin</artifactId>
				<version>1.1-SNAPSHOT</version>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>create</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<doCheck>true</doCheck>
					<doUpdate>true</doUpdate>
					<format>{0,number}</format>
					<items>
						<item>buildNumber</item>
					</items>
					<buildNumberPropertiesFileLocation>${basedir}/src/main/config/buildNumber.properties</buildNumberPropertiesFileLocation>
					<revisionOnScmFailure>svm-NA</revisionOnScmFailure>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.2</version>
				<configuration>
					<webappDirectory>${webappDirectory}</webappDirectory>
					<webResources>
						<resource>
							<directory>src/main/webapp</directory>
							<filtering>true</filtering>
						</resource>
					</webResources>
					<webXml>${basedir}/src/main/webapp/WEB-INF/web.xml</webXml>
					<filteringDeploymentDescriptors>true</filteringDeploymentDescriptors>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
						</manifest>
						<manifestEntries>
							<Implementation-Build>${buildNumber}</Implementation-Build>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<repositories>
		<repository>
			<id>maven-restlet</id>
			<name>Public online Restlet repository</name>
			<url>http://maven.restlet.org</url>
		</repository>
	</repositories>
</project>
