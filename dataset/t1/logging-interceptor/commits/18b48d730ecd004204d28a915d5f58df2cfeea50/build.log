[INFO] Error stacktraces are turned on.
[INFO] Scanning for projects...
[INFO] 
[INFO] -----------------< com.github.t1:logging-interceptor >------------------
[INFO] Building Logging-Interceptor 3.2.4-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:prepare-agent (default) @ logging-interceptor ---
[INFO] argLine set to -javaagent:/home/jdbl/.m2/repository/org/jacoco/org.jacoco.agent/0.8.5/org.jacoco.agent-0.8.5-runtime.jar=destfile=/tmp/tmp507quss_/logging-interceptor/target/jacoco.exec
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ logging-interceptor ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ logging-interceptor ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 28 source files to /tmp/tmp507quss_/logging-interceptor/target/classes
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ logging-interceptor ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ logging-interceptor ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 21 source files to /tmp/tmp507quss_/logging-interceptor/target/test-classes
[INFO] 
[INFO] --- maven-surefire-plugin:2.19.1:test (default-test) @ logging-interceptor ---
[INFO] Surefire report directory: /tmp/tmp507quss_/logging-interceptor/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running com.github.t1.log.LogRepetitionTest
Jul 31, 2020 8:31:42 AM org.jboss.weld.bootstrap.WeldStartup <clinit>
INFO: WELD-000900: 3.0.0 (Alpha6)
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.515 sec - in com.github.t1.log.LogRepetitionTest
Running com.github.t1.log.LogContextVariableProducerTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.172 sec - in com.github.t1.log.LogContextVariableProducerTest
Running com.github.t1.log.LogMethodTest
Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.4 sec - in com.github.t1.log.LogMethodTest
Running com.github.t1.log.LogLevelTest
Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.249 sec - in com.github.t1.log.LogLevelTest
Running com.github.t1.log.LogIndentTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.157 sec - in com.github.t1.log.LogIndentTest
Running com.github.t1.log.LogExceptionTest
Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.209 sec - in com.github.t1.log.LogExceptionTest
Running com.github.t1.log.IndentTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.github.t1.log.IndentTest
Running com.github.t1.log.ConvertersTest
Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.102 sec - in com.github.t1.log.ConvertersTest
Running com.github.t1.log.LogContextTest
Tests run: 9, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 0.212 sec - in com.github.t1.log.LogContextTest
Running com.github.t1.log.LogLoggerTest
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.131 sec - in com.github.t1.log.LogLoggerTest
Running com.github.t1.log.LogParamsTest
Tests run: 21, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.195 sec - in com.github.t1.log.LogParamsTest
Running com.github.t1.log.LogJsonTest
Tests run: 24, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.252 sec - in com.github.t1.log.LogJsonTest
Running com.github.t1.log.VersionLogContextVariableProducerTest
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.trace(
    "matching {}",
    mailto:no@where.com
);
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.trace(
    "matching {}",
    mailto:no@where.com
);
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.trace(
    "matching {}",
    file:src/test/resources/empty-manifest.war/META-INF/MANIFEST.MF
);
log.trace(
    "found potential match of type {} at {}",
    "war",
    "empty-manifest"
);
log.trace(
    "found non-nested manifest at {}",
    file:src/test/resources/empty-manifest.war/META-INF/MANIFEST.MF
);
log.debug(
    "no version found in {}",
    file:src/test/resources/empty-manifest.war/META-INF/MANIFEST.MF
);
log.debug(
    "found app={} version={} in {}",
    "empty-manifest",
    null,
    file:src/test/resources/empty-manifest.war/META-INF/MANIFEST.MF
);
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.trace(
    "matching {}",
    mailto:no@where.com
);
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.trace(
    "matching {}",
    file:src/test/resources/empty-manifest.war/META-INF/MANIFEST.MF
);
log.trace(
    "found potential match of type {} at {}",
    "war",
    "empty-manifest"
);
log.trace(
    "found non-nested manifest at {}",
    file:src/test/resources/empty-manifest.war/META-INF/MANIFEST.MF
);
log.debug(
    "no version found in {}",
    file:src/test/resources/empty-manifest.war/META-INF/MANIFEST.MF
);
log.debug(
    "found app={} version={} in {}",
    "empty-manifest",
    null,
    file:src/test/resources/empty-manifest.war/META-INF/MANIFEST.MF
);
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.trace(
    "matching {}",
    file:src/test/resources/impl-version.war/META-INF/MANIFEST.MF
);
log.trace(
    "found potential match of type {} at {}",
    "war",
    "impl-version"
);
log.trace(
    "found non-nested manifest at {}",
    file:src/test/resources/impl-version.war/META-INF/MANIFEST.MF
);
log.debug(
    "found app={} version={} in {}",
    "impl-version",
    "1.2.4",
    file:src/test/resources/impl-version.war/META-INF/MANIFEST.MF
);
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.trace(
    "matching {}",
    mailto:no@where.com
);
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.trace(
    "matching {}",
    file:src/test/resources/empty-manifest.war/META-INF/MANIFEST.MF
);
log.trace(
    "found potential match of type {} at {}",
    "war",
    "empty-manifest"
);
log.trace(
    "found non-nested manifest at {}",
    file:src/test/resources/empty-manifest.war/META-INF/MANIFEST.MF
);
log.debug(
    "no version found in {}",
    file:src/test/resources/empty-manifest.war/META-INF/MANIFEST.MF
);
log.debug(
    "found app={} version={} in {}",
    "empty-manifest",
    null,
    file:src/test/resources/empty-manifest.war/META-INF/MANIFEST.MF
);
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.trace(
    "matching {}",
    file:src/test/resources/impl-version.war/META-INF/MANIFEST.MF
);
log.trace(
    "found potential match of type {} at {}",
    "war",
    "impl-version"
);
log.trace(
    "found non-nested manifest at {}",
    file:src/test/resources/impl-version.war/META-INF/MANIFEST.MF
);
log.debug(
    "found app={} version={} in {}",
    "impl-version",
    "1.2.4",
    file:src/test/resources/impl-version.war/META-INF/MANIFEST.MF
);
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.trace(
    "matching {}",
    file:does/not/exist.war/META-INF/MANIFEST.MF
);
log.trace(
    "found potential match of type {} at {}",
    "war",
    "exist"
);
log.trace(
    "found non-nested manifest at {}",
    file:does/not/exist.war/META-INF/MANIFEST.MF
);
log.debug(
    "can't read manifest",
    java.io.FileNotFoundException: does/not/exist.war/META-INF/MANIFEST.MF (No such file or directory)
);
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.trace(
    "matching {}",
    mailto:no@where.com
);
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.trace(
    "matching {}",
    file:src/test/resources/empty-manifest.war/META-INF/MANIFEST.MF
);
log.trace(
    "found potential match of type {} at {}",
    "war",
    "empty-manifest"
);
log.trace(
    "found non-nested manifest at {}",
    file:src/test/resources/empty-manifest.war/META-INF/MANIFEST.MF
);
log.debug(
    "no version found in {}",
    file:src/test/resources/empty-manifest.war/META-INF/MANIFEST.MF
);
log.debug(
    "found app={} version={} in {}",
    "empty-manifest",
    null,
    file:src/test/resources/empty-manifest.war/META-INF/MANIFEST.MF
);
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.trace(
    "matching {}",
    file:src/test/resources/impl-version.war/META-INF/MANIFEST.MF
);
log.trace(
    "found potential match of type {} at {}",
    "war",
    "impl-version"
);
log.trace(
    "found non-nested manifest at {}",
    file:src/test/resources/impl-version.war/META-INF/MANIFEST.MF
);
log.debug(
    "found app={} version={} in {}",
    "impl-version",
    "1.2.4",
    file:src/test/resources/impl-version.war/META-INF/MANIFEST.MF
);
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.trace(
    "matching {}",
    file:does/not/exist.war/META-INF/MANIFEST.MF
);
log.trace(
    "found potential match of type {} at {}",
    "war",
    "exist"
);
log.trace(
    "found non-nested manifest at {}",
    file:does/not/exist.war/META-INF/MANIFEST.MF
);
log.debug(
    "can't read manifest",
    java.io.FileNotFoundException: does/not/exist.war/META-INF/MANIFEST.MF (No such file or directory)
);
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.trace(
    "matching {}",
    file:src/test/resources/spec-version.war/META-INF/MANIFEST.MF
);
log.trace(
    "found potential match of type {} at {}",
    "war",
    "spec-version"
);
log.trace(
    "found non-nested manifest at {}",
    file:src/test/resources/spec-version.war/META-INF/MANIFEST.MF
);
log.debug(
    "found app={} version={} in {}",
    "spec-version",
    "1.2.3",
    file:src/test/resources/spec-version.war/META-INF/MANIFEST.MF
);
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.trace(
    "matching {}",
    mailto:no@where.com
);
log.debug("no manifest found");
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.trace(
    "matching {}",
    file:src/test/resources/empty-manifest.war/META-INF/MANIFEST.MF
);
log.trace(
    "found potential match of type {} at {}",
    "war",
    "empty-manifest"
);
log.trace(
    "found non-nested manifest at {}",
    file:src/test/resources/empty-manifest.war/META-INF/MANIFEST.MF
);
log.debug(
    "no version found in {}",
    file:src/test/resources/empty-manifest.war/META-INF/MANIFEST.MF
);
log.debug(
    "found app={} version={} in {}",
    "empty-manifest",
    null,
    file:src/test/resources/empty-manifest.war/META-INF/MANIFEST.MF
);
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.trace(
    "matching {}",
    file:src/test/resources/impl-version.war/META-INF/MANIFEST.MF
);
log.trace(
    "found potential match of type {} at {}",
    "war",
    "impl-version"
);
log.trace(
    "found non-nested manifest at {}",
    file:src/test/resources/impl-version.war/META-INF/MANIFEST.MF
);
log.debug(
    "found app={} version={} in {}",
    "impl-version",
    "1.2.4",
    file:src/test/resources/impl-version.war/META-INF/MANIFEST.MF
);
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.trace(
    "matching {}",
    file:does/not/exist.war/META-INF/MANIFEST.MF
);
log.trace(
    "found potential match of type {} at {}",
    "war",
    "exist"
);
log.trace(
    "found non-nested manifest at {}",
    file:does/not/exist.war/META-INF/MANIFEST.MF
);
log.debug(
    "can't read manifest",
    java.io.FileNotFoundException: does/not/exist.war/META-INF/MANIFEST.MF (No such file or directory)
);
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.trace(
    "matching {}",
    file:src/test/resources/spec-version.war/META-INF/MANIFEST.MF
);
log.trace(
    "found potential match of type {} at {}",
    "war",
    "spec-version"
);
log.trace(
    "found non-nested manifest at {}",
    file:src/test/resources/spec-version.war/META-INF/MANIFEST.MF
);
log.debug(
    "found app={} version={} in {}",
    "spec-version",
    "1.2.3",
    file:src/test/resources/spec-version.war/META-INF/MANIFEST.MF
);
log.debug("scan for manifests");
log.trace("scanning for manifest");
log.trace(
    "matching {}",
    file:src/test/resources/spec-version.war/META-INF/MANIFEST.MF
);
log.trace(
    "found potential match of type {} at {}",
    "war",
    "spec-version"
);
log.trace(
    "found non-nested manifest at {}",
    file:src/test/resources/spec-version.war/META-INF/MANIFEST.MF
);
log.debug(
    "found app={} version={} in {}",
    "spec-version",
    "1.2.3",
    file:src/test/resources/spec-version.war/META-INF/MANIFEST.MF
);
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.11 sec - in com.github.t1.log.VersionLogContextVariableProducerTest
Running com.github.t1.log.LogConverterTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.107 sec - in com.github.t1.log.LogConverterTest

Results :

Tests run: 143, Failures: 0, Errors: 0, Skipped: 1

[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:report (report) @ logging-interceptor ---
[INFO] Loading execution data file /tmp/tmp507quss_/logging-interceptor/target/jacoco.exec
[INFO] Analyzed bundle 'Logging-Interceptor' with 3813 classes
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  26.393 s
[INFO] Finished at: 2020-07-31T08:31:50Z
[INFO] ------------------------------------------------------------------------
