<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.apache</groupId>
		<artifactId>apache</artifactId>
		<version>18</version>
	</parent>
	<groupId>org.apache.systemml</groupId>
	<version>1.2.0</version>
	<artifactId>systemml</artifactId>
	<packaging>jar</packaging>
	<name>SystemML</name>
	<description>Declarative Machine Learning</description>
	<url>http://systemml.apache.org/</url>
	<licenses>
		<license>
			<name>Apache 2.0 License</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
		</license>
	</licenses>
	<scm>
		<connection>scm:git:git@github.com:apache/systemml</connection>
		<developerConnection>scm:git:https://git-wip-us.apache.org/repos/asf/systemml</developerConnection>
		<url>https://git-wip-us.apache.org/repos/asf?p=systemml.git</url>
		<tag>v1.2.0-rc1</tag>
	</scm>
	<issueManagement>
		<system>JIRA</system>
		<url>https://issues.apache.org/jira/browse/SYSTEMML</url>
	</issueManagement>
	<mailingLists>
		<mailingList>
			<name>Dev Mailing List</name>
			<post>dev@systemml.apache.org</post>
			<subscribe>dev-subscribe@systemml.apache.org</subscribe>
			<unsubscribe>dev-unsubscribe@systemml.apache.org</unsubscribe>
		</mailingList>
		<mailingList>
			<name>Commits Mailing List</name>
			<post>commits@systemml.apache.org</post>
			<subscribe>commits-subscribe@systemml.apache.org</subscribe>
			<unsubscribe>commits-unsubscribe@systemml.apache.org</unsubscribe>
		</mailingList>
	</mailingLists>

	<properties>
		<hadoop.version>2.6.0</hadoop.version>
		<antlr.version>4.5.3</antlr.version>
		<spark.version>2.1.0</spark.version>
		<scala.version>2.11.8</scala.version>
		<scala.binary.version>2.11</scala.binary.version>
		<scala.test.version>2.2.6</scala.test.version>
		<maven.build.timestamp.format>yyyy-MM-dd HH:mm:ss z</maven.build.timestamp.format>
		<enableGPU>false</enableGPU>
		<jcuda.scope>provided</jcuda.scope>
		<jcuda.version>0.9.0d</jcuda.version>
		<!-- OS-specific JVM arguments for running integration tests -->
		<integrationTestExtraJVMArgs />
	</properties>

	<repositories>
		<repository>
			<id>central</id>
			<url>https://repo1.maven.org/maven2</url>
			<releases>
				<enabled>true</enabled>
			</releases>
		</repository>
	</repositories>

	<build>

		<!-- Adds scripts to main jar, in-memory jar, sources jar, and standalone 
			jar -->
		<resources>
			<resource>
				<directory>scripts</directory>
				<excludes>
					<exclude>algorithms/obsolete/*</exclude>
					<exclude>datagen/obsolete/*</exclude>
					<exclude>perftest/*</exclude>
					<exclude>staging/**/*</exclude>
					<exclude>nn/test/compare_backends/*</exclude>
					<exclude>nn/test/compare_backends/*</exclude>
					<exclude>nn/examples/caffe2dml/**/*</exclude>
					<!-- <exclude>*.sh</exclude> --> <!-- applies to sparkDML.sh -->
				</excludes>
				<targetPath>scripts</targetPath>
			</resource>
			<resource>
				<directory>src/main/cpp/kernels</directory>
				<excludes>
					<exclude>*.cu</exclude>
				</excludes>
				<targetPath>kernels</targetPath>
			</resource>
			<resource>
				<directory>src/main/cpp/lib</directory>
				<targetPath>lib</targetPath>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>unpack</id>
						<phase>package</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>org.apache.hadoop</groupId>
									<artifactId>hadoop-test</artifactId>
									<version>1.2.1</version>
									<type>jar</type>
									<overWrite>true</overWrite>
									<outputDirectory>${project.build.directory}/hadoop-test</outputDirectory>
									<includes>**/*</includes>
								</artifactItem>
							</artifactItems>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
						</configuration>
					</execution>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/lib</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- PLEASE DO NOT REMOVE! NEEDED to "PACKAGE" ANTLR RUNTIME INTO SYSTEMML.JAR -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>2.3</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<artifactSet>
								<includes>
									<include>org.apache.wink:wink-json4j:*</include>
									<include>org.antlr:antlr4-runtime:*</include>
								</includes>
							</artifactSet>
						</configuration>
					</execution>
				</executions>

				<configuration>
					<!-- Include signature files so that recent versions of Java will run 
						the resulting jar without complaining about "Invalid signature file digest 
						for Manifest main attributes". -->
					<filters>
						<filter>
							<artifact>*:*</artifact>
							<excludes>
								<exclude>META-INF/*.SF</exclude>
								<exclude>META-INF/*.DSA</exclude>
								<exclude>META-INF/*.RSA</exclude>
							</excludes>
						</filter>
					</filters>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.8</version>
				<executions>
					<execution>
						<id>add-test-source</id>
						<phase>generate-test-sources</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<sources>
								<!-- Test suite classes kept in a separate folder for compatibility 
									with the Eclipse JUnit test runner. -->
								<source>${basedir}/src/test_suites/java</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>net.alchim31.maven</groupId>
				<artifactId>scala-maven-plugin</artifactId>
				<version>3.2.2</version>
				<executions>
					<execution>
						<id>eclipse-add-source</id>
						<goals>
							<goal>add-source</goal>
						</goals>
					</execution>
					<execution>
						<id>scala-compile-first</id>
						<phase>process-resources</phase>
						<goals>
							<goal>compile</goal>
						</goals>
					</execution>
					<execution>
						<id>scala-test-compile-first</id>
						<phase>process-test-resources</phase>
						<goals>
							<goal>testCompile</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<executions>
					<execution>
						<id>default-jar</id>
						<goals>
							<goal>jar</goal>
						</goals>
						<phase>package</phase>
						<configuration>
							<archive>
								<index>true</index>
								<manifestEntries>
									<Build-Timestamp>${maven.build.timestamp}</Build-Timestamp>
									<Main-Class>org.apache.sysml.api.DMLScript</Main-Class>
								</manifestEntries>
							</archive>
							<excludes>
								<exclude>**/caffe/*</exclude>
								<exclude>**/org/apache/sysml/api/dl/*</exclude>
							</excludes>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>compile</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<resources>
								<resource>
									<directory>${basedir}/src/test/config/hadoop_bin_windows/bin</directory>
									<filtering>false</filtering>
									<includes>
										<include>*.*</include>
									</includes>
								</resource>
							</resources>
							<outputDirectory>${basedir}/target/lib/hadoop/bin</outputDirectory>
						</configuration>
					</execution>

					<execution>
						<id>copy-resources-filtered</id>
						<phase>compile</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<overwrite>true</overwrite>
							<outputDirectory>${basedir}/target/scripts</outputDirectory>
							<resources>
								<resource>
									<directory>${basedir}/src/main/resources/scripts</directory>
									<includes>
										<include>sparkDML.sh</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.antlr</groupId>
				<artifactId>antlr4-maven-plugin</artifactId>
				<configuration>
					<sourceDirectory>${basedir}/src/main/java</sourceDirectory>
					<outputDirectory>${basedir}/src/main/java</outputDirectory>
				</configuration>
				<version>${antlr.version}</version>
				<executions>
					<execution>
						<id>antlr</id>
						<goals>
							<goal>antlr4</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>com.github.os72</groupId>
				<artifactId>protoc-jar-maven-plugin</artifactId>
				<version>3.4.0.1</version>
				<executions>
					<execution>
						<id>caffe-sources</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<protocVersion>2.5.0</protocVersion> <!-- 2.4.1, 2.5.0, 2.6.1, 3.4.0 -->
							<inputDirectories>
								<include>src/main/proto/caffe</include>
							</inputDirectories>
							<outputDirectories>
								<include>src/main/java</include>
							</outputDirectories>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Currently, all tests are integration tests. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.18</version><!--$NO-MVN-MAN-VER$ -->
				<configuration>

					<!-- STDERR/STDOUT to individual .txt files instead of console -->
					<redirectTestOutputToFile>true</redirectTestOutputToFile>

					<!-- Run (num cores) test harness classes in parallel, each in a separate 
						process -->
					<forkCount>1C</forkCount>
					<reuseForks>true</reuseForks>

					<!-- Third argument prevents Java from popping up lots of windows on 
						MacOS -->
					<argLine>-Dfile.encoding=UTF-8 -Xmx2g -Xms2g -Xmn200m
						-Djava.awt.headless=true</argLine>

					<includes>
						<!-- All tests are integration tests as far as Maven is concerned. -->
					</includes>

					<excludes>
						<exclude>**/slowtest/**</exclude>
						<exclude>**/integration/**</exclude>
						<exclude>**/test/unit/**</exclude>
						<exclude>**/test/gpu/**</exclude>
					</excludes>

				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>

				<!-- *** HACK ALERT *** HACK ALERT *** HACK ALERT *** -->
				<!-- Failsafe 2.18 has a bug in computing # cores, so use 2.17 -->
				<version>2.17</version><!--$NO-MVN-MAN-VER$ -->
				<!-- *** END HACK *** -->

				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
				<configuration>

					<!-- STDERR/STDOUT to individual .txt files instead of console -->
					<redirectTestOutputToFile>true</redirectTestOutputToFile>

					<!-- Tests are grouped into suites, one suite per package. -->
					<parallel>suites</parallel>
					<threadCount>1</threadCount>

					<!-- 2 processes per test -->
					<forkCount>0.5C</forkCount>
					<reuseForks>false</reuseForks>

					<!-- Limit Spark log output-->
					<systemPropertyVariables>
					  <log4j.configuration>file:${basedir}/conf/log4j-silent.properties</log4j.configuration>
					</systemPropertyVariables>
					
					<!-- Last argument prevents Java from popping up lots of windows on 
						MacOS -->
					<argLine>-Dfile.encoding=UTF-8 -Xmx2g -Xms2g -Xmn200m
						${integrationTestExtraJVMArgs}
						-Djava.awt.headless=true</argLine>

					<includes>
						<include>${gpuTestsPath}</include> <!-- Path for GPU integration tests, enabled for gpuTests profile -->
						<!-- <include>**/integration/applications/**/*Suite.java</include> -->
						<!-- <include>**/integration/conversion/*Suite.java</include> -->
						<!-- <include>**/integration/functions/data/*Suite.java</include> -->
						<include>**/integration/functions/estim/*Suite.java</include>
						<include>**/integration/functions/external/*Suite.java</include>
						<include>**/integration/functions/frame/*Suite.java</include>
						<include>**/integration/functions/io/*Suite.java</include>
						<include>**/integration/functions/jmlc/*Suite.java</include>
						<include>**/integration/functions/misc/*Suite.java</include>
						<include>**/integration/functions/parfor/*Suite.java</include>
						<include>**/integration/functions/sparse/*Suite.java</include>
						<include>**/integration/functions/tensor/*Suite.java</include>
						<include>**/integration/functions/updateinplace/*Suite.java</include>
						<include>**/integration/functions/vect/*Suite.java</include>
						<!-- <include>**/integration/functions/codegenalg/*Suite.java</include> -->
						<!-- <include>**/integration/functions/**/*Test*.java</include> -->
						<include>**/integration/mlcontext/*Suite.java</include>
						<!-- <include>**/integration/mlcontext/algorithms/*Suite.java</include> -->
						<include>**/integration/scripts/nn/*Suite.java</include>
						<!-- <include>**/integration/scalability/**/*Test.java</include> -->
					</includes>

					<excludes>
						<exclude>**/slowtest/**</exclude>
						<exclude>**/integration/functions/data/*Test*.java</exclude>
					</excludes>

				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<executions>
					<execution>
						<id>clean-original-jar</id>
						<phase>package</phase>
						<goals>
							<goal>clean</goal>
						</goals>
						<configuration>
							<excludeDefaultDirectories>true</excludeDefaultDirectories>
							<filesets>
								<fileset>
									<directory>${project.build.directory}</directory>
									<includes>
										<include>original-*.jar</include>
									</includes>
								</fileset>
							</filesets>
						</configuration>
					</execution>
					<execution>
						<!-- NOTE: We don't clean up systemml.egg-info since this makes it 
							difficult to uninstall a dev version after a maven clean -->
						<id>clean-python-files</id>
						<phase>clean</phase>
						<goals>
							<goal>clean</goal>
						</goals>
						<configuration>
							<excludeDefaultDirectories>true</excludeDefaultDirectories>
							<filesets>
								<fileset>
									<directory>src/main/python/dist</directory>
								</fileset>
								<fileset>
									<directory>src/main/python/systemml/systemml-java</directory>
								</fileset>
								<fileset>
									<directory>src/main/python/systemml/__pycache__</directory>
								</fileset>
								<fileset>
									<directory>src/main/python/systemml/mllearn</directory>
									<includes>
										<include>*.pyc</include>
									</includes>
								</fileset>
								<fileset>
									<directory>src/main/python/systemml/mllearn/__pycache__</directory>
								</fileset>
								<fileset>
									<directory>src/main/python/systemml</directory>
									<includes>
										<include>project_info.py</include>
										<include>*.pyc</include>
									</includes>
								</fileset>
							</filesets>
						</configuration>
					</execution>
					<execution>
						<!-- remove antlr tokens files during initialize phase so antlr4 -->
						<!-- plugin can regenerate them during generate-sources phase -->
						<id>remove-antlr-tokens-files</id>
						<phase>initialize</phase>
						<goals>
							<goal>clean</goal>
						</goals>
						<configuration>
							<filesets>
								<fileset>
									<directory>src/main/java</directory>
									<includes>
										<include>*.tokens</include>
									</includes>
								</fileset>
							</filesets>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<configuration>
					<tarLongFileMode>gnu</tarLongFileMode>
				</configuration>
				<executions>
					<execution>
						<id>create-main-jar</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptors>
								<descriptor>src/assembly/jar.xml</descriptor>
							</descriptors>
							<appendAssemblyId>false</appendAssemblyId>
							<archive>
								<manifest>
									<mainClass>org.apache.sysml.api.DMLScript</mainClass>
								</manifest>
								<manifestEntries>
									<Build-Time>${maven.build.timestamp}</Build-Time>
									<Group-Id>${project.groupId}</Group-Id>
									<Artifact-Id>${project.artifactId}</Artifact-Id>
									<Version>${project.version}</Version>
									<Minimum-Recommended-Spark-Version>${spark.version}</Minimum-Recommended-Spark-Version>
								</manifestEntries>
							</archive>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>copy</id>
						<phase>package</phase>
						<configuration>
							<target name="copy and rename JAR">
								<copy file="${project.build.directory}/${project.artifactId}-${project.version}.jar" tofile="${project.build.directory}/SystemML.jar" />
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.6.0</version>
				<executions>
					<execution>
						<id>install-dependency-for-integration-tests</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>java</goal>
						</goals>
						<configuration>
							<mainClass>org.apache.sysml.utils.InstallDependencyForIntegrationTests</mainClass>
							<arguments>
								<argument>true</argument> <!-- <argument>${skipTests}</argument> -->
								<argument>${enableGPU}</argument>
							</arguments>
						</configuration>
					</execution>
					<execution>
						<id>generate-classes-for-mlcontext</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>java</goal>
						</goals>
						<configuration>
							<mainClass>org.apache.sysml.utils.GenerateClassesForMLContext</mainClass>
							<arguments>
								<arguments>scripts</arguments>
								<arguments>target/classes</arguments>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.7.6.201602180812</version>
				<executions>
					<execution>
						<id>prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.eluder.coveralls</groupId>
				<artifactId>coveralls-maven-plugin</artifactId>
				<version>4.3.0</version>
			</plugin>
		</plugins>
	</build>

	<profiles>

		<profile>
			<id>windows-x86_64</id>
			<activation>
				<os>
					<family>windows</family>
					<arch>amd64</arch>
				</os>
			</activation>
			<properties>
				<jcuda.os>windows</jcuda.os>
				<jcuda.arch>x86_64</jcuda.arch>
			</properties>
		</profile>
		<profile>
			<id>linux-x86_64</id>
			<activation>
				<os>
					<family>unix</family>
					<arch>amd64</arch>
				</os>
			</activation>
			<properties>
				<jcuda.os>linux</jcuda.os>
				<jcuda.arch>x86_64</jcuda.arch>
			</properties>
		</profile>
		<profile>
			<id>apple-x86_64</id>
			<activation>
				<os>
					<family>mac</family>
					<arch>x86_64</arch>
				</os>
			</activation>
			<properties>
				<jcuda.os>apple</jcuda.os>
				<jcuda.arch>x86_64</jcuda.arch>
			</properties>
		</profile>
		<profile>
			<id>linux-ppc_64</id>
			<activation>
				<os>
					<family>unix</family>
					<arch>ppc64le</arch>
				</os>
			</activation>
			<properties>
				<jcuda.os>linux</jcuda.os>
				<jcuda.arch>ppc_64</jcuda.arch>
			</properties>
		</profile>

		<profile>
			<id>scala-2.10</id>
			<properties>
				<scala.version>2.10.5</scala.version>
				<scala.binary.version>2.10</scala.binary.version>
			</properties>
		</profile>

		<profile>
			<id>scala-2.11</id>
			<properties>
				<scala.version>2.11.8</scala.version>
				<scala.binary.version>2.11</scala.binary.version>
			</properties>
		</profile>

		<profile>
			<!-- Profile for Windows builds. Not currently needed, but might be needed 
				in the future. -->
			<id>platform-windows</id>
			<activation>
				<os>
					<family>windows</family>
				</os>
			</activation>
			<properties>
				<!-- Extra JVM args for Windows go here. -->
				<integrationTestExtraJVMArgs />
			</properties>
		</profile>

		<profile>
			<id>eclipse-only</id>
			<activation>
				<property>
					<name>m2e.version</name>
				</property>
			</activation>
			<build>
				<pluginManagement>
					<plugins>
						<!-- Prevent m2e warnings in Eclipse. -->
						<plugin>
							<groupId>org.eclipse.m2e</groupId>
							<artifactId>lifecycle-mapping</artifactId>
							<version>1.0.0</version>
							<configuration>
								<lifecycleMappingMetadata>
									<pluginExecutions>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>org.apache.maven.plugins</groupId>
												<artifactId>maven-remote-resources-plugin</artifactId>
												<versionRange>[1.4,)</versionRange>
												<goals>
													<goal>process</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore>
												</ignore>
											</action>
										</pluginExecution>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>org.apache.maven.plugins</groupId>
												<artifactId>maven-clean-plugin</artifactId>
												<versionRange>[3.0.0,)</versionRange>
												<goals>
													<goal>clean</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore>
												</ignore>
											</action>
										</pluginExecution>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>org.apache.maven.plugins</groupId>
												<artifactId>maven-dependency-plugin</artifactId>
												<versionRange>[2.10,)</versionRange>
												<goals>
													<goal>copy-dependencies</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore>
												</ignore>
											</action>
										</pluginExecution>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>net.alchim31.maven</groupId>
												<artifactId>scala-maven-plugin</artifactId>
												<versionRange>[3.2.2,)</versionRange>
												<goals>
													<goal>add-source</goal>
													<goal>compile</goal>
													<goal>testCompile</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore>
												</ignore>
											</action>
										</pluginExecution>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>org.codehaus.mojo</groupId>
												<artifactId>build-helper-maven-plugin</artifactId>
												<versionRange>[1.8,)</versionRange>
												<goals>
													<goal>add-test-source</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore>
												</ignore>
											</action>
										</pluginExecution>
									</pluginExecutions>
								</lifecycleMappingMetadata>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>

		<profile>
			<id>rat</id>
			<build>
				<defaultGoal>clean org.apache.rat:apache-rat-plugin:check</defaultGoal>
				<plugins>
					<plugin>
						<groupId>org.apache.rat</groupId>
						<artifactId>apache-rat-plugin</artifactId>
						<version>0.12</version>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>check</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<excludes>
								<exclude>.gitignore</exclude>
								<exclude>.repository/</exclude>
								<exclude>.idea/</exclude>
								<exclude>.git</exclude>
								<exclude>.settings</exclude>
								<exclude>.classpath</exclude>
								<exclude>.project</exclude>
								<exclude>docs</exclude>
								<exclude>**/docs/**</exclude>
								<exclude>**/*.csv</exclude>
								<exclude>**/*.ijv</exclude>
								<exclude>**/*.json</exclude>
								<exclude>**/*.mtx</exclude>
								<exclude>**/*.mtd</exclude>
								<exclude>**/part-*</exclude>
								<exclude>**/*.keep</exclude>
								<exclude>**/target/**</exclude>
								<exclude>**/README.md</exclude>
								<exclude>**/*.svg</exclude>
								<!-- Jupyter Notebooks -->
								<exclude>**/*.ipynb</exclude>
								<!-- Generated antlr files -->
								<exclude>src/main/java/*.tokens</exclude>
								<exclude>**/*.interp</exclude>
								<!-- Generated python files -->
								<exclude>src/main/python/systemml.egg-info/**</exclude>
								<!-- Sphinx reStructuredText files -->
								<exclude>src/main/pythondoc/*.rst</exclude>
								<!-- Compiled ptx file from nvcc -->
								<exclude>src/main/cpp/kernels/SystemML.ptx</exclude>
								<!-- Proto files -->
								<exclude>src/main/proto/caffe/caffe.proto</exclude>
								<exclude>scripts/nn/examples/caffe2dml/models/**/*</exclude>
								<!-- Test Validation files -->
								<exclude>src/test/scripts/functions/jmlc/**/*.impute</exclude>
								<exclude>src/test/scripts/functions/jmlc/**/*.map</exclude>
								<exclude>src/test/scripts/functions/jmlc/**/*.mode</exclude>
								<exclude>src/test/scripts/functions/jmlc/**/*.ndistinct</exclude>
								<exclude>src/test/scripts/functions/jmlc/**/*.node</exclude>
								<exclude>src/test/scripts/functions/jmlc/tfmtd_example/Bin/saleprice.bin</exclude>
								<exclude>src/test/scripts/functions/jmlc/tfmtd_example/Bin/sqft.bin</exclude>
								<exclude>src/test/scripts/functions/jmlc/tfmtd_example/column.names</exclude>
								<exclude>src/test/scripts/functions/jmlc/tfmtd_example/dummycoded.column.names</exclude>
								<exclude>src/test/scripts/functions/jmlc/tfmtd_example2/column.names</exclude>
								<exclude>src/test/scripts/functions/jmlc/tfmtd_frame_example/tfmtd_frame</exclude>
								<!-- Perftest requirement file -->
								<exclude>scripts/perftest/python/requirements.txt</exclude>
							</excludes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- profile to enable running tests on the GPU -->
		<profile>
			<id>gpuTests</id>
			<properties>
				<gpuTestsPath>**/integration/gpu/**/*Suite.java</gpuTestsPath>
			</properties>
		</profile>

		<profile>
			<!-- Can be used to ignore doclint javadoc issues -->
			<id>ignore-doclint</id>
			<!-- <activation> <jdk>[1.8,)</jdk> </activation> -->
			<properties>
				<javadoc.opts>-Xdoclint:none</javadoc.opts>
			</properties>
		</profile>

		<profile>
			<!-- Profile to create binary distributions. Execute with `mvn clean package 
				-P distribution` -->
			<id>distribution</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<configuration>
							<tarLongFileMode>gnu</tarLongFileMode>
						</configuration>
						<executions>
							<execution>
								<id>create-source-distribution</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>src/assembly/source.xml</descriptor>
									</descriptors>
								</configuration>
							</execution>

							<execution>
								<id>create-binary-distribution</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>src/assembly/bin.xml</descriptor>
									</descriptors>
								</configuration>
							</execution>
							<execution>
								<id>create-extra-jar</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>src/assembly/extra.xml</descriptor>
									</descriptors>
									<archive>
										<manifestEntries>
											<Build-Time>${maven.build.timestamp}</Build-Time>
											<Artifact-Id>${project.artifactId}-extra</Artifact-Id>
											<Version>${project.version}</Version>
										</manifestEntries>
									</archive>
									<classifier>extra</classifier>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>1.6</version>
						<executions>
							<execution>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-source-plugin</artifactId>
						<version>2.4</version>
						<executions>
							<execution>
								<id>attach-sources</id>
								<goals>
									<goal>jar-no-fork</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-remote-resources-plugin</artifactId>
						<version>1.4</version>
						<executions>
							<execution>
								<goals>
									<goal>process</goal>
								</goals>
								<configuration>
									<resourceBundles>
										<!-- Will generate META-INF/DEPENDENCIES META-INF/LICENSE META-INF/NOTICE -->
										<resourceBundle>org.apache:apache-jar-resource-bundle:1.4</resourceBundle>
									</resourceBundles>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<version>2.10.3</version>
						<configuration>
							<!-- Need to include the following packages, so exclude others: org.apache.sysml.api 
								org.apache.sysml.runtime.instructions.spark.utils (for RDDConverterUtils, 
								etc) org.apache.sysml.runtime.matrix (for MatrixCharacteristics, etc) org.apache.sysml.runtime.matrix.data 
								(for MatrixIndexes, MatrixBlock, etc) org.apache.sysml.udf -->
							<excludePackageNames>caffe:org.apache.sysml.conf:org.apache.sysml.debug:org.apache.sysml.hops:org.apache.sysml.lops:org.apache.sysml.parser:org.apache.sysml.runtime.controlprogram:org.apache.sysml.runtime.functionobjects:org.apache.sysml.runtime.instructions.cp:org.apache.sysml.runtime.instructions.cpfile:org.apache.sysml.runtime.instructions.mr:org.apache.sysml.runtime.instructions.spark.data:org.apache.sysml.runtime.instructions.spark.functions:org.apache.sysml.runtime.io:org.apache.sysml.runtime.matrix.data.hadoopfix:org.apache.sysml.runtime.matrix.mapred:org.apache.sysml.runtime.matrix.operators:org.apache.sysml.runtime.matrix.sort:org.apache.sysml.runtime.transform:org.apache.sysml.runtime.util:org.apache.sysml.utils:org.apache.sysml.yarn</excludePackageNames>
							<additionalparam>${javadoc.opts}</additionalparam>
						</configuration>
						<executions>
							<execution>
								<id>attach-javadocs</id>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<executions>
							<execution>
								<id>copy-project-info-for-python</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<overwrite>true</overwrite>
									<outputDirectory>${basedir}/src/main/python/systemml</outputDirectory>
									<resources>
										<resource>
											<directory>${basedir}/src/main/resources/python</directory>
											<includes>
												<include>project_info.py</include>
											</includes>
											<filtering>true</filtering>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.6.0</version>
						<executions>
							<execution>
								<id>generate-python-package-1</id>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>python</executable>
									<workingDirectory>src/main/python</workingDirectory>
									<arguments>
										<argument>pre_setup.py</argument>
									</arguments>
								</configuration>
							</execution>
							<execution>
								<id>generate-python-package-2</id>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>python</executable>
									<workingDirectory>src/main/python</workingDirectory>
									<arguments>
										<argument>setup.py</argument>
										<argument>sdist</argument>
										<argument>--dist-dir=../../../target</argument>
									</arguments>
								</configuration>
							</execution>
							<execution>
								<id>generate-python-package-3</id>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>python</executable>
									<workingDirectory>src/main/python</workingDirectory>
									<arguments>
										<argument>post_setup.py</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- Attach python artifact so it can be installed and deployed. -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<version>1.8</version>
						<executions>
							<execution>
								<id>attach-python-artifact</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>attach-artifact</goal>
								</goals>
								<configuration>
									<artifacts>
										<artifact>
											<file>${basedir}/target/${project.artifactId}-${project.version}-python.tar.gz</file>
											<type>tar.gz</type>
											<classifier>python</classifier>
										</artifact>
									</artifacts>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- Profile to create lightweight jar (currently for JMLC only) -->
			<id>lite</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<configuration>
							<tarLongFileMode>gnu</tarLongFileMode>
						</configuration>
						<executions>
							<execution>
								<id>create-lite-jar</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>src/assembly/lite.xml</descriptor>
									</descriptors>
									<archive>
										<manifest>
											<mainClass>org.apache.sysml.api.DMLScript</mainClass>
										</manifest>
										<manifestEntries>
											<Build-Time>${maven.build.timestamp}</Build-Time>
											<Group-Id>${project.groupId}</Group-Id>
											<Artifact-Id>${project.artifactId}-lite</Artifact-Id>
											<Version>${project.version}</Version>
										</manifestEntries>
									</archive>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- Profile to create standalone jar. Execute with `mvn clean package 
				-P standalone-jar` -->
			<id>standalone-jar</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<configuration>
							<tarLongFileMode>gnu</tarLongFileMode>
						</configuration>
						<executions>
							<execution>
								<id>create-standalone-jar</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptors>
										<descriptor>src/assembly/standalone-jar.xml</descriptor>
									</descriptors>
									<archive>
										<index>true</index>
										<manifest>
											<mainClass>org.apache.sysml.api.DMLScript</mainClass>
										</manifest>
									</archive>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>


	<dependencies>
		<dependency>
			<groupId>com.google.protobuf</groupId>
			<artifactId>protobuf-java</artifactId>
			<version>3.2.0</version>
		</dependency>
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcuda</artifactId>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
			<exclusions>
	        	<exclusion>  
	        		<!-- always exclude recursive fetching of native libraries -->
	          		<groupId>org.jcuda</groupId>
					<artifactId>jcuda-natives</artifactId>
	        	</exclusion>
	      	</exclusions> 
		</dependency>
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcublas</artifactId>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
			<exclusions>
	        	<exclusion>  
	        		<!-- always exclude recursive fetching of native libraries -->
	          		<groupId>org.jcuda</groupId>
					<artifactId>jcublas-natives</artifactId>
	        	</exclusion>
	      	</exclusions>
		</dependency>
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcusparse</artifactId>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
			<exclusions>
	        	<exclusion>  
	        		<!-- always exclude recursive fetching of native libraries -->
	          		<groupId>org.jcuda</groupId>
					<artifactId>jcusparse-natives</artifactId>
	        	</exclusion>
	      	</exclusions>
		</dependency>
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcusolver</artifactId>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
			<exclusions>
	        	<exclusion>  
	        		<!-- always exclude recursive fetching of native libraries -->
	          		<groupId>org.jcuda</groupId>
					<artifactId>jcusolver-natives</artifactId>
	        	</exclusion>
	      	</exclusions>
		</dependency>
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcudnn</artifactId>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
			<exclusions>
	        	<exclusion>  
	        		<!-- always exclude recursive fetching of native libraries -->
	          		<groupId>org.jcuda</groupId>
					<artifactId>jcudnn-natives</artifactId>
	        	</exclusion>
	      	</exclusions>
		</dependency>

		<!-- for all platforms, to be included in the extra jar -->
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcuda-natives</artifactId>
			<classifier>windows-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcublas-natives</artifactId>
			<classifier>windows-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcusparse-natives</artifactId>
			<classifier>windows-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcusolver-natives</artifactId>
			<classifier>windows-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcudnn-natives</artifactId>
			<classifier>windows-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>

		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcuda-natives</artifactId>
			<classifier>linux-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcublas-natives</artifactId>
			<classifier>linux-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcusparse-natives</artifactId>
			<classifier>linux-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcusolver-natives</artifactId>
			<classifier>linux-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcudnn-natives</artifactId>
			<classifier>linux-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>

		<!-- Commented until the PowerPC jcuda libraries are deployed for 0.9.0 version
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcuda-natives</artifactId>
			<classifier>linux-ppc_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcublas-natives</artifactId>
			<classifier>linux-ppc_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcusparse-natives</artifactId>
			<classifier>linux-ppc_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcusolver-natives</artifactId>
			<classifier>linux-ppc_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcudnn-natives</artifactId>
			<classifier>linux-ppc_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>
		 -->
		 
		 <!-- Commented until the MacOS jcuda libraries are deployed for 0.9.0 version
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcuda-natives</artifactId>
			<classifier>apple-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcublas-natives</artifactId>
			<classifier>apple-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcusparse-natives</artifactId>
			<classifier>apple-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcusolver-natives</artifactId>
			<classifier>apple-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>
		<dependency>
			<groupId>org.jcuda</groupId>
			<artifactId>jcudnn-natives</artifactId>
			<classifier>apple-x86_64</classifier>
			<version>${jcuda.version}</version>
			<scope>${jcuda.scope}</scope>
		</dependency>
		 -->

		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-mllib_${scala.binary.version}</artifactId>
			<version>${spark.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-common</artifactId>
			<version>${hadoop.version}</version>
			<exclusions>
				<exclusion>
					<groupId>javax.servlet</groupId>
					<artifactId>servlet-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-hdfs</artifactId>
			<version>${hadoop.version}</version>
			<exclusions>
				<exclusion>
					<groupId>javax.servlet</groupId>
					<artifactId>servlet-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-client</artifactId>
			<version>${hadoop.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-mapreduce-client-app</artifactId>
			<version>${hadoop.version}</version>
			<exclusions>
				<exclusion>
					<groupId>javax.servlet</groupId>
					<artifactId>servlet-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-mapreduce-client-jobclient</artifactId>
			<version>${hadoop.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.1.3</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-math3</artifactId>
			<version>3.4.1</version>
		</dependency>

		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.15</version>
			<exclusions>
				<exclusion>
					<groupId>com.sun.jmx</groupId>
					<artifactId>jmxri</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jdmk</groupId>
					<artifactId>jmxtools</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.jms</groupId>
					<artifactId>jms</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.apache.wink</groupId>
			<artifactId>wink-json4j</artifactId>
			<version>1.4</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<version>3.2.1</version>
		</dependency>

		<!-- fast java compiler for codegen, consistent version w/ spark -->
		<dependency>
			<groupId>org.codehaus.janino</groupId>
			<artifactId>janino</artifactId>
			<version>3.0.8</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.antlr</groupId>
			<artifactId>antlr4</artifactId>
			<version>${antlr.version}</version>
			<scope>provided</scope>
			<exclusions>
				<exclusion>
					<artifactId>antlr-runtime</artifactId>
					<groupId>org.antlr</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.antlr</groupId>
			<artifactId>antlr4-runtime</artifactId>
			<version>${antlr.version}</version>
		</dependency>

		<!-- Libraries for yarn integration -->
		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-yarn-api</artifactId>
			<version>${hadoop.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-yarn-common</artifactId>
			<version>${hadoop.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-yarn-client</artifactId>
			<version>${hadoop.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.hadoop</groupId>
			<artifactId>hadoop-mapreduce-client-common</artifactId>
			<version>${hadoop.version}</version>
		</dependency>
		<dependency>
			<groupId>org.scala-lang</groupId>
			<artifactId>scala-library</artifactId>
			<version>${scala.version}</version>
		</dependency>
		<dependency>
			<groupId>org.scala-lang</groupId>
			<artifactId>scalap</artifactId>
			<version>${scala.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.scalatest</groupId>
			<artifactId>scalatest_${scala.binary.version}</artifactId>
			<version>${scala.test.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>1.9.5</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

</project>
