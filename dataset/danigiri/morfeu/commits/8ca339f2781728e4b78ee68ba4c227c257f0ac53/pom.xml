<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>cat.calidos.morfeu</groupId>
	<artifactId>morfeu-webapp</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>

	<name>Morfeu web application</name>
	<!-- find . -name "*.ts" -exec bash -c 'unexpand -t 4 "$0" > /tmp/a && mv -v /tmp/a "$0"' {} \; -->
	<description>TBD</description>
	<inceptionYear>2016</inceptionYear>

	<properties>
		<jetty-http-port>8080</jetty-http-port>
		<jetty-stop-port>8180</jetty-stop-port>
		<jetty-context-path>/morfeu</jetty-context-path>
		<webapp-prefix>http://localhost:${jetty-http-port}${jetty-context-path}/</webapp-prefix>
		<resources-prefix>file://${project.basedir}/</resources-prefix>
		<jackson-2-version>2.9.4</jackson-2-version>
		<dagger-2-version>2.11</dagger-2-version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties>

	<build>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.0</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>com.google.dagger</groupId>
						<artifactId>dagger-compiler</artifactId>
						<version>${dagger-2-version}</version>
						<optional>true</optional>
					</dependency>
				</dependencies>
			</plugin>
		
			<plugin>
			    <groupId>org.eclipse.jetty</groupId>
			    <artifactId>jetty-maven-plugin</artifactId>
			    <version>9.4.8.v20171121</version>
				<configuration>
					<dumpOnStart>false</dumpOnStart> <!-- set to true for debugging -->
					<scanIntervalSeconds>1</scanIntervalSeconds>
					<stopPort>${jetty-stop-port}</stopPort>
					<stopKey>STOP</stopKey>
					<useTestScope>true</useTestScope>
					<webApp>
						<contextPath>${jetty-context-path}</contextPath>
						<!-- we add this extra classpath so jetty loads templates and all jar deps like jackson and stuff -->
						<extraClasspath>${project.build.directory}/${project.artifactId}-${project.version}/WEB-INF/lib</extraClasspath>
						<resourceBases>
							<resourceBase>${basedir}/src/main/webapp</resourceBase><!-- eventually set  to /dist? -->
							<resourceBase>${basedir}/src/test/resources</resourceBase>	<!-- data files for angular2 -->
							<!-- fallback for testing: /morfeu/target/test-classes/test-resources/.. is ok -->
							<resourceBase>${basedir}</resourceBase>
						</resourceBases>
						<webInfIncludeJarPattern>^$</webInfIncludeJarPattern>
					</webApp>
					<!--scanTargetPatterns> this is a terrible idea, it seems that it opens all the files
          				<scanTargetPattern> in the exclude, which leads to thousands of fds being used
          					< directory>src/main/webapp</directory>
          					<excludes>
					              <exclude>node_modules</exclude>
				              </excludes>
          				</scanTargetPattern>
    					</scanTargetPatterns-->
					<systemProperties>
						<systemProperty>
							<name>org.eclipse.jetty.annotations.maxWait</name>
							<value>60000</value>
						</systemProperty>
						<systemProperty> <!-- mvn jetty:run -DRESOURCES_PREFIX=file://$(PWD)/  -->
							<name>RESOURCES_PREFIX</name>
							<value>${resources-prefix}</value>
						</systemProperty>
					</systemProperties>
					<httpConnector>
						<port>${jetty-http-port}</port>
					</httpConnector>
				</configuration>
				<executions>
					<execution>	<!-- start jetty when target is integration testing -->
					<id>start-jetty-integration-test</id>
					<phase>pre-integration-test</phase>
				        <goals>
					         <goal>run</goal>
					    </goals>
					    <configuration>
					        <scanIntervalSeconds>0</scanIntervalSeconds>
						    	<daemon>true</daemon>
						</configuration>
					</execution>
					<execution>	<!-- stop jetty when completed integration testing -->
						<id>stop-jetty</id>
						<phase>post-integration-test</phase>
						<goals>
					    	<goal>stop</goal>
					 	</goals>
					 	<configuration>
	 						<stopKey>STOP</stopKey>
							<stopPort>${jetty-stop-port}</stopPort>			 	
					 	</configuration>
					</execution>
				</executions>
			</plugin>
	      <plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.13</version>
        		<configuration>
	          		<excludes>	<!-- no UI/integration tests in unit testing -->
	            		<exclude>**/*IntTest*</exclude>
	            		<exclude>**/*UITest*</exclude>
	          		</excludes>
				</configuration>
			</plugin>
			<plugin>
		        <groupId>org.apache.maven.plugins</groupId>
		        <artifactId>maven-failsafe-plugin</artifactId>
		        <version>2.20.1</version>
		        <configuration>
					<systemPropertyVariables>
						<TMP_FOLDER>${project.build.directory}/integration-tests-tmp</TMP_FOLDER>
					</systemPropertyVariables>
		        </configuration>
		        <executions>
		          <execution>
		            <goals>
		              <goal>integration-test</goal>
		              <goal>verify</goal>
		            </goals>
					<configuration>
						<includes>
		            		<include>**/*IntTest*</include>
	    		       		<include>**/*UITest*</include>
						</includes>
					</configuration>
		          </execution>
		        </executions>
	      </plugin>
		</plugins>
		
	</build>
	<dependencies>
		<!-- DEPENDENCY INJECTION -->
		<dependency>
			<groupId>com.google.dagger</groupId>
			<artifactId>dagger</artifactId>
			<version>${dagger-2-version}</version>
		</dependency>
		<dependency>
			<groupId>com.google.dagger</groupId>
			<artifactId>dagger-compiler</artifactId>
			<version>${dagger-2-version}</version>
			<optional>true</optional>
		</dependency>
		<dependency>
		    <groupId>javax.inject</groupId>
		    <artifactId>javax.inject</artifactId>
		    <version>1</version>
		   <!-- scope>provided</scope-->
		</dependency>

		<!-- XML Schema parsing (compatible license, see here https://xsom.java.net) -->
		<dependency>
		    <groupId>com.sun.xsom</groupId>
		    <artifactId>xsom</artifactId>
		    <version>20140925.0.0.redhat-1</version>
		</dependency>


		<!-- Jackson JSON lib stuff -->
		 <!-- the core, which includes Streaming API, shared low-level abstractions (but NOT data-binding) -->
		 <dependency>
		   <groupId>com.fasterxml.jackson.core</groupId>
		   <artifactId>jackson-core</artifactId>
		   <version>${jackson-2-version}</version>
		 </dependency>
		
		 <!-- Just the annotations; use this dependency if you want to attach annotations
		      to classes without connecting them to the code. -->
		 <dependency>
		   <groupId>com.fasterxml.jackson.core</groupId>
		   <artifactId>jackson-annotations</artifactId>
		   <version>${jackson-2-version}</version>
		</dependency>
		
		<!-- databinding; ObjectMapper, JsonNode and related classes are here -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${jackson-2-version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-yaml</artifactId>
			<version>${jackson-2-version}</version>
		</dependency>
		

		<!-- JETTY RUNTIME -->
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-server</artifactId>
			<version>8.1.9.v20130131</version>
		</dependency>
		<!-- dependency>
			<groupId>org.apache.velocity</groupId>
			<artifactId>velocity</artifactId>
			<version>1.7</version>
		</dependency-->

		<!-- HELPERS -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.6</version>
		</dependency>
		<dependency>
		  <groupId>org.apache.httpcomponents</groupId>
		  <artifactId>httpasyncclient</artifactId>
		  <version>4.1.2</version>
		</dependency>

		<!-- logback -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.2.1</version>
		</dependency>
		
		<dependency>
       		<groupId>org.jtwig</groupId>
        	<artifactId>jtwig-core</artifactId>
        	<version>5.85.3.RELEASE</version>
	    </dependency>
		<dependency>
       		<groupId>org.jtwig</groupId>
        	<artifactId>jtwig-reflection</artifactId>
        	<version>5.85.3.RELEASE</version>
	    </dependency>

		<!-- UNIT TESTING -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
		<dependency>
		    <groupId>org.mockito</groupId>
		    <artifactId>mockito-core</artifactId>
		    <version>2.2.21</version>
			<scope>test</scope>
		</dependency>

		<!-- INTEGRATION TESTING -->
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>2.53.0</version>
			<scope>test</scope>
			<exclusions>
                <!--exclusion>
                   <groupId>org.seleniumhq.selenium</groupId>
                    <artifactId>selenium-chrome-driver</artifactId>
                </exclusion-->
                <exclusion>
                   <groupId>org.seleniumhq.selenium</groupId>
                    <artifactId>selenium-firefox-driver</artifactId>
                </exclusion>
                <exclusion>
                   <groupId>org.seleniumhq.selenium</groupId>
                    <artifactId>selenium-ie-driver</artifactId>
                </exclusion>
                <exclusion>
                   <groupId>org.seleniumhq.selenium</groupId>
                    <artifactId>selenium-iphone-driver</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.seleniumhq.selenium</groupId>
                    <artifactId>selenium-htmlunit-driver</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.seleniumhq.selenium</groupId>
                    <artifactId>selenium-android-driver</artifactId>
                </exclusion>
			</exclusions>
		</dependency>
		
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-server</artifactId>
			<version>3.0.1</version>
		    <scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
		    <artifactId>selenium-chrome-driver</artifactId>
		    <version>3.0.1</version>
		    <scope>test</scope>
		</dependency>
		<dependency>
		    <groupId>com.codeborne</groupId>
		    <artifactId>selenide</artifactId>
		    <version>4.1</version>
		    <scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.xmlunit</groupId>
			<artifactId>xmlunit-core</artifactId>
			<version>2.5.1</version>
		</dependency>

	</dependencies>



	<repositories>
	    <repository>
	      <id>RedHat-GA</id>
	      <name>RedHat GA repository</name>
	      <url>https://maven.repository.redhat.com/ga/</url>
	    </repository>
	    <repository>
	        <id>jcenter</id>
	        <url>https://jcenter.bintray.com/</url>
	    </repository>
	</repositories>
	<licenses>
		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0</url>
			<comments>Copyright (C) 2018 Daniel Giribet</comments>
		</license>
	</licenses>

	<developers>
		<developer>
			<id>danigiri</id>
			<name>Daniel Giribet</name>
			<email>dani AT calidos DOT cat</email>
			<url>http//dani.calidos.com</url>
			<roles>
				<role>creator</role>
				<role>developer</role>
			</roles>
			<timezone>+1</timezone>
		</developer>
	</developers>
</project>
																											
