<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.hunantv.mpp.fw</groupId>
	<artifactId>mpp-fw</artifactId>
	<version>0.2.7</version>
	<name>fw</name>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<jetty.version>9.3.21.v20170918</jetty.version>
		<spring.version>4.0.5.RELEASE</spring.version>
		<jdk.version>1.8</jdk.version>
	</properties>

	<distributionManagement>
		<repository>
			<id>hunantv-releases</id>
			<name>hunantv releases</name>
			<url>http://192.168.1.121:8881/nexus/content/repositories/releases/</url>
		</repository>
		<snapshotRepository>
			<id>hunantv-snapshots</id>
			<name>hunantv snapshots</name>
			<url>http://192.168.1.121:8881/nexus/content/repositories/snapshots/</url>
		</snapshotRepository>
	</distributionManagement>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<configuration>
						<source>${jdk.version}</source>
						<target>${jdk.version}</target>
						<encoding>UTF-8</encoding>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<executions>
						<execution>
							<id>attach-sources</id>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-assembly-plugin</artifactId>
					<configuration>
						<archive>
							<!-- 配置jar包里MANIFEST信息 -->
							<manifest>
								<mainClass>user.UserServer</mainClass>
								<!-- 增加该配置可减少在运行时配置的依赖 -->
								<addClasspath>true</addClasspath>
								<classpathPrefix>lib</classpathPrefix>
							</manifest>
						</archive>
						<descriptor>assembly.xml</descriptor>
						<finalName>fw</finalName>
						<outputDirectory>target</outputDirectory>
						<workDirectory>target</workDirectory>
					</configuration>
				</plugin>
      <plugin>
        <groupId>pl.project13.maven</groupId>
        <artifactId>git-commit-id-plugin</artifactId>
        <version>2.2.2</version>
        <executions>
          <execution>
            <id>get-the-git-infos</id>
            <goals>
              <goal>revision</goal>
            </goals>
          </execution>
          <execution>
            <id>validate-the-git-infos</id>
            <goals>
              <goal>validateRevision</goal>
            </goals>
            <!-- *NOTE*: The default phase of validateRevision is verify, but in 
              case you want to change it, you can do so by adding the phase here -->
            <phase>package</phase>
          </execution>
        </executions>

        <configuration>
          <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
          <prefix>git</prefix>
          <dateFormat>yyyy-MM-dd HH:mm:ss z</dateFormat>
          <dateFormatTimeZone>${user.timezone}</dateFormatTimeZone>
          <verbose>true</verbose>

          <!-- ALTERNATE SETUP - GENERATE FILE -->
          <!-- If you want to keep git information, even in your WAR file etc, 
            use this mode, which will generate a properties file (with filled out values) 
            which you can then normally read using new Properties().load(/**/) -->

          <!-- This is false by default, forces the plugin to generate the git.properties 
            file. Note that the functional meaning of git.build.time becomes different 
            in a very subtle way (see later in this README) -->
          <generateGitPropertiesFile>true</generateGitPropertiesFile>
          <generateGitPropertiesFilename>${project.basedir}/confs/git.properties</generateGitPropertiesFilename>
          <format>properties</format>
          <injectAllReactorProjects>false</injectAllReactorProjects>
          <failOnNoGitDirectory>true</failOnNoGitDirectory>
          <failOnUnableToExtractRepoInfo>true</failOnUnableToExtractRepoInfo>
          <skip>false</skip>
          <runOnlyOnce>false</runOnlyOnce>

          <!-- @since 2.1.9 -->
          <!-- Can be used to exclude certain properties from being emitted into 
            the resulting file. May be useful when you want to hide {@code git.remote.origin.url} 
            (maybe because it contains your repo password?), or the email of the committer 
            etc. Each value may be globbing, that is, you can write {@code git.commit.user.*} 
            to exclude both, the {@code name}, as well as {@code email} properties from 
            being emitted into the resulting files. Please note that the strings here 
            are Java regexes ({@code .*} is globbing, not plain {@code *}). -->
          <excludeProperties>
            <!-- <excludeProperty>git.user.*</excludeProperty> -->
          </excludeProperties>

          <!-- @since 2.1.14 -->
          <!-- Can be used to include only certain properties into the resulting 
            file. Will be overruled by the exclude properties. Each value may be globbing, 
            that is, you can write {@code git.commit.user.*} to include both, the {@code 
            name}, as well as {@code email} properties into the resulting files. Please 
            note that the strings here are Java regexes ({@code .*} is globbing, not 
            plain {@code *}). -->
          <includeOnlyProperties>
            <!-- <includeOnlyProperty>^git.commit.id.full$</includeOnlyProperty> -->
          </includeOnlyProperties>
          <abbrevLength>8</abbrevLength>


          <!-- @since v2.2.0 -->
          <!-- The option can be used to tell the plugin how it should generate 
            the 'git.commit.id' property. Due to some naming issues when exporting the 
            properties as an json-object (https://github.com/ktoso/maven-git-commit-id-plugin/issues/122) 
            we needed to make it possible to export all properties as a valid json-object. 
            Due to the fact that this is one of the major properties the plugin is exporting 
            we just don't want to change the exporting mechanism and somehow throw the 
            backwards compatibility away. We rather provide a convenient switch where 
            you can choose if you would like the properties as they always had been, 
            or if you rather need to support full json-object compatibility. In the case 
            you need to fully support json-object we unfortunately need to change the 
            'git.commit.id' property from 'git.commit.id' to 'git.commit.id.full' in 
            the exporting mechanism to allow the generation of a fully valid json object. 
            Currently the switch allows two different options: 1. By default this property 
            is set to 'flat' and will generate the formerly known property 'git.commit.id' 
            as it was in the previous versions of the plugin. Keeping it to 'flat' by 
            default preserve backwards compatibility and does not require further adjustments 
            by the end user. 2. If you set this switch to 'full' the plugin will export 
            the formerly known property 'git.commit.id' as 'git.commit.id.full' and therefore 
            will generate a fully valid json object in the exporting mechanism. *Note*: 
            Depending on your plugin configuration you obviously can choose the 'prefix' 
            of your properties by setting it accordingly in the plugin's configuration. 
            As a result this is therefore only an illustration what the switch means 
            when the 'prefix' is set to it's default value. *Note*: If you set the value 
            to something that's not equal to 'flat' or 'full' (ignoring the case) the 
            plugin will output a warning and will fallback to the default 'flat' mode. -->
          <commitIdGenerationMode>flat</commitIdGenerationMode>

          <!-- @since 2.1.0 -->
          <!-- read up about git-describe on the in man, or it's homepage - it's 
            a really powerful versioning helper and the recommended way to use git-commit-id-plugin. 
            The configuration bellow is optional, by default describe will run "just 
            like git-describe on the command line", even though it's a JGit reimplementation. -->
          <gitDescribe>

            <!-- don't generate the describe property -->
            <skip>false</skip>

            <!-- if no tag was found "near" this commit, just print the commit's 
              id instead, helpful when you always expect this field to be not-empty -->
            <always>false</always>
            <!-- how many chars should be displayed as the commit object id? 7 
              is git's default, 0 has a special meaning (see end of this README.md), and 
              40 is the maximum value here -->
            <abbrev>8</abbrev>

            <!-- when the build is triggered while the repo is in "dirty state", 
              append this suffix -->
            <dirty>-dirty</dirty>

            <!-- Only consider tags matching the given pattern. This can be used 
              to avoid leaking private tags from the repository. -->
            <match>*</match>

            <!-- when you run git-describe it only looks only for *annotated tags* 
              by default if you wish to consider *lightweight tags* in your describe as 
              well you would need to switch this to *true* The difference between *annotated 
              tags* and *lightweight tags* is outlined in more depth here: https://github.com/ktoso/maven-git-commit-id-plugin/#git-describe-and-a-small-gotcha-with-tags -->
            <tags>false</tags>

            <!-- always print using the "tag-commits_from_tag-g_commit_id-maybe_dirty" 
              format, even if "on" a tag. The distance will always be 0 if you're "on" 
              the tag. -->
            <forceLongFormat>false</forceLongFormat>
          </gitDescribe>
        </configuration>
      </plugin>
			</plugins>
		</pluginManagement>
	</build>

	<dependencies>
		<!-- jetty lib -->
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-server</artifactId>
			<version>${jetty.version}</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-webapp</artifactId>
			<version>${jetty.version}</version>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-servlets</artifactId>
			<version>${jetty.version}</version>
		</dependency>
		<!-- <dependency> <groupId>org.eclipse.jetty</groupId> <artifactId>jetty-utils</artifactId> 
			<version>3.0</version> </dependency> <dependency> <groupId>org.eclipse.jetty</groupId> 
			<artifactId>jetty-client</artifactId> <version>${jetty-version}</version> 
			</dependency> <dependency> <groupId>org.eclipse.jetty.toolchain</groupId> 
			<artifactId>jetty-test-helper</artifactId> <version>3.0</version> </dependency> 
			<dependency> <groupId>org.eclipse.jetty</groupId> <artifactId>jetty-websocket</artifactId> 
			<version>8.1.17.v20150415</version> </dependency> -->

		<!-- jetty lib end -->

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
		</dependency>

		<dependency>
			<groupId>c3p0</groupId>
			<artifactId>c3p0</artifactId>
			<version>0.9.1.2</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.26</version>
		</dependency>

		<dependency>
			<groupId>org.xerial</groupId>
			<artifactId>sqlite-jdbc</artifactId>
			<version>3.7.2</version>
		</dependency>

		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>1.1.43.android</version>
		</dependency>

		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.16</version>
		</dependency>

	 <dependency>
	    <groupId>org.slf4j</groupId>
	    <artifactId>slf4j-log4j12</artifactId>
	    <version>1.7.25</version>
	 </dependency>

		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5.3</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.easymock</groupId>
			<artifactId>easymock</artifactId>
			<version>3.0</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<version>1.9.2</version>
		</dependency>

		<dependency>
			<groupId>org.freemarker</groupId>
			<artifactId>freemarker</artifactId>
			<version>2.3.20</version>
		</dependency>

		<dependency>
			<groupId>redis.clients</groupId>
			<artifactId>jedis</artifactId>
			<version>2.9.0</version>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.directmemory</groupId>
			<artifactId>directmemory-cache</artifactId>
			<version>0.2</version>
		</dependency>

		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache</artifactId>
			<version>2.9.0</version>
		</dependency>
		<dependency>
			<groupId>javax.mail</groupId>
			<artifactId>mail</artifactId>
			<version>1.4.7</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>
</project>
