<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.appleyk</groupId>
    <artifactId>springbootmybatis</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>war</packaging>

    <name>springbootmybatis</name>
    <description>Spring Boot 框架 + Mybatis的通用Mapper+ 实现单表的增删改查+批量操作</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
         <!--<version>2.0.4.RELEASE</version>-->
        <version>1.5.12.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <jackson.version>2.9.1</jackson.version>
    </properties>

    <!-- Starter POMs是可以包含到应用中的一个方便的依赖关系描述符集合 -->
    <!-- 该Starters包含很多你搭建项目， 快速运行所需的依赖， 并提供一致的， 管理的传递依赖集。 -->
    <dependencies>

        <!-- 大多数的web应用都使用spring-boot-starter-web模块进行快速搭建和运行。 -->
        <!-- spring-boot-starter-web -->
        <!-- 对全栈web开发的支持， 包括Tomcat和 spring-webmvc -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring 单元测试 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- 添加热部署 devtools：监听文件变动 -->
        <!-- devtools实现了两个ClassLoader-->
        <!-- 一个加载不会改变的类（第三方Jar包）-->
        <!-- 一个加载那些发生改变的文件（配置文件、pom、类...ctc），称restart ClassLoader-->
        <!-- 一旦检测有文件发生变动， 则会抛弃旧的restart ClassLoader重新生成新的restart ClassLoader-->
        <!-- 由于检测变动的文件不是很多，因此重新启动项目会很快（3秒之内进行重启）-->
        <!-- 当Java文件改动时，Spring-boo会快速重新启动 -->
        <!-- 最简单的测试，就是随便找一个文件Ctrl+S一下，就可以看到效果 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <!-- optional=true,依赖不会传递 -->
            <!-- 本项目依赖devtools；若依赖本项目的其他项目想要使用devtools，需要重新引入 -->
            <optional>true</optional>
        </dependency>

        <!-- JUnit单元测试 -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>

        <!-- 添加thymeleaf 支持页面跳转 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <!--Spring-Boot-Mybatis通用Mapper-->
        <!-- https://mvnrepository.com/artifact/tk.mybatis/mapper-spring-boot-starter -->
        <dependency>
            <groupId>tk.mybatis</groupId>
            <artifactId>mapper-spring-boot-starter</artifactId>
            <!-- <version>1.1.5</version> -->
            <version>2.0.2</version>
        </dependency>
        

        <!-- MySql驱动依赖 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>


        <!--阿里巴巴开源数据库连接池-->
        <!-- https://mvnrepository.com/artifact/com.alibaba/druid -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.1.5</version>
        </dependency>

        <!--PageHelper分页插件-->
        <!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper-spring-boot-starter -->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <!--<version>1.2.7</version>-->
           <version>1.1.3</version>
        </dependency>


        <!-- jackson -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
        </dependency>

    </dependencies>

    <!-- Spring Boot包含一个Maven插件， 它可以将项目打包成一个可执行jar -->
    <build>
        <!-- 解决配置资源文件被漏掉问题 -->
        <resources>
            <!--  如果出现thymeleaf无法渲染html模板，请加上这个 -->
            <resource>
                <directory>src/main/resources</directory>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                    <include>**/*.html</include>
                </includes>
                <filtering>false</filtering>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>false</filtering>
            </resource>
        </resources>
        <plugins>

            <!--Spring Boot的Maven插件-->
            <!--以Maven的方式为应用提供Spring Boot的支持，即为Spring Boot应用提供了执行Maven操作的可能-->
            <!--Spring Boot Maven plugin能够将Spring Boot应用打包为可执行的jar或war文件-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <fork>true</fork> <!--  开启热部署【devtools】需要设置为true -->
                </configuration>
            </plugin>

        </plugins>
    </build>


</project>
