{"id":256542418,"node_id":"MDEwOlJlcG9zaXRvcnkyNTY1NDI0MTg=","name":"Dynamic-Multi-Tenancy-Using-Java-Spring-Boot-Security-JWT-Rest-API-MySQL-Postgresql-full-example","full_name":"amran-bd/Dynamic-Multi-Tenancy-Using-Java-Spring-Boot-Security-JWT-Rest-API-MySQL-Postgresql-full-example","private":false,"owner":{"login":"amran-bd","id":25561253,"node_id":"MDQ6VXNlcjI1NTYxMjUz","gravatar_id":"","url":"https://api.github.com/users/amran-bd","type":"User","site_admin":false},"description":"I wanted a solution where multi-tenancy is achieved by having a database per tenant and all user information (username, password, client Id etc) for authentication and authorization stored in a user table in the respective tenant databases. It meant that not only did I need a multi-tenant application, but also a secure application like any other web application secured by Spring Security. I know how to use Spring Security to secure a web application and how to use Hibernate to connect to a database. The requirement further dictated that all users belonging to a tenant be stored in the tenant database and not a separate or central database. This would allow for complete data isolation for each tenant.","fork":false,"url":"https://api.github.com/repos/amran-bd/Dynamic-Multi-Tenancy-Using-Java-Spring-Boot-Security-JWT-Rest-API-MySQL-Postgresql-full-example","created_at":"2020-04-17T15:35:29Z","updated_at":"2020-05-25T06:10:03Z","pushed_at":"2020-04-17T15:43:41Z","size":29,"stargazers_count":7,"watchers_count":7,"language":"Java","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":false,"forks_count":7,"archived":false,"disabled":false,"open_issues_count":0,"forks":7,"open_issues":0,"watchers":7,"default_branch":"master","permissions":{"admin":false,"push":false,"pull":true},"temp_clone_token":"","network_count":7,"subscribers_count":2}