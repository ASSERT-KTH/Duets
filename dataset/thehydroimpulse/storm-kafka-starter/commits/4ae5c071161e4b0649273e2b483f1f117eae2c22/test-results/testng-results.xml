<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="193" passed="193">
  <reporter-output>
  </reporter-output>
  <suite name="Surefire suite" duration-ms="719" started-at="2020-07-30T20:16:09Z" finished-at="2020-07-30T20:16:10Z">
    <groups>
    </groups>
    <test name="Surefire test" duration-ms="719" started-at="2020-07-30T20:16:09Z" finished-at="2020-07-30T20:16:10Z">
      <class name="storm.starter.tools.SlidingWindowCounterTest">
        <test-method status="PASS" signature="lessThanTwoSlotsShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@27e32fe4]" name="lessThanTwoSlotsShouldThrowIAE" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="illegalWindowLengths" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Window length in slots must be at least two (you requested -10)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Window length in slots must be at least two (you requested -10)
	at storm.starter.tools.SlidingWindowCounter.<init>(SlidingWindowCounter.java:63)
	at storm.starter.tools.SlidingWindowCounterTest.lessThanTwoSlotsShouldThrowIAE(SlidingWindowCounterTest.java:22)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lessThanTwoSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="lessThanTwoSlotsShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@27e32fe4]" name="lessThanTwoSlotsShouldThrowIAE" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="illegalWindowLengths" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Window length in slots must be at least two (you requested -1)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Window length in slots must be at least two (you requested -1)
	at storm.starter.tools.SlidingWindowCounter.<init>(SlidingWindowCounter.java:63)
	at storm.starter.tools.SlidingWindowCounterTest.lessThanTwoSlotsShouldThrowIAE(SlidingWindowCounterTest.java:22)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lessThanTwoSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="lessThanTwoSlotsShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@27e32fe4]" name="lessThanTwoSlotsShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalWindowLengths" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-3]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Window length in slots must be at least two (you requested -3)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Window length in slots must be at least two (you requested -3)
	at storm.starter.tools.SlidingWindowCounter.<init>(SlidingWindowCounter.java:63)
	at storm.starter.tools.SlidingWindowCounterTest.lessThanTwoSlotsShouldThrowIAE(SlidingWindowCounterTest.java:22)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lessThanTwoSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="lessThanTwoSlotsShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@27e32fe4]" name="lessThanTwoSlotsShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalWindowLengths" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-2]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Window length in slots must be at least two (you requested -2)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Window length in slots must be at least two (you requested -2)
	at storm.starter.tools.SlidingWindowCounter.<init>(SlidingWindowCounter.java:63)
	at storm.starter.tools.SlidingWindowCounterTest.lessThanTwoSlotsShouldThrowIAE(SlidingWindowCounterTest.java:22)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lessThanTwoSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="newInstanceShouldHaveEmptyCounts()[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@27e32fe4]" name="newInstanceShouldHaveEmptyCounts" duration-ms="0" started-at="2020-07-30T20:16:10Z" finished-at="2020-07-30T20:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newInstanceShouldHaveEmptyCounts -->
        <test-method status="PASS" signature="testCounterWithSimulatedRuns(int, [I, [J)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@27e32fe4]" name="testCounterWithSimulatedRuns" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="simulatedCounterIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@6ea66c33]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[J@59b447a4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCounterWithSimulatedRuns -->
        <test-method status="PASS" signature="lessThanTwoSlotsShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@27e32fe4]" name="lessThanTwoSlotsShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalWindowLengths" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Window length in slots must be at least two (you requested 0)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Window length in slots must be at least two (you requested 0)
	at storm.starter.tools.SlidingWindowCounter.<init>(SlidingWindowCounter.java:63)
	at storm.starter.tools.SlidingWindowCounterTest.lessThanTwoSlotsShouldThrowIAE(SlidingWindowCounterTest.java:22)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lessThanTwoSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="lessThanTwoSlotsShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@27e32fe4]" name="lessThanTwoSlotsShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalWindowLengths" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Window length in slots must be at least two (you requested 1)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Window length in slots must be at least two (you requested 1)
	at storm.starter.tools.SlidingWindowCounter.<init>(SlidingWindowCounter.java:63)
	at storm.starter.tools.SlidingWindowCounterTest.lessThanTwoSlotsShouldThrowIAE(SlidingWindowCounterTest.java:22)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lessThanTwoSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="testCounterWithSimulatedRuns(int, [I, [J)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@27e32fe4]" name="testCounterWithSimulatedRuns" duration-ms="3" started-at="2020-07-30T20:16:10Z" data-provider="simulatedCounterIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@45d7495e]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[J@30517a57]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCounterWithSimulatedRuns -->
        <test-method status="PASS" signature="testCounterWithSimulatedRuns(int, [I, [J)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@27e32fe4]" name="testCounterWithSimulatedRuns" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedCounterIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@49889154]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[J@5c33008f]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCounterWithSimulatedRuns -->
        <test-method status="PASS" signature="testCounterWithSimulatedRuns(int, [I, [J)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@27e32fe4]" name="testCounterWithSimulatedRuns" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedCounterIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@69ba3f4e]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[J@579846cc]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCounterWithSimulatedRuns -->
        <test-method status="PASS" signature="testCounterWithSimulatedRuns(int, [I, [J)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@27e32fe4]" name="testCounterWithSimulatedRuns" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedCounterIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@a826ff8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[J@71f0806b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCounterWithSimulatedRuns -->
        <test-method status="PASS" signature="twoOrMoreSlotsShouldBeValid(int)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@27e32fe4]" name="twoOrMoreSlotsShouldBeValid" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="legalWindowLengths" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- twoOrMoreSlotsShouldBeValid -->
        <test-method status="PASS" signature="twoOrMoreSlotsShouldBeValid(int)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@27e32fe4]" name="twoOrMoreSlotsShouldBeValid" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="legalWindowLengths" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- twoOrMoreSlotsShouldBeValid -->
        <test-method status="PASS" signature="twoOrMoreSlotsShouldBeValid(int)[pri:0, instance:storm.starter.tools.SlidingWindowCounterTest@27e32fe4]" name="twoOrMoreSlotsShouldBeValid" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="legalWindowLengths" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- twoOrMoreSlotsShouldBeValid -->
      </class> <!-- storm.starter.tools.SlidingWindowCounterTest -->
      <class name="storm.starter.bolt.RollingCountBoltTest">
        <test-method status="PASS" signature="shouldDeclareOutputFields()[pri:0, instance:storm.starter.bolt.RollingCountBoltTest@4f449e8f]" name="shouldDeclareOutputFields" duration-ms="2" started-at="2020-07-30T20:16:10Z" finished-at="2020-07-30T20:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldEmitNothingIfNoObjectHasBeenCountedYetAndTickTupleIsReceived()[pri:0, instance:storm.starter.bolt.RollingCountBoltTest@4f449e8f]" name="shouldEmitNothingIfNoObjectHasBeenCountedYetAndTickTupleIsReceived" duration-ms="51" started-at="2020-07-30T20:16:10Z" finished-at="2020-07-30T20:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitNothingIfNoObjectHasBeenCountedYetAndTickTupleIsReceived -->
        <test-method status="PASS" signature="shouldEmitSomethingIfAtLeastOneObjectWasCountedAndTickTupleIsReceived()[pri:0, instance:storm.starter.bolt.RollingCountBoltTest@4f449e8f]" name="shouldEmitSomethingIfAtLeastOneObjectWasCountedAndTickTupleIsReceived" duration-ms="3" started-at="2020-07-30T20:16:10Z" finished-at="2020-07-30T20:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitSomethingIfAtLeastOneObjectWasCountedAndTickTupleIsReceived -->
        <test-method status="PASS" signature="shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue()[pri:0, instance:storm.starter.bolt.RollingCountBoltTest@4f449e8f]" name="shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue" duration-ms="1" started-at="2020-07-30T20:16:10Z" finished-at="2020-07-30T20:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue -->
      </class> <!-- storm.starter.bolt.RollingCountBoltTest -->
      <class name="storm.starter.tools.SlotBasedCounterTest">
        <test-method status="PASS" signature="negativeOrZeroNumSlotsShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@6d868997]" name="negativeOrZeroNumSlotsShouldThrowIAE" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="illegalNumSlotsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Number of slots must be greater than zero (you requested -10)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Number of slots must be greater than zero (you requested -10)
	at storm.starter.tools.SlotBasedCounter.<init>(SlotBasedCounter.java:26)
	at storm.starter.tools.SlotBasedCounterTest.negativeOrZeroNumSlotsShouldThrowIAE(SlotBasedCounterTest.java:23)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroNumSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroNumSlotsShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@6d868997]" name="negativeOrZeroNumSlotsShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalNumSlotsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-3]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Number of slots must be greater than zero (you requested -3)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Number of slots must be greater than zero (you requested -3)
	at storm.starter.tools.SlotBasedCounter.<init>(SlotBasedCounter.java:26)
	at storm.starter.tools.SlotBasedCounterTest.negativeOrZeroNumSlotsShouldThrowIAE(SlotBasedCounterTest.java:23)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroNumSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroNumSlotsShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@6d868997]" name="negativeOrZeroNumSlotsShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalNumSlotsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Number of slots must be greater than zero (you requested -1)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Number of slots must be greater than zero (you requested -1)
	at storm.starter.tools.SlotBasedCounter.<init>(SlotBasedCounter.java:26)
	at storm.starter.tools.SlotBasedCounterTest.negativeOrZeroNumSlotsShouldThrowIAE(SlotBasedCounterTest.java:23)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroNumSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroNumSlotsShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@6d868997]" name="negativeOrZeroNumSlotsShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalNumSlotsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-2]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Number of slots must be greater than zero (you requested -2)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Number of slots must be greater than zero (you requested -2)
	at storm.starter.tools.SlotBasedCounter.<init>(SlotBasedCounter.java:26)
	at storm.starter.tools.SlotBasedCounterTest.negativeOrZeroNumSlotsShouldThrowIAE(SlotBasedCounterTest.java:23)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroNumSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroNumSlotsShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@6d868997]" name="negativeOrZeroNumSlotsShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalNumSlotsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Number of slots must be greater than zero (you requested 0)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Number of slots must be greater than zero (you requested 0)
	at storm.starter.tools.SlotBasedCounter.<init>(SlotBasedCounter.java:26)
	at storm.starter.tools.SlotBasedCounterTest.negativeOrZeroNumSlotsShouldThrowIAE(SlotBasedCounterTest.java:23)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroNumSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="newInstanceShouldHaveEmptyCounts()[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@6d868997]" name="newInstanceShouldHaveEmptyCounts" duration-ms="2" started-at="2020-07-30T20:16:10Z" finished-at="2020-07-30T20:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newInstanceShouldHaveEmptyCounts -->
        <test-method status="PASS" signature="positiveNumSlotsShouldBeOk(int)[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@6d868997]" name="positiveNumSlotsShouldBeOk" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="legalNumSlotsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveNumSlotsShouldBeOk -->
        <test-method status="PASS" signature="positiveNumSlotsShouldBeOk(int)[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@6d868997]" name="positiveNumSlotsShouldBeOk" duration-ms="2" started-at="2020-07-30T20:16:10Z" data-provider="legalNumSlotsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveNumSlotsShouldBeOk -->
        <test-method status="PASS" signature="positiveNumSlotsShouldBeOk(int)[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@6d868997]" name="positiveNumSlotsShouldBeOk" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="legalNumSlotsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveNumSlotsShouldBeOk -->
        <test-method status="PASS" signature="shouldIncrementCount([Ljava.lang.Object;, [I)[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@6d868997]" name="shouldIncrementCount" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="incrementCountData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.String;@58882a93]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@15e08615]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldIncrementCount -->
        <test-method status="PASS" signature="positiveNumSlotsShouldBeOk(int)[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@6d868997]" name="positiveNumSlotsShouldBeOk" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="legalNumSlotsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveNumSlotsShouldBeOk -->
        <test-method status="PASS" signature="shouldIncrementCountOnlyOneSlotAtATime()[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@6d868997]" name="shouldIncrementCountOnlyOneSlotAtATime" duration-ms="0" started-at="2020-07-30T20:16:10Z" finished-at="2020-07-30T20:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldIncrementCountOnlyOneSlotAtATime -->
        <test-method status="PASS" signature="shouldReturnNonEmptyCountsWhenAtLeastOneObjectWasCounted()[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@6d868997]" name="shouldReturnNonEmptyCountsWhenAtLeastOneObjectWasCounted" duration-ms="0" started-at="2020-07-30T20:16:10Z" finished-at="2020-07-30T20:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnNonEmptyCountsWhenAtLeastOneObjectWasCounted -->
        <test-method status="PASS" signature="wipeZerosShouldRemoveAnyObjectsWithZeroTotalCount()[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@6d868997]" name="wipeZerosShouldRemoveAnyObjectsWithZeroTotalCount" duration-ms="0" started-at="2020-07-30T20:16:10Z" finished-at="2020-07-30T20:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- wipeZerosShouldRemoveAnyObjectsWithZeroTotalCount -->
        <test-method status="PASS" signature="shouldReturnZeroForNonexistentObject()[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@6d868997]" name="shouldReturnZeroForNonexistentObject" duration-ms="0" started-at="2020-07-30T20:16:10Z" finished-at="2020-07-30T20:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnZeroForNonexistentObject -->
        <test-method status="PASS" signature="wipeSlotShouldSetAllCountsInSlotToZero()[pri:0, instance:storm.starter.tools.SlotBasedCounterTest@6d868997]" name="wipeSlotShouldSetAllCountsInSlotToZero" duration-ms="0" started-at="2020-07-30T20:16:10Z" finished-at="2020-07-30T20:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- wipeSlotShouldSetAllCountsInSlotToZero -->
      </class> <!-- storm.starter.tools.SlotBasedCounterTest -->
      <class name="storm.starter.tools.NthLastModifiedTimeTrackerTest">
        <test-method status="PASS" signature="negativeOrZeroNumTimesToTrackShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="negativeOrZeroNumTimesToTrackShouldThrowIAE" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="illegalNumTimesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[numTimesToTrack must be greater than zero (you requested -10)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: numTimesToTrack must be greater than zero (you requested -10)
	at storm.starter.tools.NthLastModifiedTimeTracker.<init>(NthLastModifiedTimeTracker.java:24)
	at storm.starter.tools.NthLastModifiedTimeTrackerTest.negativeOrZeroNumTimesToTrackShouldThrowIAE(NthLastModifiedTimeTrackerTest.java:22)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroNumTimesToTrackShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroNumTimesToTrackShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="negativeOrZeroNumTimesToTrackShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalNumTimesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-2]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[numTimesToTrack must be greater than zero (you requested -2)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: numTimesToTrack must be greater than zero (you requested -2)
	at storm.starter.tools.NthLastModifiedTimeTracker.<init>(NthLastModifiedTimeTracker.java:24)
	at storm.starter.tools.NthLastModifiedTimeTrackerTest.negativeOrZeroNumTimesToTrackShouldThrowIAE(NthLastModifiedTimeTrackerTest.java:22)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroNumTimesToTrackShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroNumTimesToTrackShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="negativeOrZeroNumTimesToTrackShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalNumTimesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-3]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[numTimesToTrack must be greater than zero (you requested -3)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: numTimesToTrack must be greater than zero (you requested -3)
	at storm.starter.tools.NthLastModifiedTimeTracker.<init>(NthLastModifiedTimeTracker.java:24)
	at storm.starter.tools.NthLastModifiedTimeTrackerTest.negativeOrZeroNumTimesToTrackShouldThrowIAE(NthLastModifiedTimeTrackerTest.java:22)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroNumTimesToTrackShouldThrowIAE -->
        <test-method status="PASS" signature="positiveNumTimesToTrackShouldBeOk(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="positiveNumTimesToTrackShouldBeOk" duration-ms="206" started-at="2020-07-30T20:16:10Z" data-provider="legalNumTimesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveNumTimesToTrackShouldBeOk -->
        <test-method status="PASS" signature="negativeOrZeroNumTimesToTrackShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="negativeOrZeroNumTimesToTrackShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalNumTimesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[numTimesToTrack must be greater than zero (you requested 0)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: numTimesToTrack must be greater than zero (you requested 0)
	at storm.starter.tools.NthLastModifiedTimeTracker.<init>(NthLastModifiedTimeTracker.java:24)
	at storm.starter.tools.NthLastModifiedTimeTrackerTest.negativeOrZeroNumTimesToTrackShouldThrowIAE(NthLastModifiedTimeTrackerTest.java:22)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroNumTimesToTrackShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroNumTimesToTrackShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="negativeOrZeroNumTimesToTrackShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalNumTimesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[numTimesToTrack must be greater than zero (you requested -1)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: numTimesToTrack must be greater than zero (you requested -1)
	at storm.starter.tools.NthLastModifiedTimeTracker.<init>(NthLastModifiedTimeTracker.java:24)
	at storm.starter.tools.NthLastModifiedTimeTrackerTest.negativeOrZeroNumTimesToTrackShouldThrowIAE(NthLastModifiedTimeTrackerTest.java:22)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroNumTimesToTrackShouldThrowIAE -->
        <test-method status="PASS" signature="positiveNumTimesToTrackShouldBeOk(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="positiveNumTimesToTrackShouldBeOk" duration-ms="2" started-at="2020-07-30T20:16:10Z" data-provider="legalNumTimesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveNumTimesToTrackShouldBeOk -->
        <test-method status="PASS" signature="positiveNumTimesToTrackShouldBeOk(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="positiveNumTimesToTrackShouldBeOk" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="legalNumTimesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveNumTimesToTrackShouldBeOk -->
        <test-method status="PASS" signature="positiveNumTimesToTrackShouldBeOk(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="positiveNumTimesToTrackShouldBeOk" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="legalNumTimesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveNumTimesToTrackShouldBeOk -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="whenNotYetMarkedAsModifiedData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="whenNotYetMarkedAsModifiedData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="whenNotYetMarkedAsModifiedData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="whenNotYetMarkedAsModifiedData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="whenNotYetMarkedAsModifiedData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="whenNotYetMarkedAsModifiedData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="whenNotYetMarkedAsModifiedData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified(int)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="whenNotYetMarkedAsModifiedData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeEvenWhenNotYetMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="7" started-at="2020-07-30T20:16:10Z" data-provider="simulatedTrackerIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@19dac2d6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@7e2bc2f4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedTrackerIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@39ace1a7]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@1930a804]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedTrackerIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@67eeb310]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@76af51d6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedTrackerIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@598657cd]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@456aa471]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedTrackerIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@bd4ee01]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@7f93f4c]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="simulatedTrackerIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@4cfcac13]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@5c25d0d1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedTrackerIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@69e2fe3b]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@27afbf14]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedTrackerIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@467ef400]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@13fe5bb7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="simulatedTrackerIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@5fb07347]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@3ef2b8e5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedTrackerIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@51f01535]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@2321e482]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedTrackerIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@4276ad40]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@6e5f5478]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedTrackerIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@22c8ee48]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@7845b21a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="simulatedTrackerIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@44bbb7c6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@2342f1ff]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedTrackerIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@18715bb]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@2a19a0fe]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedTrackerIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@2b7774d5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@7d284f15]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedTrackerIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@49190ed6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@5d717f19]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedTrackerIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@3303e89e]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@cec590c]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="simulatedTrackerIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@d62472f]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@63a84bb6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedTrackerIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@1570cad0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@21090c88]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedTrackerIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@3ed7dd70]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@6f3b13d0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedTrackerIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@65d73bd]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@27896d3b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
        <test-method status="PASS" signature="shouldReturnCorrectModifiedTimeWhenMarkedAsModified(int, [I, [I)[pri:0, instance:storm.starter.tools.NthLastModifiedTimeTrackerTest@72ab05ed]" name="shouldReturnCorrectModifiedTimeWhenMarkedAsModified" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedTrackerIterations" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@701d2b59]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[I@1999149e]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnCorrectModifiedTimeWhenMarkedAsModified -->
      </class> <!-- storm.starter.tools.NthLastModifiedTimeTrackerTest -->
      <class name="storm.starter.tools.RankableObjectWithFieldsTest">
        <test-method status="PASS" signature="constructorWithNegativeCountAndFieldsShouldThrowIAE()[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="constructorWithNegativeCountAndFieldsShouldThrowIAE" duration-ms="9" started-at="2020-07-30T20:16:09Z" finished-at="2020-07-30T20:16:09Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The count must be >= 0]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The count must be >= 0
	at storm.starter.tools.RankableObjectWithFields.<init>(RankableObjectWithFields.java:29)
	at storm.starter.tools.RankableObjectWithFieldsTest.constructorWithNegativeCountAndFieldsShouldThrowIAE(RankableObjectWithFieldsTest.java:47)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- constructorWithNegativeCountAndFieldsShouldThrowIAE -->
        <test-method status="PASS" signature="constructorWithNegativeCountAndNoFieldsShouldThrowIAE()[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="constructorWithNegativeCountAndNoFieldsShouldThrowIAE" duration-ms="1" started-at="2020-07-30T20:16:09Z" finished-at="2020-07-30T20:16:09Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The count must be >= 0]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The count must be >= 0
	at storm.starter.tools.RankableObjectWithFields.<init>(RankableObjectWithFields.java:29)
	at storm.starter.tools.RankableObjectWithFieldsTest.constructorWithNegativeCountAndNoFieldsShouldThrowIAE(RankableObjectWithFieldsTest.java:41)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- constructorWithNegativeCountAndNoFieldsShouldThrowIAE -->
        <test-method status="PASS" signature="constructorWithNullObjectAndNoFieldsShouldThrowIAE()[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="constructorWithNullObjectAndNoFieldsShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:09Z" finished-at="2020-07-30T20:16:09Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The object must not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The object must not be null
	at storm.starter.tools.RankableObjectWithFields.<init>(RankableObjectWithFields.java:26)
	at storm.starter.tools.RankableObjectWithFieldsTest.constructorWithNullObjectAndNoFieldsShouldThrowIAE(RankableObjectWithFieldsTest.java:30)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- constructorWithNullObjectAndNoFieldsShouldThrowIAE -->
        <test-method status="PASS" signature="constructorWithNullObjectAndFieldsShouldThrowIAE()[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="constructorWithNullObjectAndFieldsShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:09Z" finished-at="2020-07-30T20:16:09Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The object must not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The object must not be null
	at storm.starter.tools.RankableObjectWithFields.<init>(RankableObjectWithFields.java:26)
	at storm.starter.tools.RankableObjectWithFieldsTest.constructorWithNullObjectAndFieldsShouldThrowIAE(RankableObjectWithFieldsTest.java:36)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- constructorWithNullObjectAndFieldsShouldThrowIAE -->
        <test-method status="PASS" signature="fieldsShouldBeImmutable()[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="fieldsShouldBeImmutable" duration-ms="2" started-at="2020-07-30T20:16:09Z" finished-at="2020-07-30T20:16:09Z">
          <exception class="java.lang.UnsupportedOperationException">
            <full-stacktrace>
              <![CDATA[java.lang.UnsupportedOperationException
	at com.google.common.collect.ImmutableList.remove(ImmutableList.java:461)
	at storm.starter.tools.RankableObjectWithFieldsTest.fieldsShouldBeImmutable(RankableObjectWithFieldsTest.java:202)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.UnsupportedOperationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fieldsShouldBeImmutable -->
        <test-method status="PASS" signature="shouldBeEqualToItself()[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldBeEqualToItself" duration-ms="18" started-at="2020-07-30T20:16:09Z" finished-at="2020-07-30T20:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldBeEqualToItself -->
        <test-method status="PASS" signature="shouldBeEqualToTrueDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldBeEqualToTrueDuplicates" duration-ms="12" started-at="2020-07-30T20:16:10Z" data-provider="trueDuplicatesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldBeEqualToTrueDuplicates -->
        <test-method status="PASS" signature="shouldBeEqualToTrueDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldBeEqualToTrueDuplicates" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="trueDuplicatesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0|someField]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|0|someOtherField]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldBeEqualToTrueDuplicates -->
        <test-method status="PASS" signature="shouldBeEqualToTrueDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldBeEqualToTrueDuplicates" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="trueDuplicatesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|0|someOtherField]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldBeEqualToTrueDuplicates -->
        <test-method status="PASS" signature="shouldCreateRankableObjectFromTuple()[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldCreateRankableObjectFromTuple" duration-ms="253" started-at="2020-07-30T20:16:10Z" finished-at="2020-07-30T20:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCreateRankableObjectFromTuple -->
        <test-method status="PASS" signature="shouldHaveDifferentHashCodeThanFalseDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldHaveDifferentHashCodeThanFalseDuplicates" duration-ms="4" started-at="2020-07-30T20:16:10Z" data-provider="falseDuplicatesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldHaveDifferentHashCodeThanFalseDuplicates -->
        <test-method status="PASS" signature="shouldHaveDifferentHashCodeThanFalseDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldHaveDifferentHashCodeThanFalseDuplicates" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="falseDuplicatesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|1]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Foo|1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldHaveDifferentHashCodeThanFalseDuplicates -->
        <test-method status="PASS" signature="shouldHaveDifferentHashCodeThanFalseDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldHaveDifferentHashCodeThanFalseDuplicates" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="falseDuplicatesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|1]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[FOO|1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldHaveDifferentHashCodeThanFalseDuplicates -->
        <test-method status="PASS" signature="shouldHaveDifferentHashCodeThanFalseDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldHaveDifferentHashCodeThanFalseDuplicates" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="falseDuplicatesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|1]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[bar|1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldHaveDifferentHashCodeThanFalseDuplicates -->
        <test-method status="PASS" signature="shouldHaveSameHashCodeAsTrueDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldHaveSameHashCodeAsTrueDuplicates" duration-ms="3" started-at="2020-07-30T20:16:10Z" data-provider="trueDuplicatesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldHaveSameHashCodeAsTrueDuplicates -->
        <test-method status="PASS" signature="shouldHaveDifferentHashCodeThanFalseDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldHaveDifferentHashCodeThanFalseDuplicates" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="falseDuplicatesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[|1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldHaveDifferentHashCodeThanFalseDuplicates -->
        <test-method status="PASS" signature="shouldHaveDifferentHashCodeThanFalseDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldHaveDifferentHashCodeThanFalseDuplicates" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="falseDuplicatesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[|1]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[bar|1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldHaveDifferentHashCodeThanFalseDuplicates -->
        <test-method status="PASS" signature="shouldHaveSameHashCodeAsTrueDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldHaveSameHashCodeAsTrueDuplicates" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="trueDuplicatesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|0|someOtherField]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldHaveSameHashCodeAsTrueDuplicates -->
        <test-method status="PASS" signature="shouldHaveSameHashCodeAsTrueDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldHaveSameHashCodeAsTrueDuplicates" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="trueDuplicatesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0|someField]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|0|someOtherField]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldHaveSameHashCodeAsTrueDuplicates -->
        <test-method status="PASS" signature="shouldNotBeEqualToFalseDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldNotBeEqualToFalseDuplicates" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="falseDuplicatesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotBeEqualToFalseDuplicates -->
        <test-method status="PASS" signature="shouldNotBeEqualToFalseDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldNotBeEqualToFalseDuplicates" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="falseDuplicatesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|1]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Foo|1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotBeEqualToFalseDuplicates -->
        <test-method status="PASS" signature="shouldNotBeEqualToFalseDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldNotBeEqualToFalseDuplicates" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="falseDuplicatesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|1]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[FOO|1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotBeEqualToFalseDuplicates -->
        <test-method status="PASS" signature="shouldNotBeEqualToFalseDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldNotBeEqualToFalseDuplicates" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="falseDuplicatesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|1]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[bar|1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotBeEqualToFalseDuplicates -->
        <test-method status="PASS" signature="shouldNotBeEqualToFalseDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldNotBeEqualToFalseDuplicates" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="falseDuplicatesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[|1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotBeEqualToFalseDuplicates -->
        <test-method status="PASS" signature="shouldNotBeEqualToFalseDuplicates(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldNotBeEqualToFalseDuplicates" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="falseDuplicatesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[|1]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[bar|1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotBeEqualToFalseDuplicates -->
        <test-method status="PASS" signature="shouldNotBeEqualToInstancesOfOtherClasses(java.lang.Object)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldNotBeEqualToInstancesOfOtherClasses" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="otherClassesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[foo]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotBeEqualToInstancesOfOtherClasses -->
        <test-method status="PASS" signature="shouldNotBeEqualToInstancesOfOtherClasses(java.lang.Object)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldNotBeEqualToInstancesOfOtherClasses" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="otherClassesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotBeEqualToInstancesOfOtherClasses -->
        <test-method status="PASS" signature="shouldNotBeEqualToInstancesOfOtherClasses(java.lang.Object)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldNotBeEqualToInstancesOfOtherClasses" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="otherClassesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[java.lang.Object@49e2b3c5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotBeEqualToInstancesOfOtherClasses -->
        <test-method status="PASS" signature="shouldReturnTheFields(java.lang.Object, long, [Ljava.lang.Object;)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldReturnTheFields" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="fieldsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[java.lang.Object@6f5e16cf]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[271]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[Ljava.lang.Object;@2964511]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnTheFields -->
        <test-method status="PASS" signature="shouldNotBeEqualToInstancesOfOtherClasses(java.lang.Object)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldNotBeEqualToInstancesOfOtherClasses" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="otherClassesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[7, 8, 9]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotBeEqualToInstancesOfOtherClasses -->
        <test-method status="PASS" signature="shouldReturnTheCount()[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldReturnTheCount" duration-ms="0" started-at="2020-07-30T20:16:10Z" finished-at="2020-07-30T20:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnTheCount -->
        <test-method status="PASS" signature="shouldReturnTheFields(java.lang.Object, long, [Ljava.lang.Object;)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldReturnTheFields" duration-ms="2" started-at="2020-07-30T20:16:10Z" data-provider="fieldsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[quux]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[Ljava.lang.Object;@6e9a10cd]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnTheFields -->
        <test-method status="PASS" signature="toStringShouldContainStringRepresentationsOfObjectAndCount(java.lang.Object, long)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="toStringShouldContainStringRepresentationsOfObjectAndCount" duration-ms="4" started-at="2020-07-30T20:16:10Z" data-provider="toStringData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[foo]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- toStringShouldContainStringRepresentationsOfObjectAndCount -->
        <test-method status="PASS" signature="shouldReturnTheObject()[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="shouldReturnTheObject" duration-ms="0" started-at="2020-07-30T20:16:10Z" finished-at="2020-07-30T20:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldReturnTheObject -->
        <test-method status="PASS" signature="verifyCompareTo(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields, int)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="verifyCompareTo" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="compareToData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|1000]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCompareTo -->
        <test-method status="PASS" signature="verifyCompareTo(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields, int)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="verifyCompareTo" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="compareToData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|1]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCompareTo -->
        <test-method status="PASS" signature="toStringShouldContainStringRepresentationsOfObjectAndCount(java.lang.Object, long)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="toStringShouldContainStringRepresentationsOfObjectAndCount" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="toStringData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[BAR]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- toStringShouldContainStringRepresentationsOfObjectAndCount -->
        <test-method status="PASS" signature="verifyCompareTo(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields, int)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="verifyCompareTo" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="compareToData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|1000]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[bar|0]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCompareTo -->
        <test-method status="PASS" signature="verifyCompareTo(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields, int)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="verifyCompareTo" duration-ms="2" started-at="2020-07-30T20:16:10Z" data-provider="compareToData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[bar|0]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCompareTo -->
        <test-method status="PASS" signature="verifyCompareTo(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields, int)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="verifyCompareTo" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="compareToData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCompareTo -->
        <test-method status="PASS" signature="verifyCompareTo(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields, int)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="verifyCompareTo" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="compareToData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|1]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[bar|0]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCompareTo -->
        <test-method status="PASS" signature="verifyCompareTo(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields, int)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="verifyCompareTo" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="compareToData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|1000]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCompareTo -->
        <test-method status="PASS" signature="verifyCompareTo(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields, int)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="verifyCompareTo" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="compareToData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo|1]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCompareTo -->
        <test-method status="PASS" signature="verifyCompareTo(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields, int)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="verifyCompareTo" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="compareToData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[bar|1000]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCompareTo -->
        <test-method status="PASS" signature="verifyCompareTo(storm.starter.tools.RankableObjectWithFields, storm.starter.tools.RankableObjectWithFields, int)[pri:0, instance:storm.starter.tools.RankableObjectWithFieldsTest@6e28bb87]" name="verifyCompareTo" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="compareToData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo|0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[bar|1]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCompareTo -->
      </class> <!-- storm.starter.tools.RankableObjectWithFieldsTest -->
      <class name="storm.starter.bolt.IntermediateRankingsBoltTest">
        <test-method status="PASS" signature="negativeOrZeroEmitFrequencyShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@c3c4c1c]" name="negativeOrZeroEmitFrequencyShouldThrowIAE" duration-ms="7" started-at="2020-07-30T20:16:10Z" data-provider="illegalEmitFrequency" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The emit frequency must be >= 1 seconds (you requested -10 seconds)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The emit frequency must be >= 1 seconds (you requested -10 seconds)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:49)
	at storm.starter.bolt.IntermediateRankingsBolt.<init>(IntermediateRankingsBolt.java:30)
	at storm.starter.bolt.IntermediateRankingsBoltTest.negativeOrZeroEmitFrequencyShouldThrowIAE(IntermediateRankingsBoltTest.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroEmitFrequencyShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@c3c4c1c]" name="negativeOrZeroTopNShouldThrowIAE" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="illegalTopN" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1 (you requested -10)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1 (you requested -10)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:46)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:41)
	at storm.starter.bolt.IntermediateRankingsBolt.<init>(IntermediateRankingsBolt.java:26)
	at storm.starter.bolt.IntermediateRankingsBoltTest.negativeOrZeroTopNShouldThrowIAE(IntermediateRankingsBoltTest.java:47)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroEmitFrequencyShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@c3c4c1c]" name="negativeOrZeroEmitFrequencyShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalEmitFrequency" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-3]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The emit frequency must be >= 1 seconds (you requested -3 seconds)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The emit frequency must be >= 1 seconds (you requested -3 seconds)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:49)
	at storm.starter.bolt.IntermediateRankingsBolt.<init>(IntermediateRankingsBolt.java:30)
	at storm.starter.bolt.IntermediateRankingsBoltTest.negativeOrZeroEmitFrequencyShouldThrowIAE(IntermediateRankingsBoltTest.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroEmitFrequencyShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroEmitFrequencyShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@c3c4c1c]" name="negativeOrZeroEmitFrequencyShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalEmitFrequency" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-2]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The emit frequency must be >= 1 seconds (you requested -2 seconds)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The emit frequency must be >= 1 seconds (you requested -2 seconds)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:49)
	at storm.starter.bolt.IntermediateRankingsBolt.<init>(IntermediateRankingsBolt.java:30)
	at storm.starter.bolt.IntermediateRankingsBoltTest.negativeOrZeroEmitFrequencyShouldThrowIAE(IntermediateRankingsBoltTest.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroEmitFrequencyShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroEmitFrequencyShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@c3c4c1c]" name="negativeOrZeroEmitFrequencyShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalEmitFrequency" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The emit frequency must be >= 1 seconds (you requested -1 seconds)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The emit frequency must be >= 1 seconds (you requested -1 seconds)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:49)
	at storm.starter.bolt.IntermediateRankingsBolt.<init>(IntermediateRankingsBolt.java:30)
	at storm.starter.bolt.IntermediateRankingsBoltTest.negativeOrZeroEmitFrequencyShouldThrowIAE(IntermediateRankingsBoltTest.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroEmitFrequencyShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroEmitFrequencyShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@c3c4c1c]" name="negativeOrZeroEmitFrequencyShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalEmitFrequency" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The emit frequency must be >= 1 seconds (you requested 0 seconds)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The emit frequency must be >= 1 seconds (you requested 0 seconds)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:49)
	at storm.starter.bolt.IntermediateRankingsBolt.<init>(IntermediateRankingsBolt.java:30)
	at storm.starter.bolt.IntermediateRankingsBoltTest.negativeOrZeroEmitFrequencyShouldThrowIAE(IntermediateRankingsBoltTest.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroEmitFrequencyShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@c3c4c1c]" name="negativeOrZeroTopNShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalTopN" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1 (you requested 0)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1 (you requested 0)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:46)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:41)
	at storm.starter.bolt.IntermediateRankingsBolt.<init>(IntermediateRankingsBolt.java:26)
	at storm.starter.bolt.IntermediateRankingsBoltTest.negativeOrZeroTopNShouldThrowIAE(IntermediateRankingsBoltTest.java:47)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@c3c4c1c]" name="negativeOrZeroTopNShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalTopN" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-2]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1 (you requested -2)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1 (you requested -2)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:46)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:41)
	at storm.starter.bolt.IntermediateRankingsBolt.<init>(IntermediateRankingsBolt.java:26)
	at storm.starter.bolt.IntermediateRankingsBoltTest.negativeOrZeroTopNShouldThrowIAE(IntermediateRankingsBoltTest.java:47)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@c3c4c1c]" name="negativeOrZeroTopNShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalTopN" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-3]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1 (you requested -3)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1 (you requested -3)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:46)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:41)
	at storm.starter.bolt.IntermediateRankingsBolt.<init>(IntermediateRankingsBolt.java:26)
	at storm.starter.bolt.IntermediateRankingsBoltTest.negativeOrZeroTopNShouldThrowIAE(IntermediateRankingsBoltTest.java:47)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@c3c4c1c]" name="negativeOrZeroTopNShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalTopN" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1 (you requested -1)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1 (you requested -1)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:46)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:41)
	at storm.starter.bolt.IntermediateRankingsBolt.<init>(IntermediateRankingsBolt.java:26)
	at storm.starter.bolt.IntermediateRankingsBoltTest.negativeOrZeroTopNShouldThrowIAE(IntermediateRankingsBoltTest.java:47)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="positiveEmitFrequencyShouldBeOk(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@c3c4c1c]" name="positiveEmitFrequencyShouldBeOk" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="legalEmitFrequency" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveEmitFrequencyShouldBeOk -->
        <test-method status="PASS" signature="positiveEmitFrequencyShouldBeOk(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@c3c4c1c]" name="positiveEmitFrequencyShouldBeOk" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="legalEmitFrequency" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveEmitFrequencyShouldBeOk -->
        <test-method status="PASS" signature="positiveEmitFrequencyShouldBeOk(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@c3c4c1c]" name="positiveEmitFrequencyShouldBeOk" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="legalEmitFrequency" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveEmitFrequencyShouldBeOk -->
        <test-method status="PASS" signature="positiveEmitFrequencyShouldBeOk(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@c3c4c1c]" name="positiveEmitFrequencyShouldBeOk" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="legalEmitFrequency" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveEmitFrequencyShouldBeOk -->
        <test-method status="PASS" signature="positiveTopNShouldBeOk(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@c3c4c1c]" name="positiveTopNShouldBeOk" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="legalTopN" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveTopNShouldBeOk -->
        <test-method status="PASS" signature="positiveTopNShouldBeOk(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@c3c4c1c]" name="positiveTopNShouldBeOk" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="legalTopN" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveTopNShouldBeOk -->
        <test-method status="PASS" signature="positiveTopNShouldBeOk(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@c3c4c1c]" name="positiveTopNShouldBeOk" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="legalTopN" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveTopNShouldBeOk -->
        <test-method status="PASS" signature="positiveTopNShouldBeOk(int)[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@c3c4c1c]" name="positiveTopNShouldBeOk" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="legalTopN" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveTopNShouldBeOk -->
        <test-method status="PASS" signature="shouldDeclareOutputFields()[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@c3c4c1c]" name="shouldDeclareOutputFields" duration-ms="12" started-at="2020-07-30T20:16:10Z" finished-at="2020-07-30T20:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldEmitNothingIfNormalTupleIsReceived()[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@c3c4c1c]" name="shouldEmitNothingIfNormalTupleIsReceived" duration-ms="9" started-at="2020-07-30T20:16:10Z" finished-at="2020-07-30T20:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitNothingIfNormalTupleIsReceived -->
        <test-method status="PASS" signature="shouldEmitSomethingIfTickTupleIsReceived()[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@c3c4c1c]" name="shouldEmitSomethingIfTickTupleIsReceived" duration-ms="9" started-at="2020-07-30T20:16:10Z" finished-at="2020-07-30T20:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitSomethingIfTickTupleIsReceived -->
        <test-method status="PASS" signature="shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue()[pri:0, instance:storm.starter.bolt.IntermediateRankingsBoltTest@c3c4c1c]" name="shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue" duration-ms="3" started-at="2020-07-30T20:16:10Z" finished-at="2020-07-30T20:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue -->
      </class> <!-- storm.starter.bolt.IntermediateRankingsBoltTest -->
      <class name="storm.starter.tools.RankingsTest">
        <test-method status="PASS" signature="constructorWithNegativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="constructorWithNegativeOrZeroTopNShouldThrowIAE" duration-ms="2" started-at="2020-07-30T20:16:10Z" data-provider="illegalTopNData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1
	at storm.starter.tools.Rankings.<init>(Rankings.java:23)
	at storm.starter.tools.RankingsTest.constructorWithNegativeOrZeroTopNShouldThrowIAE(RankingsTest.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- constructorWithNegativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="constructorWithNegativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="constructorWithNegativeOrZeroTopNShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalTopNData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-2]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1
	at storm.starter.tools.Rankings.<init>(Rankings.java:23)
	at storm.starter.tools.RankingsTest.constructorWithNegativeOrZeroTopNShouldThrowIAE(RankingsTest.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- constructorWithNegativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="constructorWithNegativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="constructorWithNegativeOrZeroTopNShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalTopNData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1
	at storm.starter.tools.Rankings.<init>(Rankings.java:23)
	at storm.starter.tools.RankingsTest.constructorWithNegativeOrZeroTopNShouldThrowIAE(RankingsTest.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- constructorWithNegativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="constructorWithNegativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="constructorWithNegativeOrZeroTopNShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalTopNData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1
	at storm.starter.tools.Rankings.<init>(Rankings.java:23)
	at storm.starter.tools.RankingsTest.constructorWithNegativeOrZeroTopNShouldThrowIAE(RankingsTest.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- constructorWithNegativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="constructorWithPositiveTopNShouldBeOk(int)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="constructorWithPositiveTopNShouldBeOk" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="legalTopNData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1000000]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- constructorWithPositiveTopNShouldBeOk -->
        <test-method status="PASS" signature="defaultConstructorShouldSetPositiveTopN()[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="defaultConstructorShouldSetPositiveTopN" duration-ms="1" started-at="2020-07-30T20:16:10Z" finished-at="2020-07-30T20:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- defaultConstructorShouldSetPositiveTopN -->
        <test-method status="PASS" signature="constructorWithPositiveTopNShouldBeOk(int)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="constructorWithPositiveTopNShouldBeOk" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="legalTopNData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- constructorWithPositiveTopNShouldBeOk -->
        <test-method status="PASS" signature="constructorWithPositiveTopNShouldBeOk(int)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="constructorWithPositiveTopNShouldBeOk" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="legalTopNData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- constructorWithPositiveTopNShouldBeOk -->
        <test-method status="PASS" signature="constructorWithPositiveTopNShouldBeOk(int)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="constructorWithPositiveTopNShouldBeOk" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="legalTopNData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1000]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- constructorWithPositiveTopNShouldBeOk -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedRankingsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="simulatedRankingsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[B|2], [D|4], [A|1], [C|3]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[D|4], [C|3], [B|2], [A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="simulatedRankingsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[G|7], [B|2], [F|6], [A|1], [C|3], [D|4], [E|5], [H|8]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[H|8], [G|7], [F|6], [E|5], [D|4], [C|3], [B|2], [A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedRankingsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[B|2], [F|6], [A|1], [C|3], [D|4], [E|5]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[F|6], [E|5], [D|4], [C|3], [B|2], [A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenEmptyAndUpdatedWithOtherRankings -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings(java.util.List, java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="simulatedRankingsAndOtherRankingsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings(java.util.List, java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="simulatedRankingsAndOtherRankingsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[G|7], [B|2], [F|6], [A|1], [C|3]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[D|4], [E|5], [H|8]]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[[H|8], [G|7], [F|6], [E|5], [D|4], [C|3], [B|2], [A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings(java.util.List, java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedRankingsAndOtherRankingsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[B|2], [F|6], [A|1]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[C|3], [D|4], [E|5]]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[[F|6], [E|5], [D|4], [C|3], [B|2], [A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings(java.util.List, java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedRankingsAndOtherRankingsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[A|1], [C|3]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[B|2], [D|4]]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[[D|4], [C|3], [B|2], [A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenNotEmptyAndUpdatedWithOtherRankings -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedRankingsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[G|7], [B|2], [F|6], [A|1], [C|3], [D|4], [E|5], [H|8]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[H|8], [G|7], [F|6], [E|5], [D|4], [C|3], [B|2], [A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedRankingsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedRankingsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[B|2], [F|6], [A|1], [C|3], [D|4], [E|5]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[F|6], [E|5], [D|4], [C|3], [B|2], [A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedRankingsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[B|2], [D|4], [A|1], [C|3]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[D|4], [C|3], [B|2], [A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenUpdatedWithEmptyOtherRankings -->
        <test-method status="PASS" signature="shouldNotRankDuplicateObjectsMoreThanOnce(java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="shouldNotRankDuplicateObjectsMoreThanOnce" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="duplicatesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[someObject|42], [someObject|42], [someObject|42]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotRankDuplicateObjectsMoreThanOnce -->
        <test-method status="PASS" signature="shouldHaveDefaultConstructor()[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="shouldHaveDefaultConstructor" duration-ms="0" started-at="2020-07-30T20:16:10Z" finished-at="2020-07-30T20:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldHaveDefaultConstructor -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenUpdatedWithRankables(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="shouldCorrectlyRankWhenUpdatedWithRankables" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedRankingsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[B|2], [F|6], [A|1], [C|3], [D|4], [E|5]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[F|6], [E|5], [D|4], [C|3], [B|2], [A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenUpdatedWithRankables -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenUpdatedWithRankables(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="shouldCorrectlyRankWhenUpdatedWithRankables" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedRankingsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenUpdatedWithRankables -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenUpdatedWithRankables(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="shouldCorrectlyRankWhenUpdatedWithRankables" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedRankingsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[G|7], [B|2], [F|6], [A|1], [C|3], [D|4], [E|5], [H|8]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[H|8], [G|7], [F|6], [E|5], [D|4], [C|3], [B|2], [A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenUpdatedWithRankables -->
        <test-method status="PASS" signature="shouldCorrectlyRankWhenUpdatedWithRankables(java.util.List, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="shouldCorrectlyRankWhenUpdatedWithRankables" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="simulatedRankingsData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[B|2], [D|4], [A|1], [C|3]]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[D|4], [C|3], [B|2], [A|1]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldCorrectlyRankWhenUpdatedWithRankables -->
        <test-method status="PASS" signature="shouldNotRankDuplicateObjectsMoreThanOnce(java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="shouldNotRankDuplicateObjectsMoreThanOnce" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="duplicatesData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[[A|1], [A|2], [A|3]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotRankDuplicateObjectsMoreThanOnce -->
        <test-method status="PASS" signature="sizeOfRankingsShouldNotGrowBeyondTopN(int, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="sizeOfRankingsShouldNotGrowBeyondTopN" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="rankingsGrowData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1], [B|2], [C|3]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sizeOfRankingsShouldNotGrowBeyondTopN -->
        <test-method status="PASS" signature="sizeOfRankingsShouldNotGrowBeyondTopN(int, java.util.List)[pri:0, instance:storm.starter.tools.RankingsTest@19f040ba]" name="sizeOfRankingsShouldNotGrowBeyondTopN" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="rankingsGrowData" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[A|1], [B|2], [C|3], [D|4]]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sizeOfRankingsShouldNotGrowBeyondTopN -->
      </class> <!-- storm.starter.tools.RankingsTest -->
      <class name="storm.starter.bolt.TotalRankingsBoltTest">
        <test-method status="PASS" signature="negativeOrZeroEmitFrequencyShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@17d238b1]" name="negativeOrZeroEmitFrequencyShouldThrowIAE" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="illegalEmitFrequency" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The emit frequency must be >= 1 seconds (you requested -10 seconds)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The emit frequency must be >= 1 seconds (you requested -10 seconds)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:49)
	at storm.starter.bolt.TotalRankingsBolt.<init>(TotalRankingsBolt.java:29)
	at storm.starter.bolt.TotalRankingsBoltTest.negativeOrZeroEmitFrequencyShouldThrowIAE(TotalRankingsBoltTest.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroEmitFrequencyShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroEmitFrequencyShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@17d238b1]" name="negativeOrZeroEmitFrequencyShouldThrowIAE" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="illegalEmitFrequency" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The emit frequency must be >= 1 seconds (you requested 0 seconds)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The emit frequency must be >= 1 seconds (you requested 0 seconds)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:49)
	at storm.starter.bolt.TotalRankingsBolt.<init>(TotalRankingsBolt.java:29)
	at storm.starter.bolt.TotalRankingsBoltTest.negativeOrZeroEmitFrequencyShouldThrowIAE(TotalRankingsBoltTest.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroEmitFrequencyShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroEmitFrequencyShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@17d238b1]" name="negativeOrZeroEmitFrequencyShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalEmitFrequency" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-3]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The emit frequency must be >= 1 seconds (you requested -3 seconds)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The emit frequency must be >= 1 seconds (you requested -3 seconds)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:49)
	at storm.starter.bolt.TotalRankingsBolt.<init>(TotalRankingsBolt.java:29)
	at storm.starter.bolt.TotalRankingsBoltTest.negativeOrZeroEmitFrequencyShouldThrowIAE(TotalRankingsBoltTest.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroEmitFrequencyShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroEmitFrequencyShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@17d238b1]" name="negativeOrZeroEmitFrequencyShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalEmitFrequency" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The emit frequency must be >= 1 seconds (you requested -1 seconds)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The emit frequency must be >= 1 seconds (you requested -1 seconds)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:49)
	at storm.starter.bolt.TotalRankingsBolt.<init>(TotalRankingsBolt.java:29)
	at storm.starter.bolt.TotalRankingsBoltTest.negativeOrZeroEmitFrequencyShouldThrowIAE(TotalRankingsBoltTest.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroEmitFrequencyShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroEmitFrequencyShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@17d238b1]" name="negativeOrZeroEmitFrequencyShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalEmitFrequency" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-2]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The emit frequency must be >= 1 seconds (you requested -2 seconds)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The emit frequency must be >= 1 seconds (you requested -2 seconds)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:49)
	at storm.starter.bolt.TotalRankingsBolt.<init>(TotalRankingsBolt.java:29)
	at storm.starter.bolt.TotalRankingsBoltTest.negativeOrZeroEmitFrequencyShouldThrowIAE(TotalRankingsBoltTest.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroEmitFrequencyShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@17d238b1]" name="negativeOrZeroTopNShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalTopN" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-2]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1 (you requested -2)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1 (you requested -2)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:46)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:41)
	at storm.starter.bolt.TotalRankingsBolt.<init>(TotalRankingsBolt.java:25)
	at storm.starter.bolt.TotalRankingsBoltTest.negativeOrZeroTopNShouldThrowIAE(TotalRankingsBoltTest.java:47)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@17d238b1]" name="negativeOrZeroTopNShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalTopN" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-3]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1 (you requested -3)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1 (you requested -3)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:46)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:41)
	at storm.starter.bolt.TotalRankingsBolt.<init>(TotalRankingsBolt.java:25)
	at storm.starter.bolt.TotalRankingsBoltTest.negativeOrZeroTopNShouldThrowIAE(TotalRankingsBoltTest.java:47)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@17d238b1]" name="negativeOrZeroTopNShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalTopN" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1 (you requested -1)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1 (you requested -1)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:46)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:41)
	at storm.starter.bolt.TotalRankingsBolt.<init>(TotalRankingsBolt.java:25)
	at storm.starter.bolt.TotalRankingsBoltTest.negativeOrZeroTopNShouldThrowIAE(TotalRankingsBoltTest.java:47)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="negativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@17d238b1]" name="negativeOrZeroTopNShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalTopN" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1 (you requested -10)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1 (you requested -10)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:46)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:41)
	at storm.starter.bolt.TotalRankingsBolt.<init>(TotalRankingsBolt.java:25)
	at storm.starter.bolt.TotalRankingsBoltTest.negativeOrZeroTopNShouldThrowIAE(TotalRankingsBoltTest.java:47)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="positiveEmitFrequencyShouldBeOk(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@17d238b1]" name="positiveEmitFrequencyShouldBeOk" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="legalEmitFrequency" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveEmitFrequencyShouldBeOk -->
        <test-method status="PASS" signature="positiveEmitFrequencyShouldBeOk(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@17d238b1]" name="positiveEmitFrequencyShouldBeOk" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="legalEmitFrequency" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveEmitFrequencyShouldBeOk -->
        <test-method status="PASS" signature="positiveEmitFrequencyShouldBeOk(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@17d238b1]" name="positiveEmitFrequencyShouldBeOk" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="legalEmitFrequency" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveEmitFrequencyShouldBeOk -->
        <test-method status="PASS" signature="positiveEmitFrequencyShouldBeOk(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@17d238b1]" name="positiveEmitFrequencyShouldBeOk" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="legalEmitFrequency" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveEmitFrequencyShouldBeOk -->
        <test-method status="PASS" signature="negativeOrZeroTopNShouldThrowIAE(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@17d238b1]" name="negativeOrZeroTopNShouldThrowIAE" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="illegalTopN" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[topN must be >= 1 (you requested 0)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: topN must be >= 1 (you requested 0)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:46)
	at storm.starter.bolt.AbstractRankerBolt.<init>(AbstractRankerBolt.java:41)
	at storm.starter.bolt.TotalRankingsBolt.<init>(TotalRankingsBolt.java:25)
	at storm.starter.bolt.TotalRankingsBoltTest.negativeOrZeroTopNShouldThrowIAE(TotalRankingsBoltTest.java:47)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeOrZeroTopNShouldThrowIAE -->
        <test-method status="PASS" signature="positiveTopNShouldBeOk(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@17d238b1]" name="positiveTopNShouldBeOk" duration-ms="1" started-at="2020-07-30T20:16:10Z" data-provider="legalTopN" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveTopNShouldBeOk -->
        <test-method status="PASS" signature="shouldDeclareOutputFields()[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@17d238b1]" name="shouldDeclareOutputFields" duration-ms="1" started-at="2020-07-30T20:16:10Z" finished-at="2020-07-30T20:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="positiveTopNShouldBeOk(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@17d238b1]" name="positiveTopNShouldBeOk" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="legalTopN" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveTopNShouldBeOk -->
        <test-method status="PASS" signature="positiveTopNShouldBeOk(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@17d238b1]" name="positiveTopNShouldBeOk" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="legalTopN" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveTopNShouldBeOk -->
        <test-method status="PASS" signature="positiveTopNShouldBeOk(int)[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@17d238b1]" name="positiveTopNShouldBeOk" duration-ms="0" started-at="2020-07-30T20:16:10Z" data-provider="legalTopN" finished-at="2020-07-30T20:16:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- positiveTopNShouldBeOk -->
        <test-method status="PASS" signature="shouldEmitNothingIfNormalTupleIsReceived()[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@17d238b1]" name="shouldEmitNothingIfNormalTupleIsReceived" duration-ms="5" started-at="2020-07-30T20:16:10Z" finished-at="2020-07-30T20:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitNothingIfNormalTupleIsReceived -->
        <test-method status="PASS" signature="shouldEmitSomethingIfTickTupleIsReceived()[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@17d238b1]" name="shouldEmitSomethingIfTickTupleIsReceived" duration-ms="1" started-at="2020-07-30T20:16:10Z" finished-at="2020-07-30T20:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitSomethingIfTickTupleIsReceived -->
        <test-method status="PASS" signature="shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue()[pri:0, instance:storm.starter.bolt.TotalRankingsBoltTest@17d238b1]" name="shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue" duration-ms="0" started-at="2020-07-30T20:16:10Z" finished-at="2020-07-30T20:16:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue -->
      </class> <!-- storm.starter.bolt.TotalRankingsBoltTest -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
