<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" name="io.featureflow.client.cucumber.CucumberTest" time="2.45" tests="121" errors="0" skipped="35" failures="0">
  <properties>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="sun.boot.library.path" value="/usr/local/openjdk-8/jre/lib/amd64"/>
    <property name="java.vm.version" value="25.262-b10"/>
    <property name="animal.sniffer.skip" value="true"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="maven.multiModuleProjectDirectory" value="/tmp/tmpgugubekk/featureflow-java-sdk"/>
    <property name="maven.javadoc.skip" value="true"/>
    <property name="java.vendor.url" value="http://java.oracle.com/"/>
    <property name="path.separator" value=":"/>
    <property name="guice.disable.misplaced.annotation.check" value="true"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="file.encoding.pkg" value="sun.io"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.os.patch.level" value="unknown"/>
    <property name="source.skip" value="true"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="user.dir" value="/tmp/tmpgugubekk/featureflow-java-sdk"/>
    <property name="java.runtime.version" value="1.8.0_262-b10"/>
    <property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
    <property name="java.endorsed.dirs" value="/usr/local/openjdk-8/jre/lib/endorsed"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="os.name" value="Linux"/>
    <property name="classworlds.conf" value="/usr/share/maven/bin/m2.conf"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib"/>
    <property name="license.skip" value="true"/>
    <property name="maven.conf" value="/usr/share/maven/conf"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.class.version" value="52.0"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="maven.test.failure.ignore" value="true"/>
    <property name="os.version" value="4.15.0-109-generic"/>
    <property name="library.jansi.path" value="/usr/share/maven/lib/jansi-native"/>
    <property name="user.home" value="/home/jdbl"/>
    <property name="user.timezone" value="Etc/UTC"/>
    <property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
    <property name="java.specification.version" value="1.8"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="user.name" value="jdbl"/>
    <property name="java.class.path" value="/usr/share/maven/boot/plexus-classworlds-2.6.0.jar"/>
    <property name="java.vm.specification.version" value="1.8"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.home" value="/usr/local/openjdk-8/jre"/>
    <property name="sun.java.command" value="org.codehaus.plexus.classworlds.launcher.Launcher test -e --fail-never -ntp -Dmaven.test.failure.ignore=true -B -Dmaven.javadoc.skip=true -Drat.skip=true -Danimal.sniffer.skip=true -Dmaven.javadoc.skip=true -Dlicense.skip=true -Dsource.skip=true"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="user.language" value="en"/>
    <property name="awt.toolkit" value="sun.awt.X11.XToolkit"/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.version" value="1.8.0_262"/>
    <property name="java.ext.dirs" value="/usr/local/openjdk-8/jre/lib/ext:/usr/java/packages/lib/ext"/>
    <property name="securerandom.source" value="file:/dev/./urandom"/>
    <property name="sun.boot.class.path" value="/usr/local/openjdk-8/jre/lib/resources.jar:/usr/local/openjdk-8/jre/lib/rt.jar:/usr/local/openjdk-8/jre/lib/sunrsasign.jar:/usr/local/openjdk-8/jre/lib/jsse.jar:/usr/local/openjdk-8/jre/lib/jce.jar:/usr/local/openjdk-8/jre/lib/charsets.jar:/usr/local/openjdk-8/jre/lib/jfr.jar:/usr/local/openjdk-8/jre/classes"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="rat.skip" value="true"/>
    <property name="maven.home" value="/usr/share/maven"/>
    <property name="file.separator" value="/"/>
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="sun.cpu.isalist" value=""/>
  </properties>
  <testcase name="Given the salt is &quot;1&quot;, the feature is &quot;f1&quot; and the key is &quot;alice&quot;" classname="| 1 | f1 | alice | 9 | de5ce0fbc583fd8 |" time="0.001"/>
  <testcase name="When the variant value is calculated" classname="| 1 | f1 | alice | 9 | de5ce0fbc583fd8 |" time="0.004"/>
  <testcase name="Then the hash value calculated should equal &quot;de5ce0fbc583fd8&quot;" classname="| 1 | f1 | alice | 9 | de5ce0fbc583fd8 |" time="0"/>
  <testcase name="And the result from the variant calculation should be 9" classname="| 1 | f1 | alice | 9 | de5ce0fbc583fd8 |" time="0"/>
  <testcase name="| 1 | f1 | alice | 9 | de5ce0fbc583fd8 |" classname="| 1 | f1 | alice | 9 | de5ce0fbc583fd8 |" time="0"/>
  <testcase name="Given the salt is &quot;1&quot;, the feature is &quot;f1&quot; and the key is &quot;bob&quot;" classname="| 1 | f1 | bob | 14 | 8ecddc9f392dc35 |" time="0"/>
  <testcase name="When the variant value is calculated" classname="| 1 | f1 | bob | 14 | 8ecddc9f392dc35 |" time="0"/>
  <testcase name="Then the hash value calculated should equal &quot;8ecddc9f392dc35&quot;" classname="| 1 | f1 | bob | 14 | 8ecddc9f392dc35 |" time="0"/>
  <testcase name="And the result from the variant calculation should be 14" classname="| 1 | f1 | bob | 14 | 8ecddc9f392dc35 |" time="0"/>
  <testcase name="| 1 | f1 | bob | 14 | 8ecddc9f392dc35 |" classname="| 1 | f1 | bob | 14 | 8ecddc9f392dc35 |" time="0"/>
  <testcase name="Given the salt is &quot;2&quot;, the feature is &quot;f1&quot; and the key is &quot;alice&quot;" classname="| 2 | f1 | alice | 71 | e31eff9e88214f2 |" time="0"/>
  <testcase name="When the variant value is calculated" classname="| 2 | f1 | alice | 71 | e31eff9e88214f2 |" time="0"/>
  <testcase name="Then the hash value calculated should equal &quot;e31eff9e88214f2&quot;" classname="| 2 | f1 | alice | 71 | e31eff9e88214f2 |" time="0"/>
  <testcase name="And the result from the variant calculation should be 71" classname="| 2 | f1 | alice | 71 | e31eff9e88214f2 |" time="0"/>
  <testcase name="| 2 | f1 | alice | 71 | e31eff9e88214f2 |" classname="| 2 | f1 | alice | 71 | e31eff9e88214f2 |" time="0"/>
  <testcase name="Given the salt is &quot;2&quot;, the feature is &quot;f1&quot; and the key is &quot;bob&quot;" classname="| 2 | f1 | bob | 58 | 591e96e46fc1dad |" time="0"/>
  <testcase name="When the variant value is calculated" classname="| 2 | f1 | bob | 58 | 591e96e46fc1dad |" time="0"/>
  <testcase name="Then the hash value calculated should equal &quot;591e96e46fc1dad&quot;" classname="| 2 | f1 | bob | 58 | 591e96e46fc1dad |" time="0"/>
  <testcase name="And the result from the variant calculation should be 58" classname="| 2 | f1 | bob | 58 | 591e96e46fc1dad |" time="0"/>
  <testcase name="| 2 | f1 | bob | 58 | 591e96e46fc1dad |" classname="| 2 | f1 | bob | 58 | 591e96e46fc1dad |" time="0"/>
  <testcase name="Given the salt is &quot;3&quot;, the feature is &quot;f1&quot; and the key is &quot;alice&quot;" classname="| 3 | f1 | alice | 36 | 05ad8a286f0b0bb |" time="0"/>
  <testcase name="When the variant value is calculated" classname="| 3 | f1 | alice | 36 | 05ad8a286f0b0bb |" time="0"/>
  <testcase name="Then the hash value calculated should equal &quot;05ad8a286f0b0bb&quot;" classname="| 3 | f1 | alice | 36 | 05ad8a286f0b0bb |" time="0"/>
  <testcase name="And the result from the variant calculation should be 36" classname="| 3 | f1 | alice | 36 | 05ad8a286f0b0bb |" time="0"/>
  <testcase name="| 3 | f1 | alice | 36 | 05ad8a286f0b0bb |" classname="| 3 | f1 | alice | 36 | 05ad8a286f0b0bb |" time="0"/>
  <testcase name="Given the salt is &quot;3&quot;, the feature is &quot;f1&quot; and the key is &quot;bob&quot;" classname="| 3 | f1 | bob | 2 | 9bc2af62801255d |" time="0"/>
  <testcase name="When the variant value is calculated" classname="| 3 | f1 | bob | 2 | 9bc2af62801255d |" time="0"/>
  <testcase name="Then the hash value calculated should equal &quot;9bc2af62801255d&quot;" classname="| 3 | f1 | bob | 2 | 9bc2af62801255d |" time="0"/>
  <testcase name="And the result from the variant calculation should be 2" classname="| 3 | f1 | bob | 2 | 9bc2af62801255d |" time="0"/>
  <testcase name="| 3 | f1 | bob | 2 | 9bc2af62801255d |" classname="| 3 | f1 | bob | 2 | 9bc2af62801255d |" time="0"/>
  <testcase name="Given the rule is a default rule" classname="Scenario: Test that the default rule returns a true match" time="0"/>
  <testcase name="When the rule is matched against the user" classname="Scenario: Test that the default rule returns a true match" time="0"/>
  <testcase name="Then the result from the match should be true" classname="Scenario: Test that the default rule returns a true match" time="0"/>
  <testcase name="Scenario: Test that the default rule returns a true match" classname="Scenario: Test that the default rule returns a true match" time="0"/>
  <testcase name="Given the user attributes are" classname="| role | &quot;beta&quot; | equals | role | [&quot;beta&quot;] | true |" time="0">
    <skipped/>
    <system-out><![CDATA[
  Scenario: Test that the default rule returns a true match &amp#27;[90m# rules.feature:2&amp#27;[0m
    &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mthe rule is a default rule&amp#27;[0m                        &amp#27;[90m# RulesStepDefs.the_rule_is_a_default_rule()&amp#27;[0m
    &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mthe rule is matched against the user&amp#27;[0m               &amp#27;[90m# RulesStepDefs.the_rule_is_matched_against_the_user()&amp#27;[0m
    &amp#27;[32mThen &amp#27;[0m&amp#27;[32mthe result from the match should be true&amp#27;[0m           &amp#27;[90m# RulesStepDefs.the_result_from_the_match_should_be_true()&amp#27;[0m

  Scenario Outline: Test that the rule user matching works (User {<attribute>: <attributeValue>} with operator: <operator>, target: <target>, values: <values>, result: <result>) &amp#27;[90m# rules.feature:7&amp#27;[0m
    &amp#27;[36mGiven &amp#27;[0m&amp#27;[36mthe user attributes are&amp#27;[0m
    &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mthe rule's audience conditions are&amp#27;[0m
    &amp#27;[36mWhen &amp#27;[0m&amp#27;[36mthe rule is matched against the user&amp#27;[0m
    &amp#27;[36mThen &amp#27;[0m&amp#27;[36mthe result from the match should be <result>&amp#27;[0m

    Examples: 
]]></system-out>
  </testcase>
  <testcase name="And the rule&apos;s audience conditions are" classname="| role | &quot;beta&quot; | equals | role | [&quot;beta&quot;] | true |" time="0">
    <skipped/>
  </testcase>
  <testcase name="When the rule is matched against the user" classname="| role | &quot;beta&quot; | equals | role | [&quot;beta&quot;] | true |" time="0">
    <skipped/>
  </testcase>
  <testcase name="Then the result from the match should be true" classname="| role | &quot;beta&quot; | equals | role | [&quot;beta&quot;] | true |" time="0">
    <skipped/>
  </testcase>
  <testcase name="| role | &quot;beta&quot; | equals | role | [&quot;beta&quot;] | true |" classname="| role | &quot;beta&quot; | equals | role | [&quot;beta&quot;] | true |" time="0">
    <skipped/>
  </testcase>
  <testcase name="| role | &quot;beta&quot; | equals | role | [&quot;beta&quot;] | true |" classname="| role | &quot;beta&quot; | equals | role | [&quot;beta&quot;] | true |" time="0.009"/>
  <testcase name="Given the user attributes are" classname="| role | &quot;alpha&quot; | equals | role | [&quot;beta&quot;] | false |" time="0">
    <skipped/>
    <system-out><![CDATA[
  Scenario Outline: Test that the rule user matching works (User {role: "beta"} with operator: equals, target: role, values: ["beta"], result: true) &amp#27;[90m# rules.feature:18&amp#27;[0m
    &amp#27;[33mGiven &amp#27;[0m&amp#27;[33mthe user attributes are&amp#27;[0m
    &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mthe rule's audience conditions are&amp#27;[0m                                                                                                           &amp#27;[90m# RulesStepDefs.the_rule_s_audience_conditions_are(DataTable)&amp#27;[0m
    &amp#27;[36mWhen &amp#27;[0m&amp#27;[36mthe rule is matched against the user&amp#27;[0m                                                                                                        &amp#27;[90m# RulesStepDefs.the_rule_is_matched_against_the_user()&amp#27;[0m
    &amp#27;[36mThen &amp#27;[0m&amp#27;[36mthe result from the match should be true&amp#27;[0m                                                                                                    &amp#27;[90m# RulesStepDefs.the_result_from_the_match_should_be_true()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="And the rule&apos;s audience conditions are" classname="| role | &quot;alpha&quot; | equals | role | [&quot;beta&quot;] | false |" time="0">
    <skipped/>
  </testcase>
  <testcase name="When the rule is matched against the user" classname="| role | &quot;alpha&quot; | equals | role | [&quot;beta&quot;] | false |" time="0">
    <skipped/>
  </testcase>
  <testcase name="Then the result from the match should be false" classname="| role | &quot;alpha&quot; | equals | role | [&quot;beta&quot;] | false |" time="0">
    <skipped/>
  </testcase>
  <testcase name="| role | &quot;alpha&quot; | equals | role | [&quot;beta&quot;] | false |" classname="| role | &quot;alpha&quot; | equals | role | [&quot;beta&quot;] | false |" time="0">
    <skipped/>
  </testcase>
  <testcase name="| role | &quot;alpha&quot; | equals | role | [&quot;beta&quot;] | false |" classname="| role | &quot;alpha&quot; | equals | role | [&quot;beta&quot;] | false |" time="0.003"/>
  <testcase name="Given the user attributes are" classname="| role | [&quot;beta&quot;, &quot;alpha&quot;] | equals | role | [&quot;beta&quot;] | true |" time="0">
    <skipped/>
    <system-out><![CDATA[
  Scenario Outline: Test that the rule user matching works (User {role: "alpha"} with operator: equals, target: role, values: ["beta"], result: false) &amp#27;[90m# rules.feature:19&amp#27;[0m
    &amp#27;[33mGiven &amp#27;[0m&amp#27;[33mthe user attributes are&amp#27;[0m
    &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mthe rule's audience conditions are&amp#27;[0m                                                                                                             &amp#27;[90m# RulesStepDefs.the_rule_s_audience_conditions_are(DataTable)&amp#27;[0m
    &amp#27;[36mWhen &amp#27;[0m&amp#27;[36mthe rule is matched against the user&amp#27;[0m                                                                                                          &amp#27;[90m# RulesStepDefs.the_rule_is_matched_against_the_user()&amp#27;[0m
    &amp#27;[36mThen &amp#27;[0m&amp#27;[36mthe result from the match should be false&amp#27;[0m                                                                                                     &amp#27;[90m# RulesStepDefs.the_result_from_the_match_should_be_false()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="And the rule&apos;s audience conditions are" classname="| role | [&quot;beta&quot;, &quot;alpha&quot;] | equals | role | [&quot;beta&quot;] | true |" time="0">
    <skipped/>
  </testcase>
  <testcase name="When the rule is matched against the user" classname="| role | [&quot;beta&quot;, &quot;alpha&quot;] | equals | role | [&quot;beta&quot;] | true |" time="0">
    <skipped/>
  </testcase>
  <testcase name="Then the result from the match should be true" classname="| role | [&quot;beta&quot;, &quot;alpha&quot;] | equals | role | [&quot;beta&quot;] | true |" time="0">
    <skipped/>
  </testcase>
  <testcase name="| role | [&quot;beta&quot;, &quot;alpha&quot;] | equals | role | [&quot;beta&quot;] | true |" classname="| role | [&quot;beta&quot;, &quot;alpha&quot;] | equals | role | [&quot;beta&quot;] | true |" time="0">
    <skipped/>
  </testcase>
  <testcase name="| role | [&quot;beta&quot;, &quot;alpha&quot;] | equals | role | [&quot;beta&quot;] | true |" classname="| role | [&quot;beta&quot;, &quot;alpha&quot;] | equals | role | [&quot;beta&quot;] | true |" time="0.002"/>
  <testcase name="Given the user attributes are" classname="| role | [&quot;beta&quot;, &quot;alpha&quot;] | equals | role | [&quot;alpha&quot;] | true |" time="0">
    <skipped/>
    <system-out><![CDATA[
  Scenario Outline: Test that the rule user matching works (User {role: ["beta", "alpha"]} with operator: equals, target: role, values: ["beta"], result: true) &amp#27;[90m# rules.feature:20&amp#27;[0m
    &amp#27;[33mGiven &amp#27;[0m&amp#27;[33mthe user attributes are&amp#27;[0m
    &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mthe rule's audience conditions are&amp#27;[0m                                                                                                                      &amp#27;[90m# RulesStepDefs.the_rule_s_audience_conditions_are(DataTable)&amp#27;[0m
    &amp#27;[36mWhen &amp#27;[0m&amp#27;[36mthe rule is matched against the user&amp#27;[0m                                                                                                                   &amp#27;[90m# RulesStepDefs.the_rule_is_matched_against_the_user()&amp#27;[0m
    &amp#27;[36mThen &amp#27;[0m&amp#27;[36mthe result from the match should be true&amp#27;[0m                                                                                                               &amp#27;[90m# RulesStepDefs.the_result_from_the_match_should_be_true()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="And the rule&apos;s audience conditions are" classname="| role | [&quot;beta&quot;, &quot;alpha&quot;] | equals | role | [&quot;alpha&quot;] | true |" time="0">
    <skipped/>
  </testcase>
  <testcase name="When the rule is matched against the user" classname="| role | [&quot;beta&quot;, &quot;alpha&quot;] | equals | role | [&quot;alpha&quot;] | true |" time="0">
    <skipped/>
  </testcase>
  <testcase name="Then the result from the match should be true" classname="| role | [&quot;beta&quot;, &quot;alpha&quot;] | equals | role | [&quot;alpha&quot;] | true |" time="0">
    <skipped/>
  </testcase>
  <testcase name="| role | [&quot;beta&quot;, &quot;alpha&quot;] | equals | role | [&quot;alpha&quot;] | true |" classname="| role | [&quot;beta&quot;, &quot;alpha&quot;] | equals | role | [&quot;alpha&quot;] | true |" time="0">
    <skipped/>
  </testcase>
  <testcase name="| role | [&quot;beta&quot;, &quot;alpha&quot;] | equals | role | [&quot;alpha&quot;] | true |" classname="| role | [&quot;beta&quot;, &quot;alpha&quot;] | equals | role | [&quot;alpha&quot;] | true |" time="0.015"/>
  <testcase name="Given the user attributes are" classname="| role | [&quot;beta&quot;, &quot;alpha&quot;] | equals | role | [&quot;nope&quot;] | false |" time="0">
    <skipped/>
    <system-out><![CDATA[
  Scenario Outline: Test that the rule user matching works (User {role: ["beta", "alpha"]} with operator: equals, target: role, values: ["alpha"], result: true) &amp#27;[90m# rules.feature:21&amp#27;[0m
    &amp#27;[33mGiven &amp#27;[0m&amp#27;[33mthe user attributes are&amp#27;[0m
    &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mthe rule's audience conditions are&amp#27;[0m                                                                                                                       &amp#27;[90m# RulesStepDefs.the_rule_s_audience_conditions_are(DataTable)&amp#27;[0m
    &amp#27;[36mWhen &amp#27;[0m&amp#27;[36mthe rule is matched against the user&amp#27;[0m                                                                                                                    &amp#27;[90m# RulesStepDefs.the_rule_is_matched_against_the_user()&amp#27;[0m
    &amp#27;[36mThen &amp#27;[0m&amp#27;[36mthe result from the match should be true&amp#27;[0m                                                                                                                &amp#27;[90m# RulesStepDefs.the_result_from_the_match_should_be_true()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="And the rule&apos;s audience conditions are" classname="| role | [&quot;beta&quot;, &quot;alpha&quot;] | equals | role | [&quot;nope&quot;] | false |" time="0">
    <skipped/>
  </testcase>
  <testcase name="When the rule is matched against the user" classname="| role | [&quot;beta&quot;, &quot;alpha&quot;] | equals | role | [&quot;nope&quot;] | false |" time="0">
    <skipped/>
  </testcase>
  <testcase name="Then the result from the match should be false" classname="| role | [&quot;beta&quot;, &quot;alpha&quot;] | equals | role | [&quot;nope&quot;] | false |" time="0">
    <skipped/>
  </testcase>
  <testcase name="| role | [&quot;beta&quot;, &quot;alpha&quot;] | equals | role | [&quot;nope&quot;] | false |" classname="| role | [&quot;beta&quot;, &quot;alpha&quot;] | equals | role | [&quot;nope&quot;] | false |" time="0">
    <skipped/>
  </testcase>
  <testcase name="| role | [&quot;beta&quot;, &quot;alpha&quot;] | equals | role | [&quot;nope&quot;] | false |" classname="| role | [&quot;beta&quot;, &quot;alpha&quot;] | equals | role | [&quot;nope&quot;] | false |" time="0.002"/>
  <testcase name="Given the user attributes are" classname="Scenario: Test multiple conditions all passing will return true" time="0">
    <skipped/>
    <system-out><![CDATA[
  Scenario Outline: Test that the rule user matching works (User {role: ["beta", "alpha"]} with operator: equals, target: role, values: ["nope"], result: false) &amp#27;[90m# rules.feature:22&amp#27;[0m
    &amp#27;[33mGiven &amp#27;[0m&amp#27;[33mthe user attributes are&amp#27;[0m
    &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mthe rule's audience conditions are&amp#27;[0m                                                                                                                       &amp#27;[90m# RulesStepDefs.the_rule_s_audience_conditions_are(DataTable)&amp#27;[0m
    &amp#27;[36mWhen &amp#27;[0m&amp#27;[36mthe rule is matched against the user&amp#27;[0m                                                                                                                    &amp#27;[90m# RulesStepDefs.the_rule_is_matched_against_the_user()&amp#27;[0m
    &amp#27;[36mThen &amp#27;[0m&amp#27;[36mthe result from the match should be false&amp#27;[0m                                                                                                               &amp#27;[90m# RulesStepDefs.the_result_from_the_match_should_be_false()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="And the rule&apos;s audience conditions are" classname="Scenario: Test multiple conditions all passing will return true" time="0">
    <skipped/>
  </testcase>
  <testcase name="When the rule is matched against the user" classname="Scenario: Test multiple conditions all passing will return true" time="0">
    <skipped/>
  </testcase>
  <testcase name="Then the result from the match should be true" classname="Scenario: Test multiple conditions all passing will return true" time="0">
    <skipped/>
  </testcase>
  <testcase name="Scenario: Test multiple conditions all passing will return true" classname="Scenario: Test multiple conditions all passing will return true" time="0">
    <skipped/>
  </testcase>
  <testcase name="Scenario: Test multiple conditions all passing will return true" classname="Scenario: Test multiple conditions all passing will return true" time="0.003"/>
  <testcase name="Given the user attributes are" classname="Scenario: Test one conditions, but one failing, will return false" time="0">
    <skipped/>
    <system-out><![CDATA[
  Scenario: Test multiple conditions all passing will return true &amp#27;[90m# rules.feature:24&amp#27;[0m
    &amp#27;[33mGiven &amp#27;[0m&amp#27;[33mthe user attributes are&amp#27;[0m
    &amp#27;[36mAnd &amp#27;[0m&amp#27;[36mthe rule's audience conditions are&amp#27;[0m                        &amp#27;[90m# RulesStepDefs.the_rule_s_audience_conditions_are(DataTable)&amp#27;[0m
    &amp#27;[36mWhen &amp#27;[0m&amp#27;[36mthe rule is matched against the user&amp#27;[0m                     &amp#27;[90m# RulesStepDefs.the_rule_is_matched_against_the_user()&amp#27;[0m
    &amp#27;[36mThen &amp#27;[0m&amp#27;[36mthe result from the match should be true&amp#27;[0m                 &amp#27;[90m# RulesStepDefs.the_result_from_the_match_should_be_true()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="And the rule&apos;s audience conditions are" classname="Scenario: Test one conditions, but one failing, will return false" time="0">
    <skipped/>
  </testcase>
  <testcase name="When the rule is matched against the user" classname="Scenario: Test one conditions, but one failing, will return false" time="0">
    <skipped/>
  </testcase>
  <testcase name="Then the result from the match should be false" classname="Scenario: Test one conditions, but one failing, will return false" time="0">
    <skipped/>
  </testcase>
  <testcase name="Scenario: Test one conditions, but one failing, will return false" classname="Scenario: Test one conditions, but one failing, will return false" time="0">
    <skipped/>
  </testcase>
  <testcase name="Scenario: Test one conditions, but one failing, will return false" classname="Scenario: Test one conditions, but one failing, will return false" time="0.001"/>
  <testcase name="Given the variant value of 50" classname="| 50 | 100 | 0 | off |" time="0"/>
  <testcase name="And the variant splits are" classname="| 50 | 100 | 0 | off |" time="0"/>
  <testcase name="When the variant split key is calculated" classname="| 50 | 100 | 0 | off |" time="0"/>
  <testcase name="Then the resulting variant should be &quot;off&quot;" classname="| 50 | 100 | 0 | off |" time="0"/>
  <testcase name="| 50 | 100 | 0 | off |" classname="| 50 | 100 | 0 | off |" time="0"/>
  <testcase name="Given the variant value of 50" classname="| 50 | 0 | 100 | on |" time="0"/>
  <testcase name="And the variant splits are" classname="| 50 | 0 | 100 | on |" time="0"/>
  <testcase name="When the variant split key is calculated" classname="| 50 | 0 | 100 | on |" time="0"/>
  <testcase name="Then the resulting variant should be &quot;on&quot;" classname="| 50 | 0 | 100 | on |" time="0"/>
  <testcase name="| 50 | 0 | 100 | on |" classname="| 50 | 0 | 100 | on |" time="0"/>
  <testcase name="Given the variant value of 11" classname="| 11 | 10 | 90 | on |" time="0"/>
  <testcase name="And the variant splits are" classname="| 11 | 10 | 90 | on |" time="0"/>
  <testcase name="When the variant split key is calculated" classname="| 11 | 10 | 90 | on |" time="0"/>
  <testcase name="Then the resulting variant should be &quot;on&quot;" classname="| 11 | 10 | 90 | on |" time="0"/>
  <testcase name="| 11 | 10 | 90 | on |" classname="| 11 | 10 | 90 | on |" time="0"/>
  <testcase name="Given the variant value of 9" classname="| 9 | 10 | 90 | off |" time="0"/>
  <testcase name="And the variant splits are" classname="| 9 | 10 | 90 | off |" time="0"/>
  <testcase name="When the variant split key is calculated" classname="| 9 | 10 | 90 | off |" time="0"/>
  <testcase name="Then the resulting variant should be &quot;off&quot;" classname="| 9 | 10 | 90 | off |" time="0"/>
  <testcase name="| 9 | 10 | 90 | off |" classname="| 9 | 10 | 90 | off |" time="0"/>
  <testcase name="Given the variant value of 1" classname="| 1 | on |" time="0"/>
  <testcase name="And the variant splits are" classname="| 1 | on |" time="0"/>
  <testcase name="When the variant split key is calculated" classname="| 1 | on |" time="0"/>
  <testcase name="Then the resulting variant should be &quot;on&quot;" classname="| 1 | on |" time="0"/>
  <testcase name="| 1 | on |" classname="| 1 | on |" time="0"/>
  <testcase name="Given the variant value of 30" classname="| 30 | on |" time="0"/>
  <testcase name="And the variant splits are" classname="| 30 | on |" time="0"/>
  <testcase name="When the variant split key is calculated" classname="| 30 | on |" time="0"/>
  <testcase name="Then the resulting variant should be &quot;on&quot;" classname="| 30 | on |" time="0"/>
  <testcase name="| 30 | on |" classname="| 30 | on |" time="0"/>
  <testcase name="Given the variant value of 50" classname="| 50 | alpha |" time="0"/>
  <testcase name="And the variant splits are" classname="| 50 | alpha |" time="0"/>
  <testcase name="When the variant split key is calculated" classname="| 50 | alpha |" time="0"/>
  <testcase name="Then the resulting variant should be &quot;alpha&quot;" classname="| 50 | alpha |" time="0"/>
  <testcase name="| 50 | alpha |" classname="| 50 | alpha |" time="0"/>
  <testcase name="Given the variant value of 61" classname="| 61 | beta |" time="0"/>
  <testcase name="And the variant splits are" classname="| 61 | beta |" time="0"/>
  <testcase name="When the variant split key is calculated" classname="| 61 | beta |" time="0"/>
  <testcase name="Then the resulting variant should be &quot;beta&quot;" classname="| 61 | beta |" time="0"/>
  <testcase name="| 61 | beta |" classname="| 61 | beta |" time="0"/>
  <testcase name="Given the variant value of 100" classname="| 100 | betav2 |" time="0"/>
  <testcase name="And the variant splits are" classname="| 100 | betav2 |" time="0"/>
  <testcase name="When the variant split key is calculated" classname="| 100 | betav2 |" time="0"/>
  <testcase name="Then the resulting variant should be &quot;betav2&quot;" classname="| 100 | betav2 |" time="0"/>
  <testcase name="| 100 | betav2 |" classname="| 100 | betav2 |" time="0"/>
</testsuite>