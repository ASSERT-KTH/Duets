<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.trendyol</groupId>
    <artifactId>scheduler-service</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>
    <name>scheduler-service</name>
    <description>Scheduler Service Project</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.0.RELEASE</version>
        <relativePath/>
    </parent>

    <properties>
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <apache.maven-source-plugin.version>3.0.1</apache.maven-source-plugin.version>
        <couchbase-java-client-version>2.5.7</couchbase-java-client-version>
        <commons-validator.version>1.6</commons-validator.version>
        <springfox-swagger2.version>2.8.0</springfox-swagger2.version>
        <springfox-swagger-ui.version>2.8.0</springfox-swagger-ui.version>
        <logback-gelf.version>1.0.4</logback-gelf.version>
        <powermock-api-mockito.version>2.0.2</powermock-api-mockito.version>
        <googlefindbugs-annotations.version>3.0.1</googlefindbugs-annotations.version>
        <jedis.version>2.9.0</jedis.version>
        <sonar.exclusions>
            **/scheduler/configuration/**/*
        </sonar.exclusions>

        <!-- Flags -->
        <skip.checkstyle.check>false</skip.checkstyle.check>
        <skip.findbugs.check>false</skip.findbugs.check>

        <!-- Rules -->
        <rule.line.coverage>0.70</rule.line.coverage>
        <rule.line.length>150</rule.line.length>

        <!-- Plugin Versions -->
        <plugin.checkstyle.version>3.0.0</plugin.checkstyle.version>
        <plugin.findbugs.version>3.0.5</plugin.findbugs.version>
        <plugin.surefire.version>2.22.1</plugin.surefire.version>

        <!-- Versions -->
        <checkstyle.version>8.18</checkstyle.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-amqp</artifactId>
        </dependency>

        <dependency>
            <groupId>org.liquibase</groupId>
            <artifactId>liquibase-core</artifactId>
        </dependency>

        <dependency>
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
        </dependency>

        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>

        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
        </dependency>

        <dependency>
            <groupId>commons-validator</groupId>
            <artifactId>commons-validator</artifactId>
            <version>${commons-validator.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpasyncclient</artifactId>
        </dependency>

        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${springfox-swagger2.version}</version>
        </dependency>

        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${springfox-swagger-ui.version}</version>
        </dependency>

        <dependency>
            <groupId>de.siegmar</groupId>
            <artifactId>logback-gelf</artifactId>
            <version>${logback-gelf.version}</version>
        </dependency>

        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-couchbase</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>com.couchbase.client</groupId>
                    <artifactId>java-client</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>com.couchbase.client</groupId>
            <artifactId>java-client</artifactId>
            <version>${couchbase-java-client-version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-redis</artifactId>
        </dependency>

        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
            <version>${jedis.version}</version>
            <type>jar</type>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-module-junit4</artifactId>
            <version>${powermock-api-mockito.version}</version>
        </dependency>

        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-api-mockito2</artifactId>
            <version>${powermock-api-mockito.version}</version>
        </dependency>

        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>annotations</artifactId>
            <version>${googlefindbugs-annotations.version}</version>
            <scope>compile</scope>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>build-info</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>${apache.maven-source-plugin.version}</version>
                <configuration>
                    <skipSource>true</skipSource>
                </configuration>
            </plugin>

            <!-- Findbugs: Ensures well-know bugs never appear -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>findbugs-maven-plugin</artifactId>
                <configuration>
                    <effort>Max</effort>
                    <threshold>Low</threshold>
                    <xmlOutput>true</xmlOutput>
                    <skip>${skip.findbugs.check}</skip>
                    <excludeFilterFile>${project.basedir}/findbugs-exclude.xml</excludeFilterFile>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Checkstyle: Ensures similar code structure -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <dependencies>
                    <dependency>
                        <groupId>com.puppycrawl.tools</groupId>
                        <artifactId>checkstyle</artifactId>
                        <version>${checkstyle.version}</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <failsOnError>true</failsOnError>
                    <failOnViolation>true</failOnViolation>
                    <includeTestResources>false</includeTestResources>
                    <maxAllowedViolations>0</maxAllowedViolations>
                    <violationSeverity>warning</violationSeverity>
                    <logViolationsToConsole>true</logViolationsToConsole>
                    <consoleOutput>true</consoleOutput>
                    <skip>${skip.checkstyle.check}</skip>
                    <checkstyleRules>
                        <module name="Checker">
                            <property name="charset" value="UTF-8"/>

                            <property name="severity" value="warning"/>

                            <property name="fileExtensions" value="java, properties, xml"/>
                            <!-- Checks for whitespace                               -->
                            <!-- See http://checkstyle.sf.net/config_whitespace.html -->
                            <module name="FileTabCharacter">
                                <property name="eachLine" value="true"/>
                            </module>
                            <module name="SuppressWarningsFilter"/>
                            <module name="TreeWalker">
                                <module name="SuppressWarningsHolder"/>
                                <module name="OuterTypeFilename"/>
                                <module name="IllegalTokenText">
                                    <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
                                    <property name="format"
                                              value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
                                    <property name="message"
                                              value="Consider using special escape sequence instead of octal value or Unicode escaped value."/>
                                </module>
                                <module name="AvoidEscapedUnicodeCharacters">
                                    <property name="allowEscapesForControlCharacters" value="true"/>
                                    <property name="allowByTailComment" value="true"/>
                                    <property name="allowNonPrintableEscapes" value="true"/>
                                </module>
                                <module name="LineLength">
                                    <property name="max" value="150"/>
                                    <property name="ignorePattern"
                                              value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
                                </module>
                                <module name="AvoidStarImport"/>
                                <module name="OneTopLevelClass"/>
                                <module name="NoLineWrap"/>
                                <module name="EmptyBlock">
                                    <property name="option" value="TEXT"/>
                                    <property name="tokens"
                                              value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
                                </module>
                                <module name="NeedBraces"/>
                                <module name="LeftCurly"/>
                                <module name="RightCurly">
                                    <property name="id" value="RightCurlySame"/>
                                    <property name="tokens"
                                              value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO"/>
                                </module>
                                <module name="RightCurly">
                                    <property name="id" value="RightCurlyAlone"/>
                                    <property name="option" value="alone"/>
                                    <property name="tokens"
                                              value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT"/>
                                </module>
                                <module name="WhitespaceAround">
                                    <property name="allowEmptyConstructors" value="true"/>
                                    <property name="allowEmptyMethods" value="true"/>
                                    <property name="allowEmptyTypes" value="true"/>
                                    <property name="allowEmptyLoops" value="true"/>
                                    <message key="ws.notFollowed"
                                             value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
                                    <message key="ws.notPreceded"
                                             value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
                                </module>
                                <module name="OneStatementPerLine"/>
                                <module name="MultipleVariableDeclarations"/>
                                <module name="ArrayTypeStyle"/>
                                <module name="MissingSwitchDefault"/>
                                <module name="FallThrough"/>
                                <module name="UpperEll"/>
                                <module name="ModifierOrder"/>
                                <module name="EmptyLineSeparator">
                                    <property name="allowNoEmptyLineBetweenFields" value="true"/>
                                </module>
                                <module name="SeparatorWrap">
                                    <property name="id" value="SeparatorWrapDot"/>
                                    <property name="tokens" value="DOT"/>
                                    <property name="option" value="nl"/>
                                </module>
                                <module name="SeparatorWrap">
                                    <property name="id" value="SeparatorWrapComma"/>
                                    <property name="tokens" value="COMMA"/>
                                    <property name="option" value="EOL"/>
                                </module>
                                <module name="SeparatorWrap">
                                    <!-- ELLIPSIS is EOL until https://github.com/google/styleguide/issues/258 -->
                                    <property name="id" value="SeparatorWrapEllipsis"/>
                                    <property name="tokens" value="ELLIPSIS"/>
                                    <property name="option" value="EOL"/>
                                </module>
                                <module name="SeparatorWrap">
                                    <!-- ARRAY_DECLARATOR is EOL until https://github.com/google/styleguide/issues/259 -->
                                    <property name="id" value="SeparatorWrapArrayDeclarator"/>
                                    <property name="tokens" value="ARRAY_DECLARATOR"/>
                                    <property name="option" value="EOL"/>
                                </module>
                                <module name="SeparatorWrap">
                                    <property name="id" value="SeparatorWrapMethodRef"/>
                                    <property name="tokens" value="METHOD_REF"/>
                                    <property name="option" value="nl"/>
                                </module>
                                <module name="PackageName">
                                    <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
                                    <message key="name.invalidPattern"
                                             value="Package name ''{0}'' must match pattern ''{1}''."/>
                                </module>
                                <module name="TypeName">
                                    <message key="name.invalidPattern"
                                             value="Type name ''{0}'' must match pattern ''{1}''."/>
                                </module>
                                <module name="MemberName">
                                    <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
                                    <message key="name.invalidPattern"
                                             value="Member name ''{0}'' must match pattern ''{1}''."/>
                                </module>
                                <module name="ParameterName">
                                    <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
                                    <message key="name.invalidPattern"
                                             value="Parameter name ''{0}'' must match pattern ''{1}''."/>
                                </module>
                                <module name="CatchParameterName">
                                    <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
                                    <message key="name.invalidPattern"
                                             value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
                                </module>
                                <module name="LocalVariableName">
                                    <property name="tokens" value="VARIABLE_DEF"/>
                                    <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
                                    <message key="name.invalidPattern"
                                             value="Local variable name ''{0}'' must match pattern ''{1}''."/>
                                </module>
                                <module name="ClassTypeParameterName">
                                    <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
                                    <message key="name.invalidPattern"
                                             value="Class type name ''{0}'' must match pattern ''{1}''."/>
                                </module>
                                <module name="MethodTypeParameterName">
                                    <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
                                    <message key="name.invalidPattern"
                                             value="Method type name ''{0}'' must match pattern ''{1}''."/>
                                </module>
                                <module name="InterfaceTypeParameterName">
                                    <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
                                    <message key="name.invalidPattern"
                                             value="Interface type name ''{0}'' must match pattern ''{1}''."/>
                                </module>
                                <module name="NoFinalizer"/>
                                <module name="GenericWhitespace">
                                    <message key="ws.followed"
                                             value="GenericWhitespace ''{0}'' is followed by whitespace."/>
                                    <message key="ws.preceded"
                                             value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
                                    <message key="ws.illegalFollow"
                                             value="GenericWhitespace ''{0}'' should followed by whitespace."/>
                                    <message key="ws.notPreceded"
                                             value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
                                </module>
                                <module name="Indentation">
                                    <property name="basicOffset" value="4"/>
                                    <property name="braceAdjustment" value="0"/>
                                    <property name="caseIndent" value="4"/>
                                    <property name="throwsIndent" value="4"/>
                                    <property name="lineWrappingIndentation" value="4"/>
                                    <property name="arrayInitIndent" value="4"/>
                                </module>
                                <module name="AbbreviationAsWordInName">
                                    <property name="ignoreFinal" value="false"/>
                                    <property name="allowedAbbreviationLength" value="3"/>
                                </module>
                                <module name="OverloadMethodsDeclarationOrder"/>
                                <module name="VariableDeclarationUsageDistance"/>
                                <module name="CustomImportOrder">
                                    <property name="sortImportsInGroupAlphabetically" value="false"/>
                                    <property name="separateLineBetweenGroups" value="true"/>
                                    <property name="customImportOrderRules" value="SPECIAL_IMPORTS"/>
                                </module>
                                <module name="MethodParamPad"/>
                                <module name="NoWhitespaceBefore">
                                    <property name="tokens"
                                              value="COMMA, SEMI, POST_INC, POST_DEC, DOT, ELLIPSIS, METHOD_REF"/>
                                    <property name="allowLineBreaks" value="true"/>
                                </module>
                                <module name="ParenPad"/>
                                <module name="OperatorWrap">
                                    <property name="option" value="EOL"/>
                                    <property name="tokens"
                                              value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF "/>
                                </module>
                                <module name="AnnotationLocation">
                                    <property name="id" value="AnnotationLocationMostCases"/>
                                    <property name="tokens"
                                              value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
                                </module>
                                <module name="AnnotationLocation">
                                    <property name="id" value="AnnotationLocationVariables"/>
                                    <property name="tokens" value="VARIABLE_DEF"/>
                                    <property name="allowSamelineMultipleAnnotations" value="true"/>
                                </module>
                                <module name="NonEmptyAtclauseDescription"/>
                                <module name="JavadocTagContinuationIndentation"/>
                                <module name="SummaryJavadoc">
                                    <property name="forbiddenSummaryFragments"
                                              value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
                                </module>
                                <module name="JavadocParagraph"/>
                                <module name="AtclauseOrder">
                                    <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
                                    <property name="target"
                                              value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
                                </module>
                                <module name="JavadocMethod">
                                    <property name="scope" value="nothing"/>
                                    <property name="allowMissingParamTags" value="true"/>
                                    <property name="allowMissingThrowsTags" value="true"/>
                                    <property name="allowMissingReturnTag" value="true"/>
                                    <property name="minLineCount" value="2"/>
                                    <property name="allowedAnnotations" value="Override, Test"/>
                                    <property name="allowThrowsTagsForSubclasses" value="true"/>
                                </module>
                                <module name="MethodName">
                                    <property name="format" value="^[a-z0-9][a-zA-Z0-9_]*$"/>
                                    <message key="name.invalidPattern"
                                             value="Method name ''{0}'' must match pattern ''{1}''."/>
                                </module>
                                <module name="SingleLineJavadoc">
                                    <property name="ignoreInlineTags" value="false"/>
                                </module>
                                <module name="EmptyCatchBlock">
                                    <property name="exceptionVariableName" value="expected"/>
                                </module>
                                <module name="CommentsIndentation"/>
                            </module>
                        </module>

                    </checkstyleRules>
                </configuration>
                <executions>
                    <execution>
                        <id>validate</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>