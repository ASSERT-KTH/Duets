<?xml version="1.0" encoding="UTF-8"?><!--
	JBoss, Home of Professional Open Source
	Copyright 2016, Red Hat, Inc. and/or its affiliates, and individual
	contributors by the @authors tag. See the copyright.txt in the
	distribution for a full listing of individual contributors.

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	http://www.apache.org/licenses/LICENSE-2.0
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.redhat.developers.msa</groupId>
	<artifactId>hello</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>Red Hat MSA: hello</name>
	<description>Hello microservice running on EAP</description>

	<url>http://developers.redhat.com/</url>
	<licenses>
		<license>
			<name>Apache License, Version 2.0</name>
			<distribution>repo</distribution>
			<url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
		</license>
	</licenses>

	<properties>
		<!-- Explicitly declaring the source encoding eliminates the following
			message: -->
		<!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered
			resources, i.e. build is platform dependent! -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- JBoss dependency versions -->
		<version.wildfly.maven.plugin>1.0.2.Final</version.wildfly.maven.plugin>

		<!-- Define the version of the JBoss BOMs we want to import to specify
			tested stacks. -->
		<version.jboss.bom>10.0.0.Final</version.jboss.bom>

		<!-- other plugin versions -->
		<version.compiler.plugin>3.1</version.compiler.plugin>
		<version.surefire.plugin>2.16</version.surefire.plugin>
		<version.war.plugin>2.5</version.war.plugin>

		<!-- maven-compiler-plugin -->
		<maven.compiler.target>1.8</maven.compiler.target>
		<maven.compiler.source>1.8</maven.compiler.source>

		<!-- other versions -->
		<hystrix.version>1.5.1</hystrix.version>
		<brave.version>3.5.0</brave.version>
		<netflix.feign.version>8.15.1</netflix.feign.version>
		<swagger.version>1.5.8</swagger.version>


		<!-- fabric8 version -->
		<fabric8.version>2.2.105</fabric8.version>
		<docker.maven.plugin.version>0.15.8</docker.maven.plugin.version>

		<!-- Docker & Fabric8 Configs -->
		<docker.from>jboss-eap-7-beta/eap70-openshift:1.3</docker.from>
		<fabric8.dockerUser>redhatmsa/</fabric8.dockerUser>
		<docker.image>${fabric8.dockerUser}${project.artifactId}:${project.version}</docker.image>
		<docker.port.container.jolokia>8778</docker.port.container.jolokia>

		<!-- Openshift service customization -->
		<fabric8.service.name>${project.artifactId}</fabric8.service.name>
		<fabric8.service.port>8080</fabric8.service.port>
		<fabric8.service.containerPort>8080</fabric8.service.containerPort>
		<fabric8.service.type>LoadBalancer</fabric8.service.type>
		<fabric8.label.group>msa</fabric8.label.group>
		<fabric8.label.hystrix.enabled>true</fabric8.label.hystrix.enabled>
		<fabric8.iconRef>icons/java</fabric8.iconRef>

		<!-- Readness Probe -->
		<fabric8.readinessProbe.httpGet.path>/api/health</fabric8.readinessProbe.httpGet.path>
		<fabric8.readinessProbe.httpGet.port>8080</fabric8.readinessProbe.httpGet.port>
		<fabric8.readinessProbe.initialDelaySeconds>5</fabric8.readinessProbe.initialDelaySeconds>
		<fabric8.readinessProbe.timeoutSeconds>30</fabric8.readinessProbe.timeoutSeconds>
	</properties>


	<dependencyManagement>
		<dependencies>
			<!-- JBoss distributes a complete set of Java EE 7 APIs including a Bill
				of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection)
				of artifacts. We use this here so that we always get the correct versions
				of artifacts. Here we use the wildfly-javaee7-with-tools stack (you can
				read
				this as the JBoss stack of the Java EE 7 APIs, with some extras tools
				for
				your project, such as Arquillian for testing) -->
			<dependency>
				<groupId>org.wildfly.bom</groupId>
				<artifactId>wildfly-javaee7-with-tools</artifactId>
				<version>${version.jboss.bom}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>

		<!-- First declare the APIs we depend on and need for compilation. All
			of them are provided by JBoss WildFly -->

		<!-- Import the CDI API, we use provided scope as the API is included in
			JBoss WildFly -->
		<dependency>
			<groupId>javax.enterprise</groupId>
			<artifactId>cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JAX-RS API, we use provided scope as the API is included
			in JBoss WildFly -->
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jaxrs</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.spec.javax.json</groupId>
			<artifactId>jboss-json-api_1.0_spec</artifactId>
		</dependency>

		<dependency>
			<groupId>com.netflix.feign</groupId>
			<artifactId>feign-core</artifactId>
			<version>${netflix.feign.version}</version>
		</dependency>
		<dependency>
			<groupId>com.netflix.feign</groupId>
			<artifactId>feign-hystrix</artifactId>
			<version>${netflix.feign.version}</version>
		</dependency>
		<dependency>
			<groupId>com.netflix.feign</groupId>
			<artifactId>feign-jackson</artifactId>
			<version>${netflix.feign.version}</version>
		</dependency>
		<dependency>
			<groupId>com.netflix.feign</groupId>
			<artifactId>feign-httpclient</artifactId>
			<version>${netflix.feign.version}</version>
		</dependency>


		<!-- hystrix-metrics-event-stream -->
		<dependency>
			<groupId>com.netflix.hystrix</groupId>
			<artifactId>hystrix-core</artifactId>
			<version>${hystrix.version}</version>
		</dependency>
		<dependency>
			<groupId>com.netflix.hystrix</groupId>
			<artifactId>hystrix-metrics-event-stream</artifactId>
			<version>${hystrix.version}</version>
		</dependency>

		<!-- Brave Zipkin -->
		<dependency>
			<groupId>com.github.kristofa</groupId>
			<artifactId>brave-web-servlet-filter</artifactId>
			<version>${brave.version}</version>
		</dependency>
		<dependency>
			<groupId>com.github.kristofa</groupId>
			<artifactId>brave-apache-http-interceptors</artifactId>
			<version>${brave.version}</version>
		</dependency>
		<dependency>
			<groupId>com.github.kristofa</groupId>
			<artifactId>brave-spancollector-http</artifactId>
			<version>${brave.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5.2</version>
		</dependency>

		<!-- We need a Servlet to enable hystrix-metrics-event-stream -->
		<dependency>
			<groupId>org.jboss.spec.javax.servlet</groupId>
			<artifactId>jboss-servlet-api_3.1_spec</artifactId>
		</dependency>
		<dependency>
			<groupId>org.jboss.spec.javax.annotation</groupId>
			<artifactId>jboss-annotations-api_1.2_spec</artifactId>
		</dependency>

		<!-- Swagger -->
		<dependency>
			<groupId>io.swagger</groupId>
			<artifactId>swagger-jaxrs</artifactId>
			<version>${swagger.version}</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>swagger-ui</artifactId>
			<version>2.1.4</version>
		</dependency>
	</dependencies>

	<build>
		<!-- Maven will append the version to the finalName (which is the name
			given to the generated war, and hence the context root) -->
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>${version.war.plugin}</version>
				<configuration>
					<!-- Java EE 7 doesn't require web.xml, Maven needs to catch up! -->
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
			<!-- The WildFly plugin deploys your war to a local WildFly container -->
			<!-- To use, run: mvn package wildfly:deploy -->
			<plugin>
				<groupId>org.wildfly.plugins</groupId>
				<artifactId>wildfly-maven-plugin</artifactId>
				<version>${version.wildfly.maven.plugin}</version>
			</plugin>
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>fabric8-maven-plugin</artifactId>
				<version>${fabric8.version}</version>
			</plugin>
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>${docker.maven.plugin.version}</version>
				<configuration>
					<images>
						<image>
							<name>${docker.image}</name>
							<build>
								<from>${docker.from}</from>
								<assembly>
									<basedir>/opt/eap/standalone/deployments</basedir>
									<descriptorRef>rootWar</descriptorRef>
								</assembly>
								<env>
									<JAVA_OPTS>-Xms64m -Xmx512m -Djboss.modules.system.pkgs=org.jboss.logmanager</JAVA_OPTS>
								</env>
								<runCmds>
									<run>rm /opt/eap/standalone/deployments/activemq-rar.rar*</run>
								</runCmds>
							</build>
						</image>
					</images>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<!-- When built in OpenShift the 'openshift' profile will be used when
				invoking mvn. -->
			<!-- Use this profile for any OpenShift specific customization your app
				will need. -->
			<!-- By default that is to put the resulting archive into the 'deployments'
				folder. -->
			<!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->
			<id>openshift</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-war-plugin</artifactId>
						<version>${version.war.plugin}</version>
						<configuration>
							<outputDirectory>deployments</outputDirectory>
							<warName>ROOT</warName>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>
</project>
