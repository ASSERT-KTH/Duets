<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>de.zalando.ep</groupId>
    <artifactId>zalenium</artifactId>
    <version>3.14.0g-SNAPSHOT</version>
    <name>Zalenium</name>
    <description>An on-demand, dynamic local Selenium Grid with an extension to a cloud testing platform.</description>

    <organization>
        <name>Zalando SE</name>
    </organization>

    <inceptionYear>2016</inceptionYear>

    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <scm>
        <url>https://github.com/zalando/zalenium</url>
        <connection>scm:git:https://github.com/zalando/zalenium</connection>
        <developerConnection>scm:git:git@github.com:zalando/zalenium.git</developerConnection>
    </scm>

    <developers>
        <developer>
            <name>Diego Molina</name>
            <email>diemol@gmail.com</email>
            <url>https://github.com/diemol</url>
            <organization>Zalando SE</organization>
            <organizationUrl>https://tech.zalando.com/</organizationUrl>
        </developer>
        <developer>
            <name>Leo Gallucci</name>
            <email>elgalu3@gmail.com</email>
            <url>https://github.com/elgalu</url>
            <organization>Zalando SE</organization>
            <organizationUrl>https://tech.zalando.com/</organizationUrl>
        </developer>
        <developer>
            <name>Joel Pearson</name>
            <email>japearson@agiledigital.com.au</email>
            <url>https://github.com/pearj</url>
            <organization>Agile Digital</organization>
            <organizationUrl>https://agiledigital.com.au/</organizationUrl>
        </developer>
    </developers>

    <properties>
        <selenium-server.major-minor.version>3.14</selenium-server.major-minor.version>
        <selenium-server.patch-level.version>0</selenium-server.patch-level.version>
        <!-- This needs to match what is in the Selenium Server pom file -->
        <jetty.version>9.4.8.v20180619</jetty.version>
        <docker-client.version>8.11.7</docker-client.version>
        <kubernetes-client.version>4.0.0</kubernetes-client.version>
        <junit.version>4.12</junit.version>
        <mockito.version>2.19.0</mockito.version>
        <awaitility.version>3.1.1</awaitility.version>
        <testng.version>6.14.3</testng.version>
        <slf4j.version>1.7.25</slf4j.version>
        <logstash-logback-encoder.version>5.1</logstash-logback-encoder.version>
        <maven.compiler.source>1.8</maven.compiler.source>
        <ch.qos.logback.version>1.2.3</ch.qos.logback.version>
        <maven.compiler.target>1.8</maven.compiler.target>
        <maven.compiler.plugin>3.7.0</maven.compiler.plugin>
        <maven-resources-plugin.version>3.0.2</maven-resources-plugin.version>
        <maven-shade-plugin.version>3.1.0</maven-shade-plugin.version>
        <maven-surefire-plugin.version>2.22.0</maven-surefire-plugin.version>
        <maven-failsafe-plugin.version>2.22.0</maven-failsafe-plugin.version>
        <versions-maven-plugin.version>2.5</versions-maven-plugin.version>
        <exec-maven-plugin.version>1.6.0</exec-maven-plugin.version>
        <jacoco-maven-plugin.version>0.7.9</jacoco-maven-plugin.version>
        <prometheus.version>0.4.0</prometheus.version>
        <aspectj.version>1.8.13</aspectj.version>
        <aspectj-maven-plugin.version>1.11</aspectj-maven-plugin.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <threadCountProperty>1</threadCountProperty>
        <skipTests>false</skipTests>
        <skip.surefire.tests>${skipTests}</skip.surefire.tests>
        <skip.failsafe.setup>false</skip.failsafe.setup>
        <integrationToTest>sauceLabs</integrationToTest>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>${aspectj.version}</version>
        </dependency>
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-server</artifactId>
            <version>${selenium-server.major-minor.version}.${selenium-server.patch-level.version}</version>
        </dependency>
        <dependency>
            <groupId>com.spotify</groupId>
            <artifactId>docker-client</artifactId>
            <version>${docker-client.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-api</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.google.guava</groupId>
                    <artifactId>guava</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>openshift-client</artifactId>
            <version>${kubernetes-client.version}</version>
            <exclusions>
               <exclusion>
                  <groupId>org.slf4j</groupId>
                  <artifactId>jul-to-slf4j</artifactId>
               </exclusion>
               <exclusion>
                  <groupId>org.slf4j</groupId>
                  <artifactId>slf4j-api</artifactId>
               </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <version>${ch.qos.logback.version}</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${ch.qos.logback.version}</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-access</artifactId>
            <version>${ch.qos.logback.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jul-to-slf4j</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>net.logstash.logback</groupId>
            <artifactId>logstash-logback-encoder</artifactId>
            <version>${logstash-logback-encoder.version}</version>
        </dependency>
        <!-- The prometheus client -->
        <dependency>
          <groupId>io.prometheus</groupId>
          <artifactId>simpleclient</artifactId>
          <version>${prometheus.version}</version>
        </dependency>
        <!-- Prometheus Hotspot JVM metrics -->
        <dependency>
          <groupId>io.prometheus</groupId>
          <artifactId>simpleclient_hotspot</artifactId>
          <version>${prometheus.version}</version>
        </dependency>
        <!-- Prometheus Exporter Servlet -->
        <dependency>
          <groupId>io.prometheus</groupId>
          <artifactId>simpleclient_servlet</artifactId>
          <version>${prometheus.version}</version>
        </dependency>
        <!-- Prometheus Jetty -->
        <dependency>
          <groupId>io.prometheus</groupId>
          <artifactId>simpleclient_jetty</artifactId>
          <version>${prometheus.version}</version>
          <exclusions>
            <exclusion>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>*</artifactId>
            </exclusion>
          </exclusions>
        </dependency>
        <!-- 
        This allows us to add prometheus jetty collectors that expect to find jetty classes in their usual place.
        Selenium has repackaged Jetty, so this makes it available at compile time, before we relocate the classes again.
         -->
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-server</artifactId>
            <scope>provided</scope>
            <version>${jetty.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>*</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>openshift-server-mock</artifactId>
            <version>${kubernetes-client.version}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>com.sun</groupId>
                    <artifactId>tools</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>de.vandermeer</groupId>
            <artifactId>asciitable</artifactId>
            <version>0.3.2</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.8.5</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>${testng.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.awaitility</groupId>
            <artifactId>awaitility</artifactId>
            <version>${awaitility.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${maven-resources-plugin.version}</version>
                <executions>
                    <execution>
                        <id>start-stop-script</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>scripts</directory>
                                    <filtering>true</filtering>
                                </resource>
                                <resource>
                                    <directory>docker</directory>
                                    <filtering>true</filtering>
                                </resource>
                                <resource>
                                    <directory>.</directory>
                                    <includes>
                                        <include>LICENSE.md</include>
                                        <include>Analytics.md</include>
                                        <include>scm-source.json</include>
                                    </includes>
                                </resource>
                                <resource>
                                    <directory>src/test/resources</directory>
                                    <includes>
                                        <include>browserstack_capabilities.json</include>
                                        <include>testingbot_capabilities.json</include>
                                    </includes>
                                </resource>
                                <resource>
                                    <directory>src/main/resources</directory>
                                    <includes>
                                        <include>logging_info.properties</include>
                                        <include>logging_debug.properties</include>
                                        <include>logback.xml</include>
                                    </includes>
                                </resource>
                                <resource>
                                    <directory>dashboard</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>${versions-maven-plugin.version}</version>
                <configuration>
                    <generateBackupPoms>false</generateBackupPoms>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-scm-plugin</artifactId>
                <version>1.9.5</version>
                <configuration>
                    <pushChanges>false</pushChanges>
                    <tag>${project.version}</tag>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.plugin}</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <showDeprecation>true</showDeprecation>
                    <showWarnings>true</showWarnings>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <archive>
                        <manifestSections>
                            <manifestSection>
                                <Name>Build-Info</Name>
                                <manifestEntries>
                                    <Selenium-Version>${selenium-server.major-minor.version}.${selenium-server.patch-level.version}</Selenium-Version>
                                </manifestEntries>
                            </manifestSection>
                        </manifestSections>
                    </archive>
                </configuration>

            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>aspectj-maven-plugin</artifactId>
                <version>${aspectj-maven-plugin.version}</version>
                <configuration>
                    <showWeaveInfo>true</showWeaveInfo>
                    <weaveDependencies>
                        <weaveDependency>
                            <groupId>org.seleniumhq.selenium</groupId>
                            <artifactId>selenium-server</artifactId>
                        </weaveDependency>
                    </weaveDependencies>
                    <complianceLevel>1.8</complianceLevel>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- Plugin to build the fat jar -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>${maven-shade-plugin.version}</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <filters>
                                <filter>
                                    <artifact>*.*</artifact>
                                    <excludes>
                                        <exclude>META-INF/*.SF</exclude>
                                        <exclude>META-INF/*.DSA</exclude>
                                        <exclude>META-INF/*.RSA</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                            <artifactSet>

                            </artifactSet>
                            <relocations>
                                <relocation>
                                    <pattern>org.eclipse.jetty</pattern>
                                    <shadedPattern>org.seleniumhq.jetty9</shadedPattern>
                                </relocation>
                            </relocations>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <systemPropertyVariables>
                        <java.util.logging.SimpleFormatter.format>%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS %4$-6s %5$s %6$s%n</java.util.logging.SimpleFormatter.format>
                    </systemPropertyVariables>
                    <!-- skips surefire tests without skipping failsafe tests. -->
                    <skipTests>${skip.surefire.tests}</skipTests>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.maven.surefire</groupId>
                        <artifactId>surefire-junit47</artifactId>
                        <version>${maven-surefire-plugin.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>coverage-report</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.jacoco</groupId>
                        <artifactId>jacoco-maven-plugin</artifactId>
                        <version>${jacoco-maven-plugin.version}</version>
                        <configuration>
                            <destFile>${basedir}/target/coverage-reports/coverage-unit.exec</destFile>
                            <dataFile>${basedir}/target/coverage-reports/coverage-unit.exec</dataFile>
                        </configuration>
                        <executions>
                            <execution>
                                <id>coverage-initialize</id>
                                <goals>
                                    <goal>prepare-agent</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>coverage-site</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>report</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>build-docker-image</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>${exec-maven-plugin.version}</version>
                        <executions>
                            <!-- docker build -->
                            <execution>
                                <id>docker-build-zalenium-image</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <skip>${skip.failsafe.setup}</skip>
                                    <workingDirectory>${project.build.directory}</workingDirectory>
                                    <executable>docker</executable>
                                    <arguments>
                                        <argument>build</argument>
                                        <argument>-t</argument>
                                        <argument>${project.artifactId}:${project.version}</argument>
                                        <argument>.</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>integration-test</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${maven-failsafe-plugin.version}</version>
                        <configuration>
                            <parallel>methods</parallel>
                            <threadCount>${threadCountProperty}</threadCount>
                            <skipAfterFailureCount>10</skipAfterFailureCount>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>${exec-maven-plugin.version}</version>
                        <executions>
                            <!-- docker build -->
                            <execution>
                                <id>docker-build-zalenium</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <skip>${skip.failsafe.setup}</skip>
                                    <workingDirectory>${project.build.directory}</workingDirectory>
                                    <executable>docker</executable>
                                    <arguments>
                                        <argument>build</argument>
                                        <argument>-t</argument>
                                        <argument>${project.artifactId}:${project.version}</argument>
                                        <argument>.</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <!-- Make zalenium_in_docker.sh executable -->
                            <execution>
                                <id>enable-zalenium_in_docker</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <workingDirectory>${project.build.directory}</workingDirectory>
                                    <executable>chmod</executable>
                                    <arguments>
                                        <argument>+x</argument>
                                        <argument>zalenium_in_docker.sh</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <!-- docker run -->
                            <execution>
                                <id>docker-run-zalenium</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <skip>${skip.failsafe.setup}</skip>
                                    <executable>${project.build.directory}/zalenium_in_docker.sh</executable>
                                    <arguments>
                                        <argument>start</argument>
                                        <argument>${project.artifactId}:${project.version}</argument>
                                        <argument>${integrationToTest}</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <!-- docker stop -->
                            <execution>
                                <id>docker-stop-zalenium</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <skip>${skip.failsafe.setup}</skip>
                                    <executable>${project.build.directory}/zalenium_in_docker.sh</executable>
                                    <arguments>
                                        <argument>stop</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
