<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.openolat</groupId>
	<artifactId>openolat-lms</artifactId>
	<version>7.1.2.0-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>OpenOLAT LMS</name>
	<url>http://www.openolat.org</url>
	<description>
  Welcome to the OpenOLAT (Open Online Learning And Training) Developer Project Site.  This site
  contains materials chiefly of concern to developers (e.g., unit testing and SCA output etc.)
  and is rebuilt periodically on a regular basis.  The site structure is divided between
  project information (e.g., infrastructure, mailing lists, repositories etc.) and reports
  (e.g., unit testing, SCAs etc.)
  </description>
	<organization>
		<name>OpenOLAT</name>
		<url>http://www.openolat.org</url>
	</organization>
	<licenses>
		<license>
			<name>Apache 2.0 Open Source License</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0</url>
			<distribution>manual</distribution>
			<comments>
		OpenOLAT is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
		</comments>
		</license>
	</licenses>
	<distributionManagement>
		<repository>
			<id>releases</id>
			<name>OpenOLAT Internal Nexus Release Repository</name>
			<url>http://nexus.openolat.org/nexus/content/repositories/releases</url>
		</repository>
		<snapshotRepository>
			<id>snapshots</id>
			<name>OpenOLAT Internal Nexus Snapshot Repository</name>
			<url>http://nexus.openolat.org/nexus/content/repositories/snapshots</url>
		</snapshotRepository>
	</distributionManagement>
	<issueManagement>
		<system>JIRA</system>
		<url>http://jira.openolat.org</url>
	</issueManagement>
	<scm>
		<connection>scm:hg:http://hg.openolat.org</connection>
		<developerConnection>scm:hg:http://hg.openolat.org</developerConnection>
		<url>http://hg.openolat.org</url>
	</scm>
	<mailingLists>
		<mailingList>
			<name>openolat</name>
			<subscribe>https://groups.google.com/forum/#!forum/openolat</subscribe>
			<post>openolat@googlegroups.com</post>
			<archive>https://groups.google.com/forum/#!forum/openolat</archive>
		</mailingList>
	</mailingLists>
	<!-- Unless otherwise explicitly stated the character encoding for all resources 
		(e.g., source, test etc.) will be UTF-8. This can be overriden at the plugin 
		level if necessary. -->
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<targetJdk>1.6</targetJdk>
		<org.springframework.version>3.0.5.RELEASE</org.springframework.version>

    <!-- properties for testing and Q&A -->
    <!-- by default no tests are executed so far (April 2011). Use appropriate profiles and properties on the command line -->
    <skipTests>true</skipTests>
    <skipITs>true</skipITs>
    <!-- properties to define the testing environment -->
    <test.env>mysql</test.env>
    <!-- olat.local.properties to distinguish multiple single and cluster olat instances on a single machine-->
    <test.env.db.name>olattest</test.env.db.name>
    <test.env.db.user>olat</test.env.db.user>
    <test.env.db.pass>olat</test.env.db.pass>
    <test.env.db.host.port>3306</test.env.db.host.port>
    <test.env.db.postgresql.user>postgres</test.env.db.postgresql.user>
    <test.env.db.postgresql.pass>postgres</test.env.db.postgresql.pass>
    <test.env.db.postgresql.host.port>5432</test.env.db.postgresql.host.port>
    <test.env.db.hibernate.ddl.auto>create</test.env.db.hibernate.ddl.auto>
    <test.env.instance.id>myolat</test.env.instance.id>
    <test.env.jms.broker.port>61616</test.env.jms.broker.port>
    <test.env.jmx.rmi.port.0>3000</test.env.jmx.rmi.port.0>
    <test.env.jmx.rmi.port.1>3001</test.env.jmx.rmi.port.1>
    <test.env.jmx.rmi.port.2>3002</test.env.jmx.rmi.port.2>

    <!-- this version is defined by the dependency <groupId>org.olat.testutils</groupId>   <artifactId>zipped-tomcat6x</artifactId> and the herein zipped tomcat installation -->
    <container.tomcat.version>6.0.32</container.tomcat.version>
    <!-- install dir is important for the -Pinstall-tomcats profile.
         These few lines define the default tomcat installation variables for installation and running a local tomcat cluster.
         If you want to reuse an existing tomcat installation, set the container.tomcat.*.home instead. -->
    <container.tomcat.one.install.dir>${basedir}/cargo/tomcat/one/</container.tomcat.one.install.dir>
    <container.tomcat.one.home>${container.tomcat.one.install.dir}/apache-tomcat-${container.tomcat.version}</container.tomcat.one.home>
    <!-- The port.part is used in several places to create cluster which follows the template:
         servlet port 8181
         administration ports 8109, 8105
         go to the src/test/profile/cluster/tomcat*/conf and lib/ to see the actual replacements.-->
    <container.tomcat.one.port.part>81</container.tomcat.one.port.part>
    <container.tomcat.one.port>${container.tomcat.one.port.part}${container.tomcat.one.port.part}</container.tomcat.one.port>
    <container.tomcat.two.install.dir>${basedir}/cargo/tomcat/two/</container.tomcat.two.install.dir>
    <container.tomcat.two.home>${container.tomcat.two.install.dir}/apache-tomcat-${container.tomcat.version}</container.tomcat.two.home>
    <container.tomcat.two.port.part>82</container.tomcat.two.port.part>
    <container.tomcat.two.port>${container.tomcat.two.port.part}${container.tomcat.two.port.part}</container.tomcat.two.port>

    <!-- the selenium client version which is also by the maven-selenium-plugin, 
        using the latest selenium a.k.a selenium 2.0 needs a migration of the tests and maven setup. -->
    <selenium-client.version>1.0.2</selenium-client.version>
    <!-- the selenium configuration needed to configure the tomcats, selenium context and maven failsafe (testng) runner.
         The tomcat knows which user to add just for selenium testcases, see additionalUserContext.xml
         The selenium context is defined in the defaultcontext.xml and has variable replacements as specified above.
         The failsafe plugin uses the testng.xml file which comes from this folder.
         In order to customize the selenium tests execution follow the steps:
         1) copy the test/profile/selenium/config folder to a save place
         2) edit the contents of the files (i.e. change executed seleniumtests, add firefox browser executable path to defaultcontext.xml etc.)
         3) run maven among other parameters with -Dselenium.config.files.path="<your-path-without-special-chars>" -->
    <selenium.config.files.path>src/test/profile/selenium/config</selenium.config.files.path>
    <!-- proposal for setting the firefox executable path, which could be used as variable in the defaultcontext.xml
         important if using a firefox script which does not allow to kill the firefoxes after usage. (e.g. Suse 64Bit)-->
    <selenium.config.firefox.path>unused/by/default</selenium.config.firefox.path>

    <!-- properties for debugging -->
    <!-- for debugging reason it may be helpful to set this with 
    -Dcargo.container.wait=true to see if the container is up and running for the seleniumtests. -->
    <cargo.container.wait>false</cargo.container.wait>
    <cargo.container.timeout>300000</cargo.container.timeout>
	</properties>
	<profiles>
		<profile>
		<!-- this serves as an example of how to run something whenever the os familiy matches unix (includes linux as well) -->
			<id>linux</id>
			<activation><os><family>unix</family></os></activation>
			<properties>
				<os.property.file>linux.properties</os.property.file>
			</properties>
			
		</profile>
		<profile>
		<!-- this serves as an example of how to run something whenever the os familiy matches unix (includes linux as well) -->
			<id>windows</id>
			<activation><os><family>windows</family></os></activation>
			<properties>
				<os.property.file>win.properties</os.property.file>
			</properties>
		</profile>

		<profile>
			<id>documentation</id>
			<build>
				<plugins>
					<plugin>
						<groupId>com.sun.tools.jxc.maven2</groupId>
						<artifactId>maven-jaxb-schemagen-plugin</artifactId>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
					</plugin>
					<plugin>
						<groupId>com.sun.jersey.contribs</groupId>
						<artifactId>maven-wadl-plugin</artifactId>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>xml-maven-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>

    <profile>
      <id>mysqlunittests</id>
      <activation>
        <property>
          <name>with-mysql</name>
        </property>
      </activation>
      <properties>
        <skipTests>false</skipTests>
        <skipITs>true</skipITs>
        <testFailureIgnore>false</testFailureIgnore>
        <test.env.db.hibernate.ddl.auto> </test.env.db.hibernate.ddl.auto>
        <test.env>mysql</test.env>
      </properties>
      <build>
        <plugins>
          <plugin>
            <!-- Documentation: http://maven.apache.org/plugins/maven-surefire-plugin/ -->
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>2.8.1</version>
            <configuration>
              <argLine>-XX:MaxPermSize=128m -Xmx512m -Xms256m -Djava.awt.headless=true</argLine>
            	<systemPropertyVariables>
								<java.io.tmpdir>${project.build.directory}/olatdata</java.io.tmpdir>
							</systemPropertyVariables>
              <testNGArtifactName>none:none</testNGArtifactName>
              <includes>
                <include>**/AllTestsOlatCoreJunit4.java</include>
                <include>**/AllTestsJunit4.java</include>
              </includes>
            </configuration>
          </plugin>
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <version>2.4.3</version>
            <executions>
              <execution>
                <id>copy-resources-4-mysqlunittests</id>
                <!-- hook in to copy maven.build.properties to allow test and integration-test phase run properly -->
                <phase>generate-test-resources</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${basedir}/target/test-classes</outputDirectory>
                  <resources>
                    <resource>
                      <!-- place resources you like to get filtered an copied -->
                      <directory>src/test/profile/${test.env}</directory>
                      <includes>
                        <include>olat.local.properties</include>
                      </includes>
                      <filtering>true</filtering>
                    </resource>
                    <resource>
                      <!-- place resources you like to get filtered an copied -->
                      <directory>src/main/resources/database/mysql</directory>
                      <includes>
                        <include>setupDatabase.sql</include>
                      </includes>
                      <filtering>true</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>clean-mysql-dbsetup</id>
      <activation>
        <property>
          <name>with-mysql</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <version>2.4.3</version>
            <executions>
              <execution>
                <id>copy-resources-4-clean-mysql-dbsetup</id>
                <phase>generate-test-resources</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${basedir}/target/test-classes</outputDirectory>
                  <resources>
                    <resource>
                      <!-- place resources you like to get filtered an copied -->
                      <directory>src/main/resources/database/mysql</directory>
                      <includes>
                        <include>setupDatabase.sql</include>
                      </includes>
                      <filtering>true</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>sql-maven-plugin</artifactId>
            <version>1.4</version>

            <dependencies>
              <dependency>
                <!-- DO NOT UPDATE! -->
                <!-- Due to our special setup where we use the jdbc driver to convert 
				          from utf-8 to iso we cannot update this lib at the moment. -->
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>5.1.11</version>
              </dependency>
            </dependencies>

            <!-- common configuration shared by all executions -->
            <configuration>
              <driver>com.mysql.jdbc.Driver</driver>
              <url>jdbc:mysql://localhost:${test.env.db.host.port}/${test.env.db.name}</url>
              <username>${test.env.db.user}</username>
              <password>${test.env.db.pass}</password>
              <!-- You can comment out username/password configurations and
                   have maven to look them up in your settings.xml using ${settingsKey}
              
              <settingsKey>sensibleKey</settingsKey>-->
              <!--all executions are ignored if -Dmaven.test.skip=true-->
              <skip>${maven.test.skip}</skip>
            </configuration>

            <executions>
              <execution>
                <id>drop-db-before-test</id>
                <phase>process-test-resources</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <!-- need another database to drop the targeted one -->
                  <url>jdbc:mysql://localhost:${test.env.db.host.port}/olat</url>
                  <autocommit>true</autocommit>
                  <sqlCommand>drop database ${test.env.db.name}</sqlCommand>
                  <!-- ignore error when database is not avaiable -->
                  <onError>continue</onError>
                </configuration>
              </execution>

              <execution>
                <id>create-db</id>
                <phase>process-test-resources</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <url>jdbc:mysql://localhost:${test.env.db.host.port}/olat</url>
                  <!-- no transaction -->
                  <autocommit>true</autocommit>
                  <sqlCommand>create database ${test.env.db.name} default character set utf8</sqlCommand>
                </configuration>
              </execution>

              <execution>
                <id>create-schema</id>
                <phase>process-test-resources</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <autocommit>true</autocommit>
                  <srcFiles>
                    <srcFile>target/test-classes/setupDatabase.sql</srcFile>
                  </srcFiles>
                </configuration>
              </execution>
<!--
              <execution>
                <id>create-data</id>
                <phase>process-test-resources</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <orderFile>ascending</orderFile>
                  <fileset>
                    <basedir>${basedir}</basedir>
                    <includes>
                      <include>src/test/sql/test-data2.sql</include>
                      <include>src/test/sql/test-data1.sql</include>
                    </includes>
                  </fileset>
                </configuration>
              </execution>
-->
              <!-- drop db after test -->
              <execution>
                <id>drop-db-after-test</id>
                <!-- there is no post-test phase, the next phase after "test" is "prepare-package"
                     for integration tests running against mysql generated via setupDatabase.sql there is need
                     to bind a similar drop/create/schema/drop to pre-integration-test and post-integration-test -->
                <phase>prepare-package</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <autocommit>true</autocommit>
                  <sqlCommand>drop database ${test.env.db.name}</sqlCommand>
                </configuration>
              </execution>
            </executions>
          </plugin>



        </plugins>
      </build>
    </profile>
    
    <profile>
      <id>postgresqlunittests</id>
      <activation>
        <property>
          <name>with-postgresql</name>
        </property>
      </activation>
      <properties>
        <skipTests>false</skipTests>
        <skipITs>true</skipITs>
        <testFailureIgnore>false</testFailureIgnore>
        <test.env.db.hibernate.ddl.auto> </test.env.db.hibernate.ddl.auto>
        <test.env>postgresql</test.env>
      </properties>
      <build>
        <plugins>
          <plugin>
            <!-- Documentation: http://maven.apache.org/plugins/maven-surefire-plugin/ -->
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>2.8.1</version>
            <configuration>
              <argLine>-XX:MaxPermSize=128m -Xmx512m -Xms256m -Djava.awt.headless=true</argLine>
            	<systemPropertyVariables>
								<java.io.tmpdir>${project.build.directory}/olatdata</java.io.tmpdir>
							</systemPropertyVariables>
              <testNGArtifactName>none:none</testNGArtifactName>
              <includes>
                <include>**/AllTestsOlatCoreJunit4.java</include>
                <include>**/AllTestsJunit4.java</include>
              </includes>
            </configuration>
          </plugin>
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <version>2.4.3</version>
            <executions>
              <execution>
                <id>copy-resources-4-postgresqlunittests</id>
                <!-- hook in to copy maven.build.properties to allow test and integration-test phase run properly -->
                <phase>generate-test-resources</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${basedir}/target/test-classes</outputDirectory>
                  <resources>
                    <resource>
                      <!-- place resources you like to get filtered an copied -->
                      <directory>src/test/profile/${test.env}</directory>
                      <includes>
                        <include>olat.local.properties</include>
                      </includes>
                      <filtering>true</filtering>
                    </resource>
                    <resource>
                      <!-- place resources you like to get filtered an copied -->
                      <directory>src/main/resources/database/postgresql</directory>
                      <includes>
                        <include>setupDatabase.sql</include>
                      </includes>
                      <filtering>true</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>clean-postgresql-dbsetup</id>
      <activation>
        <property>
          <name>with-postgresql</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <version>2.4.3</version>
            <executions>
              <execution>
                <id>copy-resources-4-clean-postgresql-dbsetup</id>
                <phase>generate-test-resources</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${basedir}/target/test-classes</outputDirectory>
                  <resources>
                    <resource>
                      <!-- place resources you like to get filtered an copied -->
                      <directory>src/main/resources/database/postgresql</directory>
                      <includes>
                        <include>setupDatabase.sql</include>
                      </includes>
                      <filtering>true</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>sql-maven-plugin</artifactId>
            <version>1.5</version>

            <dependencies>
              <dependency>
			          <groupId>postgresql</groupId>
			          <artifactId>postgresql</artifactId>
			          <version>8.4-701.jdbc4</version>
		          </dependency>
            </dependencies>

            <!-- common configuration shared by all executions -->
            <configuration>
              <driver>org.postgresql.Driver</driver>
              <url>jdbc:postgresql://localhost:${test.env.db.postgresql.host.port}/${test.env.db.name}</url>
              <username>${test.env.db.postgresql.user}</username>
              <password>${test.env.db.postgresql.pass}</password>
              <!-- You can comment out username/password configurations and
                   have maven to look them up in your settings.xml using ${settingsKey}
              
              <settingsKey>sensibleKey</settingsKey>-->
              <!--all executions are ignored if -Dmaven.test.skip=true-->
              <skip>${maven.test.skip}</skip>
            </configuration>

            <executions>
              <execution>
                <id>drop-db-before-test</id>
                <phase>process-test-resources</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <!-- need another database to drop the targeted one -->
                  <url>jdbc:postgresql://localhost:${test.env.db.postgresql.host.port}/postgres</url>
                  <autocommit>true</autocommit>
                  <sqlCommand>drop database ${test.env.db.name}</sqlCommand>
                  <!-- ignore error when database is not avaiable -->
                  <onError>continue</onError>
                </configuration>
              </execution>

              <execution>
                <id>create-db</id>
                <phase>process-test-resources</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <url>jdbc:postgresql://localhost:${test.env.db.postgresql.host.port}/postgres</url>
                  <!-- no transaction -->
                  <autocommit>true</autocommit>
                  <sqlCommand>create database ${test.env.db.name}</sqlCommand>
                </configuration>
              </execution>

              <execution>
                <id>create-schema</id>
                <phase>process-test-resources</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <autocommit>true</autocommit>
                  <srcFiles>
                    <srcFile>target/test-classes/setupDatabase.sql</srcFile>
                  </srcFiles>
                </configuration>
              </execution>

              <!-- drop db after test -->
              <execution>
                <id>drop-db-after-test</id>
                <!-- there is no post-test phase, the next phase after "test" is "prepare-package"
                     for integration tests running against mysql generated via setupDatabase.sql there is need
                     to bind a similar drop/create/schema/drop to pre-integration-test and post-integration-test -->
                <phase>prepare-package</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <url>jdbc:postgresql://localhost:${test.env.db.postgresql.host.port}/postgres</url>
                  <autocommit>true</autocommit>
                  <sqlCommand>drop database ${test.env.db.name}</sqlCommand>
                </configuration>
              </execution>
            </executions>
          </plugin>

        </plugins>
      </build>
    </profile>
    
    <profile>
      <!-- activate this profile to unzip two tomcats instances for cluster setup, which are the configured and used with profile seleniumtests
      bind to phase initialize and execute goal unpack
      ... initialize is an early phase, so that unpacking does not overwrite resources copied over to the tomcats. -->
      <id>install-tomcats</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <version>2.2</version>
            <executions>
              <execution>
                <id>install-tomcat-one</id>
                <phase>validate</phase>
                <goals>
                  <goal>unpack
                  </goal>
                </goals>
                <configuration>
                  <artifactItems>
                    <artifactItem>
                      <groupId>org.openolat.testutils</groupId>
                      <artifactId>zipped-tomcat6x</artifactId>
                      <version>1.0</version>
                      <type>zip</type>
                      <overWrite>true</overWrite>
                      <outputDirectory>${container.tomcat.one.install.dir}</outputDirectory>
                    </artifactItem>
                  </artifactItems>
                  <!-- other configurations here -->
                </configuration>
              </execution>
              <execution>
                <id>install-tomcat-two</id>
                <!-- bind to initialize, that tomcats are unpacked before resources are copied over -->
                <phase>validate</phase>
                <goals>
                  <goal>unpack</goal>
                </goals>
                <configuration>
                  <artifactItems>
                    <artifactItem>
                      <groupId>org.openolat.testutils</groupId>
                      <artifactId>zipped-tomcat6x</artifactId>
                      <version>1.0</version>
                      <type>zip</type>
                      <overWrite>true</overWrite>
                      <outputDirectory>${container.tomcat.two.install.dir}</outputDirectory>
                    </artifactItem>
                  </artifactItems>
                  <!-- other configurations here -->
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>debug</id>
      <properties>
        <skipTests>true</skipTests>
        <skipITs>true</skipITs>
        <cargo.container.wait>true</cargo.container.wait>
      </properties>
    </profile>
    
    <profile>
      <id>cluster</id>
      <activation>
        <property>
          <name>cluster</name>
        </property>
      </activation>
      <dependencies>
	      <dependency>
					<groupId>org.jboss</groupId>
					<artifactId>jboss-common-core</artifactId>
					<version>2.2.8.GA</version>
				</dependency>
				<dependency>
					<groupId>org.jboss.logging</groupId>
					<artifactId>jboss-logging-spi</artifactId>
					<version>2.0.5.GA</version>
				</dependency>
				<dependency>
					<groupId>org.jboss.cache</groupId>
					<artifactId>jbosscache-core</artifactId>
					<version>3.2.2.GA</version>
				</dependency>
				<dependency>
					<groupId>org.hibernate</groupId>
					<artifactId>hibernate-jbosscache2</artifactId>
					<version>3.3.2.GA</version>
					<scope>runtime</scope>
				</dependency>
      </dependencies>
    </profile>

    <profile>
      <!-- activate this profile to run Selenium based Integration Tests against a cluster running locally
      configures:
      - surefire-plugin to include none of the IntegrationTests
      - failsafe-plugin to include Seleniumtests via testng.xml
      
      in general hooks into: (please check the profile execution against the docu)
      - initialize
      ... cleans the tomcats working directories.
      - generate-resources
      ... resources-plugin to copy the maven.build.properties and selenium specific additionalUserContext.xml and specific olat.local.properties for tomcat-one and tomcat-two.
      ... copies jms configuration
      - generate-test-resources
      ... antrun-plugin to transform the olat page sets into selenium JS, creates the olat-user-extension.js file for selenium server start.
      ... resources-plugin to copy the maven.build.properties to the test-classes tree, would be needed for failsafe *ITCase tests.
      - pre-integration-test
      ... selenium-maven-plugin to start the selenium server (runs in the background and logs output to target/selenium/server.log) using the generated olat-user-extension.js
      ... starts an active mq jms for cluster instances.
      ... cargo-maven2-plugin deploying the asset openolat-lms into two tomcats which must be installed beforehand with (-Pinstall-tomcats)
      - post-integration-test
      ... cargo-maven2-plugin stops the started tomcat(s)
      ... stops active mq
      ... stops selenium
      -->
      <id>seleniumtests</id>
      <properties>
        <!-- seleniumtests are started with the command mvn verify -Pseleniumtests -->
        <skipTests>false</skipTests>
        <skipITs>false</skipITs>
      </properties>
      <build>

        <plugins>

          <plugin>
            <!-- Documentation: http://maven.apache.org/plugins/maven-surefire-plugin/ -->
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>2.7.2</version>
            <configuration>
              <includes>
                <include>none</include>
              </includes>
            </configuration>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <version>1.6</version>
            <executions>
              <execution>
                <phase>generate-test-resources</phase>
                <configuration>
                  <target unless="maven.test.skip">
                    <echo message="Generate ../target/olat-user-extensions.js for Seleniumserverstart"/>
                    <xslt in="${basedir}/src/test/profile/selenium/ui-map/olat-ui-map.xml" out="${basedir}/target/generated_combined_olat-ui-map.xml" style="${basedir}/src/test/profile/selenium/ui-map/resources/resolve_includes.xsl"/>
                    <xslt in="${basedir}/target/generated_combined_olat-ui-map.xml" out="${basedir}/target/olat-ui-map.js" style="${basedir}/src/test/profile/selenium/ui-map/resources/gen_olat-ui-map.xsl">
										</xslt>
                    <concat destfile="${basedir}/target/olat-user-extensions.js">
                      <fileset file="${basedir}/target/olat-ui-map.js"/>
                      <fileset file="${basedir}/src/test/profile/selenium/ui-map/resources/rollups.js"/>
                    </concat>
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <version>2.4.3</version>
            <executions>
              <execution>
                <id>tomcat-one-server_xml</id>
                <phase>initialize</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${container.tomcat.one.home}/conf/</outputDirectory>
                  <resources>
                    <resource>
                      <directory>src/test/profile/cluster/tomcat-one/conf</directory>
                      <includes>
                        <include>server.xml</include>
                      </includes>
                      <filtering>true</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>
              <execution>
                <id>tomcat-two-server_xml</id>
                <phase>initialize</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${container.tomcat.two.home}/conf/</outputDirectory>
                  <resources>
                    <resource>
                      <directory>src/test/profile/cluster/tomcat-two/conf</directory>
                      <includes>
                        <include>server.xml</include>
                      </includes>
                      <filtering>true</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>
              <execution>
                <id>seleniumtests-config-tomcat-one</id>
                <phase>initialize</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${container.tomcat.one.home}/lib/</outputDirectory>
                  <overwrite>true</overwrite>
                  <resources>
                    <!-- olat.local.properties with different environments
                      typically meant for mysql / postgresql / etc.   -->
                    <resource>
                      <directory>src/test/profile/cluster/tomcat-one/lib</directory>
                      <includes>
                        <include>olat.local.properties</include>
                        <include>treecache.xml</include>
                      </includes>
                      <filtering>true</filtering>
                    </resource>
                    <!-- Users to be created on OLAT startup for selenium testcases are configured in this file  -->
                    <resource>
                      <directory>${selenium.config.files.path}</directory>
                      <includes>
                        <include>additionalUserContext.xml</include>
                      </includes>
                      <filtering>true</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>
              <execution>
                <id>seleniumtests-config-activemq</id>
                <phase>initialize</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>cargo/</outputDirectory>
                  <overwrite>true</overwrite>
                  <resources>
                    <resource>
                      <directory>src/test/profile/cluster/activemq</directory>
                      <includes>
                        <include>activemq.xml</include>
                      </includes>
                      <filtering>true</filtering>                    
                    </resource>
                  </resources>
                </configuration>
              </execution>
              <execution>
                <id>seleniumtests-config-tomcat-two</id>
                <phase>initialize</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${container.tomcat.two.home}/lib/</outputDirectory>
                  <overwrite>true</overwrite>
                  <resources>
                    <resource>
                      <directory>src/test/profile/cluster/tomcat-two/lib</directory>
                      <includes>
                        <include>olat.local.properties</include>
                        <include>treecache.xml</include>
                      </includes>
                      <filtering>true</filtering>                    
                    </resource>
                  </resources>
                </configuration>
              </execution>
              <execution>
                <id>seleniumtests-config-misc</id>
                <phase>process-test-resources</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${basedir}/target/test-classes</outputDirectory>
                  <resources>
                    <resource>
                      <directory>${selenium.config.files.path}</directory>
                      <includes>
                        <include>defaultcontext.xml</include>
                        <include>testng.xml</include>
                      </includes>
                      <filtering>true</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.apache.activemq.tooling</groupId>
            <artifactId>maven-activemq-plugin</artifactId>
            <version>5.3.0</version>
            <executions>
              <execution>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>run</goal>
                </goals>
                <configuration>
                  <configUri>xbean:file:${basedir}/cargo/activemq.xml</configUri>
                  <fork>true</fork>
                  <systemProperties>
			              <property>
			                <name>org.apache.activemq.default.directory.prefix</name>
			                <value>./target/</value>
			              </property>
        		      </systemProperties>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>selenium-maven-plugin</artifactId>
            <version>1.1</version>
            <executions>
              <execution>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start-server</goal>
                </goals>
                <configuration>
                  <!-- run selenium server in background and log output ${basedir}target/server.log. 
										Append to ${basedir}/target/selenium/user-extensions.js -->
                  <background>true</background>
                  <logOutput>true</logOutput>
                  <userExtensions>${basedir}/target/olat-user-extensions.js</userExtensions>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>2.7.2</version>
            <configuration>
              <suiteXmlFiles>
                <!--  Seleniumtests run with testng, the included tests are defined in the following suite xml.
                      The file is located in src/test/resources/testng.xml. Dependencies of tests are defined
                      over annotations. -->
                <suiteXmlFile>target/test-classes/testng.xml</suiteXmlFile>
              </suiteXmlFiles>
              <testFailureIgnore>true</testFailureIgnore>
            </configuration>
            <executions>
              <execution>
                <id>integration-test</id>
                <goals>
                  <goal>integration-test</goal>
                </goals>
              </execution>
              <execution>
                <id>verify</id>
                <goals>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <version>1.1.3</version>
            <configuration>
              <container>
                <containerId>tomcat6x</containerId>
                <timeout>${cargo.container.timeout}</timeout>
              </container>
            </configuration>
            <executions>
              <!-- start tomcat 1 -->
              <execution>
                <id>tomcat-one-start</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
                <configuration>
                  <wait>false</wait>
                  <container>
                    <containerId>tomcat6x</containerId>
                    <type>installed</type>
                    <home>${container.tomcat.one.home}</home>
                  </container>
                  <configuration>
                    <type>existing</type>
                    <home>${container.tomcat.one.home}</home>
                    <properties>
                      <cargo.servlet.port>${container.tomcat.one.port}</cargo.servlet.port>
                      <cargo.logging>high</cargo.logging>
                    </properties>
                    <deployables>
                      <deployable>
                        <groupId>org.openolat</groupId>
                        <artifactId>openolat-lms</artifactId>
                        <type>war</type>
                        <properties>
                          <context>olat</context>
                        </properties>
                        <pingURL>http://localhost:${container.tomcat.one.port}/cargocpc/</pingURL>
                        <pingTimeout>300000</pingTimeout>
                      </deployable>
                    </deployables>
                  </configuration>
                </configuration>
              </execution>
              <!-- start tomcat 2 -->
              <execution>
                <id>tomcat-two-start</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
                <configuration>
                  <wait>${cargo.container.wait}</wait>
                  <container>
                    <containerId>tomcat6x</containerId>
                    <type>installed</type>
                    <home>${container.tomcat.two.home}</home>
                  </container>
                  <configuration>
                    <type>existing</type>
                    <home>${container.tomcat.two.home}</home>
                    <properties>
                      <cargo.servlet.port>${container.tomcat.two.port}</cargo.servlet.port>
                      <cargo.logging>high</cargo.logging>
                    </properties>
                    <deployables>
                      <deployable>
                        <groupId>org.openolat</groupId>
                        <artifactId>openolat-lms</artifactId>
                        <type>war</type>
                        <properties>
                          <context>olat</context>
                        </properties>
                        <pingURL>http://localhost:${container.tomcat.two.port}/cargocpc/</pingURL>
                        <pingTimeout>300000</pingTimeout>
                      </deployable>
                    </deployables>
                  </configuration>
                </configuration>
              </execution>
 
              <!-- stop tomcat 1 -->
              <execution>
                <id>tomcat-one-stop</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
                <configuration>
                  <configuration>
                    <type>existing</type>
                    <home>${container.tomcat.one.home}</home>
                  </configuration>
                </configuration>
              </execution>

              <!-- stop tomcat 2 -->
              <execution>
                <id>tomcat-two-stop</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
                <configuration>
                  <configuration>
                    <type>existing</type>
                    <home>${container.tomcat.two.home}</home>
                  </configuration>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <artifactId>maven-clean-plugin</artifactId>
            <version>2.4.1</version>
            <executions>
              <execution>
                <id>clean-tomcat-directories</id>
                <phase>initialize</phase>
                <goals>
                  <goal>
		                clean
		              </goal>
                </goals>
                <configuration>
                  <excludeDefaultDirectories>true</excludeDefaultDirectories>
                  <filesets>
                    <fileset>
                      <directory>${container.tomcat.one.home}/webapps/</directory>
                      <includes>
                        <include>olat.war</include>
                        <include>**/olat/**</include>
                      </includes>
                    </fileset>
                    <fileset>
                      <directory>${container.tomcat.one.home}/work/</directory>
                      <includes>
                        <include>**/SESSIONS.ser</include>
                      </includes>
                    </fileset>
                    <fileset>
                      <directory>${container.tomcat.two.home}/webapps/</directory>
                      <includes>
                        <include>olat.war</include>
                        <include>**/olat/**</include>
                      </includes>
                    </fileset>
                    <fileset>
                      <directory>${container.tomcat.two.home}/work/</directory>
                      <includes>
                        <include>**/SESSIONS.ser</include>
                      </includes>
                    </fileset>
                  </filesets>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      
      <dependencies>
	      <dependency>
					<groupId>org.jboss</groupId>
					<artifactId>jboss-common-core</artifactId>
					<version>2.2.8.GA</version>
				</dependency>
				<dependency>
					<groupId>org.jboss.logging</groupId>
					<artifactId>jboss-logging-spi</artifactId>
					<version>2.0.5.GA</version>
				</dependency>
				<dependency>
					<groupId>org.jboss.cache</groupId>
					<artifactId>jbosscache-core</artifactId>
					<version>3.2.2.GA</version>
				</dependency>
				<dependency>
					<groupId>org.hibernate</groupId>
					<artifactId>hibernate-jbosscache2</artifactId>
					<version>3.3.2.GA</version>
					<scope>runtime</scope>
				</dependency>
      </dependencies>
    </profile>
		
	</profiles>
	<repositories>
		<repository>
      <id>central</id>
      <name>Maven Repository Switchboard</name>
      <layout>default</layout>
      <url>http://repo1.maven.org/maven2</url>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </repository>
		<repository>
			<id>maven2-repository.java.net</id>
			<name>Java.net Repository for Maven</name>
			<url>http://download.java.net/maven/2/</url>
			<layout>default</layout>
		</repository>
		<repository>
			<id>nexus.codehaus.org</id>
			<name>Codehaus nexus repo</name>
			<url>https://nexus.codehaus.org/content/groups/public</url>
		</repository>
		<repository>
			<id>jboss-public-repository-group</id>
			<name>JBoss Public Maven Repository Group</name>
			<url>https://repository.jboss.org/nexus/content/groups/public-jboss/</url>
			<layout>default</layout>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>never</updatePolicy>
			</releases>
			<snapshots>
				<enabled>true</enabled>
				<updatePolicy>never</updatePolicy>
			</snapshots>
		</repository>	
		<repository>
			<id>openolat-repo</id>
			<name>OpenOLAT Public Maven Repository Group</name>
			<url>http://nexus.openolat.org/nexus/content/groups/public/</url>
			<layout>default</layout>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>never</updatePolicy>
			</releases>
			<snapshots>
				<enabled>true</enabled>
				<updatePolicy>daily</updatePolicy>
			</snapshots>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>java-net-plugin-repo</id>
			<name>Java net Maven plugin repository</name>
			<url>http://download.java.net/maven/2</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
				<updatePolicy>daily</updatePolicy>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>
	<build>
		<!-- Useful maven commands: o mvn dependency:tree - check to see what other 
			dependencies get downloaded by an artifact o Maven lifecycle: Each phase 
			of the lifecycle can also be called independent - e.g. mvn process-resources 
			- http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference 
			o mvn versions:display-plugin-updates (find updates to maven plugins) o mvn 
			versions:use-latest-versions (automatically update dependencies. WARNING!!!) 
			o mvn versions:display-dependency-updates (shows updates for dependencies) 
			o mvn help:effective-pom - displays the computed pom, where you will see 
			what is getting executed after expanding vars and plugin settings -->

		<resources>
			<!-- as long as we have resources like html, css, js in the src/main/java 
				tree we need these two entries. the first tells maven to treat the java folder 
				as the resource folder but not to copy the java files. The later tell maven 
				that we have an other resource folder which is normally the default -->
			<resource>
				<directory>src/main/java</directory>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<!-- when enabled resources will be searched and variables replaces with 
					values -->
				<filtering>false</filtering>
			</resource>
			<!-- TODO: RH: include static to react on changes during devel, target not working!
			<resource>
				<directory>src/main/webapp/static</directory>
				<targetPath>${project.build.directory}/static</targetPath>
				<filtering>false</filtering>
			</resource>
			 -->
		</resources>
    <testResources>
      <!-- Same comment as for src/main/java also applies to src/test/java -->
      <testResource>
        <directory>src/test/java</directory>
        <excludes>
          <exclude>**/*.java</exclude>
        </excludes>
      </testResource>
      <testResource>
        <directory>src/test/resources</directory>
        <!-- when enabled resources will be searched and variables replaces with 
					values -->
        <filtering>true</filtering>
      </testResource>
    </testResources>
		<plugins>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.4.3</version>
				<executions>
					<execution>
						<id>copy-resources</id>
						<!-- hook in to generate and copy filtered resources when running eclipse:eclipse 
							as this plugin runs in the generete-resources phase -->
						<phase>generate-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/classes</outputDirectory>
							<resources>
								<resource>
									<!-- place resources you like to get filtered an copied -->
									<directory>src/main/templates</directory>
									<filtering>true</filtering>
								</resource>
								<resource>
									<directory>src/main/profile</directory>
									<includes>
										<include>${os.property.file}</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
							
						</configuration>
					</execution>
				</executions>
			</plugin>



		</plugins>
		<pluginManagement>
			<plugins>

				<!-- OLAT requires JDK 1.6 or later ! -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<configuration>
						<source>1.6</source>
						<target>1.6</target>
						<!-- These apparently harmless settings cause certain types of builds 
							to fail (typically with a failure to find the "javac" program ) - this appears 
							to be a Maven issue and is currently pending investigation <fork>true</fork> 
							<meminitial>512m</meminitial> <maxmem>1024m</maxmem> -->
						<encoding>UTF-8</encoding>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-war-plugin</artifactId>
					<version>2.1.1</version>
					<configuration>
						<attachClasses>true</attachClasses>
						<directory>src/main/java</directory>
					</configuration>
				</plugin>

				<!-- The Eclipse plugin is only of interest to developers and requires 
					that WTP be installed. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-eclipse-plugin</artifactId>
					<version>2.8</version>
					<configuration>
				        <linkedResources>
			                <linkedResource>
		                        <name>static</name>
		                        <type>2</type>
		                        <location>${basedir}/src/main/webapp/static</location>
			                </linkedResource>
			               	<linkedResource>
		                        <name>/src/main/java/olat.local.properties</name>
		                        <type>1</type>
		                        <location>${basedir}/olat.local.properties</location>
                			</linkedResource>
                			<linkedResource>
		                        <name>/src/test/java/olat.local.properties</name>
		                        <type>1</type>
		                        <location>${basedir}/src/test/profile/mysql/olat.eclipse.properties</location>
                			</linkedResource>
				        </linkedResources>				        
				        
                        
						<wtpversion>2.0</wtpversion>
						<!-- context name for servlet container e.g. localhost:8080/olat -->
						<wtpContextName>olat</wtpContextName>
						<downloadSources>false</downloadSources>
								<additionalConfig>
									<file>
										<name>.settings/org.eclipse.core.resources.prefs</name>
										<content>
											<![CDATA[eclipse.preferences.version=1
											encoding/<project>=UTF-8]]>
										</content>
									</file>
								</additionalConfig>
					</configuration>
				</plugin>

				<!-- reporting i.e., the site goal requires a more recent plugin version -->
				<plugin>
					<artifactId>maven-site-plugin</artifactId>
					<version>2.2</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-enforcer-plugin</artifactId>
					<executions>
						<execution>
							<id>show-versions</id>
							<phase>validate</phase>
							<goals>
								<goal>display-info</goal>
							</goals>
						</execution>
						<execution>
							<id>enforce-versions</id>
							<goals>
								<goal>enforce</goal>
							</goals>
							<configuration>
								<rules>
									<requireMavenVersion>
										<version>2.2+</version>
									</requireMavenVersion>
									<requireJavaVersion>
										<version>1.6+</version>
									</requireJavaVersion>
								</rules>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<!-- mvn org.mortbay.jetty:jetty-maven-plugin:run will start olat with jetty 
					NOTE: when you get an "to many files error you can increase it with: ulimit -n 4096"
					
					You have to provide an empty olat.local.properties files in your classpath to run jetty!
				-->
				<plugin>
					<groupId>org.mortbay.jetty</groupId>
					<artifactId>maven-jetty-plugin</artifactId>
					<version>6.1.10</version>
				</plugin>


				<!-- start rest api documentation: broken:  mvn javadoc:javadoc -->
				<plugin>
					<groupId>com.sun.tools.jxc.maven2</groupId>
					<artifactId>maven-jaxb-schemagen-plugin</artifactId>
					<version>1.2</version>
					<executions>
						<execution>
							<phase>generate-resources</phase>
							<goals>
								<goal>generate</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<srcdir>${basedir}/src/</srcdir>
						<includes>
							<include>org/olat/restapi/**/*VO.java</include>
							<include>org/olat/user/restapi/**/*VO.java</include>
							<include>org/olat/modules/fo/restapi/*VO.java</include>
							<include>org/olat/catalog/restapi/*VO.java</include>
						</includes>
						<excludes></excludes>
						<destdir>${project.build.outputDirectory}</destdir>
						<verbose>true</verbose>
					</configuration>
					<dependencies>
						<dependency>
							<groupId>xerces</groupId>
							<artifactId>xercesImpl</artifactId>
							<version>2.9.1</version>
						</dependency>
					</dependencies>
				</plugin>

				<!-- Javadoc -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>2.4</version>
					<executions>
						<execution>
							<goals>
								<goal>javadoc</goal>
							</goals>
							<phase>compile</phase>
						</execution>
					</executions>

					<configuration>
						<encoding>UTF-8</encoding>
						<verbose>false</verbose>
						<show>public</show>
						<subpackages>
							org.olat.restapi,org.olat.catalog.restapi,org.olat.modules.fo.restapi,
							org.olat.notifications.restapi,org.olat.user.restapi,org.olat.course.nodes
					</subpackages>

						<doclet>com.sun.jersey.wadl.resourcedoc.ResourceDoclet</doclet>
						<docletArtifacts>
							<docletArtifact>
								<groupId>com.sun.jersey.contribs</groupId>
								<artifactId>wadl-resourcedoc-doclet</artifactId>
								<version>1.1.5.1</version>
							</docletArtifact>
							<!-- Also specify jersey and xerces as doclet artifacts as the ResourceDoclet 
								uses classes provided by them to generate the resourcedoc. -->
							<docletArtifact>
								<groupId>com.sun.jersey</groupId>
								<artifactId>jersey-server</artifactId>
								<version>1.1.5.1</version>
							</docletArtifact>
							<docletArtifact>
								<groupId>xerces</groupId>
								<artifactId>xercesImpl</artifactId>
								<version>2.9.1</version>
							</docletArtifact>
						</docletArtifacts>
						<additionalparam>-output
							${project.build.outputDirectory}/resourcedoc.xml</additionalparam>
					</configuration>
				</plugin>

				<plugin>
					<groupId>com.sun.jersey.contribs</groupId>
					<artifactId>maven-wadl-plugin</artifactId>
					<version>1.1.5.1</version>
					<executions>
						<execution>
							<id>generate</id>
							<goals>
								<goal>generate</goal>
							</goals>
							<phase>compile</phase>
						</execution>
					</executions>

					<configuration>
						<wadlFile>${project.build.outputDirectory}/application.wadl</wadlFile>
						<formatWadlFile>true</formatWadlFile>
						<baseUri>http://www.example.com</baseUri>
						<packagesResourceConfig>
							<param>org.olat.restapi;org.olat.catalog.restapi;org.olat.notifications.restapi;org.olat.modules.fo.restapi;org.olat.user.restapi;org.olat.course.nodes</param>
						</packagesResourceConfig>
						<wadlGenerators>
							<wadlGeneratorDescription>
								<className>com.sun.jersey.server.wadl.generators.WadlGeneratorApplicationDoc</className>
								<properties>
									<property>
										<name>applicationDocsFile</name>
										<value>src/main/java/org/olat/restapi/support/application-doc.xml</value>
									</property>
								</properties>
							</wadlGeneratorDescription>
							<wadlGeneratorDescription>
								<className>com.sun.jersey.server.wadl.generators.WadlGeneratorGrammarsSupport</className>
								<properties>
									<property>
										<name>grammarsFile</name>
										<value>src/main/java/org/olat/restapi/support/application-grammars.xml</value>
									</property>
								</properties>
							</wadlGeneratorDescription>
							<wadlGeneratorDescription>
								<className>com.sun.jersey.server.wadl.generators.resourcedoc.WadlGeneratorResourceDocSupport</className>
								<properties>
									<property>
										<name>resourceDocFile</name>
										<value>${project.build.outputDirectory}/resourcedoc.xml</value>
									</property>
								</properties>
							</wadlGeneratorDescription>
						</wadlGenerators>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>xml-maven-plugin</artifactId>
					<executions>
						<execution>
							<id>xslt: ${project.build.outputDirectory}/application.html</id>
							<phase>compile</phase> <!-- append to the packaging phase. -->
							<goals>
								<goal>transform</goal> <!-- goals == mojos -->
							</goals>
							<configuration>
								<transformationSets>
									<transformationSet>
										<dir>${project.build.outputDirectory}</dir>
										<includes>
											<include>application.wadl</include>
										</includes>
										<outputDir>src/main/java/org/olat/restapi/api/_content/</outputDir>
										<stylesheet>src/main/java/org/olat/restapi/support/wadl_documentation.xsl</stylesheet>
										<fileMappers>
											<fileMapper
												implementation="org.codehaus.plexus.components.io.filemappers.FileExtensionMapper">
												<targetExtension>.html</targetExtension>
											</fileMapper>
										</fileMappers>
									</transformationSet>
								</transformationSets>
							</configuration>
						</execution>
					</executions>
					<dependencies>
						<dependency>
							<groupId>net.sf.saxon</groupId>
							<artifactId>saxon</artifactId>
							<version>8.7</version>
						</dependency>
					</dependencies>
				</plugin>

				<!-- end rest api documentation -->

			</plugins>
		</pluginManagement>
	</build>

	<!-- check with mvn dependency:tree to see what other dep. get downloaded -->
	<dependencies>
		<dependency>
			<groupId>org.openolat.testutils</groupId>
			<artifactId>codepoints-full</artifactId>
			<version>1.0.3</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.activemq</groupId>
			<artifactId>activemq-core</artifactId>
			<version>5.3.2</version>
			<exclusions>
				<exclusion>
					<groupId>backport-util-concurrent</groupId>
					<artifactId>backport-util-concurrent</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.activation</groupId>
					<artifactId>activation</artifactId>
				</exclusion>
				<!-- fxdiff: FXOLAT-243  clean up the dependencies of ActiveMQ -->
				<exclusion>
					<groupId>org.springframework.osgi</groupId>
					<artifactId>spring-osgi-core</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.activemq</groupId>
					<artifactId>kahadb</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.osgi</groupId>
					<artifactId>org.osgi.core</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.geronimo.specs</groupId>
					<artifactId>geronimo-j2ee-management_1.0_spec</artifactId>
				</exclusion>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<!-- Dependencies for onyx plugin -->
			<groupId>org.apache.axis2</groupId>
			<artifactId>axis2</artifactId>
			<version>1.4.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.ws.commons.axiom</groupId>
			<artifactId>axiom-api</artifactId>
			<version>1.2.8</version>
			<exclusions>
				<exclusion>
					<groupId>org.apache.geronimo.specs</groupId>
					<artifactId>geronimo-javamail_1.4_spec</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.geronimo.specs</groupId>
					<artifactId>geronimo-activation_1.1_spec</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.geronimo.specs</groupId>
					<artifactId>geronimo-stax-api_1.0_spec</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.ws.commons.axiom</groupId>
			<artifactId>axiom-impl</artifactId>
			<version>1.2.8</version>
			<exclusions>
				<exclusion>
					<groupId>org.apache.geronimo.specs</groupId>
					<artifactId>geronimo-javamail_1.4_spec</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.geronimo.specs</groupId>
					<artifactId>geronimo-activation_1.1_spec</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.geronimo.specs</groupId>
					<artifactId>geronimo-stax-api_1.0_spec</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.beanshell</groupId>
			<artifactId>bsh-core</artifactId>
			<version>2.0b4</version>
		</dependency>
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>2.2</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.4</version>
		</dependency>
		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<version>3.2.1</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>1.4</version>
		</dependency>
		<dependency>
			<groupId>org.mnode.ical4j</groupId>
			<artifactId>ical4j</artifactId>
			<version>1.0.2</version>
		</dependency>
		<!-- fxdiff FXOLAT-243: ActiveMQ doesn't it anymore
		<dependency>
			<groupId>org.apache.derby</groupId>
			<artifactId>derby</artifactId>
			<version>10.4.2.0</version>
		</dependency> -->
		<dependency>
			<groupId>javassist</groupId>
			<artifactId>javassist</artifactId>
			<version>3.8.0.GA</version>
		</dependency>
		<dependency>
			<groupId>oro</groupId>
			<artifactId>oro</artifactId>
			<version>2.0.8</version>
		</dependency>
		<dependency>
			<groupId>jamwikiParser.jar</groupId>
			<artifactId>jamwikiParser.jar</artifactId>
			<version>jamwikiParser.jar</version>
		</dependency>
		<dependency>
			<groupId>jaxen</groupId>
			<artifactId>jaxen</artifactId>
			<version>1.1.1</version>
			<exclusions>
				<exclusion>
					<groupId>com.ibm.icu</groupId>
					<artifactId>icu4j</artifactId>
				</exclusion>
				<exclusion>
					<groupId>xalan</groupId>
					<artifactId>xalan</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- <dependency>
			<groupId>com.ibm.icu</groupId>
			<artifactId>icu4j</artifactId>
			<version>4.0.1</version>
		</dependency> -->
		<dependency>
			<groupId>opensaml</groupId>
			<artifactId>opensaml</artifactId>
			<version>1.1</version>
		</dependency>
		<dependency>
			<groupId>org.igniterealtime.smack</groupId>
			<artifactId>smack</artifactId>
			<version>3.2.2</version>
		</dependency>
		<dependency>
			<groupId>org.igniterealtime.smack</groupId>
			<artifactId>smackx</artifactId>
			<version>3.2.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-highlighter</artifactId>
			<version>3.0.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-spellchecker</artifactId>
			<version>3.0.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>3.7</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-scratchpad</artifactId>
			<version>3.7</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>3.7</version>
			<exclusions>
				<exclusion><!-- included in jdk 1.6 -->
					<groupId>stax</groupId>
					<artifactId>stax-api</artifactId>
				</exclusion>
				<exclusion><!-- included in jdk 1.6 -->
					<groupId>org.apache.geronimo.specs</groupId>
					<artifactId>geronimo-stax-api_1.0_spec</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.pdfbox</groupId>
			<artifactId>pdfbox</artifactId>
			<version>1.6.0</version>
		</dependency>
		<dependency>
			<groupId>org.bouncycastle</groupId>
			<artifactId>bcmail-jdk15</artifactId>
			<version>1.44</version>
		</dependency>
		<dependency>
			<groupId>org.bouncycastle</groupId>
			<artifactId>bcprov-jdk15</artifactId>
			<version>1.44</version>
		</dependency>
		<dependency>
			<groupId>jdom</groupId>
			<artifactId>jdom</artifactId>
			<version>1.0</version>
		</dependency>
		<dependency>
			<groupId>jgrapht</groupId>
			<artifactId>jgrapht</artifactId>
			<version>0.6.0</version>
		</dependency>
		<!-- fxdiff: FXOLAT-243 remove dependency to jbosscache (only for cluster + deprecated by JBoss) -->
		<!-- cluster -->
		<dependency>
			<groupId>reload-diva</groupId>
			<artifactId>reload-diva</artifactId>
			<version>reload_dist255-diva.jar</version>
		</dependency>
		<dependency>
			<groupId>reload-dweezil</groupId>
			<artifactId>reload-dweezil</artifactId>
			<version>reload_dist255-dweezil.jar</version>
		</dependency>
		<dependency>
			<groupId>reload-jdom</groupId>
			<artifactId>reload-jdom</artifactId>
			<version>reload_dist255-jdom.jar</version>
		</dependency>
		<dependency>
			<groupId>reload-moonunit</groupId>
			<artifactId>reload-moonunit</artifactId>
			<version>reload_dist255-moonunit.jar</version>
		</dependency>
		<dependency>
			<groupId>rome</groupId>
			<artifactId>rome</artifactId>
			<version>1.0</version>
		</dependency>
		<!-- <dependency>
			<groupId>jfree</groupId>
			<artifactId>jfreechart</artifactId>
			<version>1.0.1</version>
		</dependency> -->
		<dependency>
			<groupId>ch.ethz</groupId>
			<artifactId>pfplms-scorm</artifactId>
			<version>unknown</version>
			<classifier>patched</classifier><!-- patched version of scorm adapter: 
				contact: matthai.kurian@gmail.com -->
		</dependency>
		<dependency>
			<groupId>gnu-regexp</groupId>
			<artifactId>gnu-regexp</artifactId>
			<version>1.1.4</version>
		</dependency>
		<!-- fxdiff: FXOLAT-243 library is in JDK
		<dependency>
			<groupId>javax.sql</groupId>
			<artifactId>jdbc-stdext</artifactId>
			<version>2.0</version>
		</dependency> -->		
		<dependency>
			<!-- DO NOT UPDATE! -->
			<!-- Due to our special setup where we use the jdbc driver to convert 
				from utf-8 to iso we cannot update this lib at the moment. -->
			<!-- fxdiff: we use the new one, it works! -->
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.11</version>
		</dependency>
		<dependency>
			<groupId>postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>8.4-701.jdbc4</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.5.11</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.5.11</version>
		</dependency>
		<!-- basic LTI stuff for lti demo: http://www.imsglobal.org/toolsinteroperability2.cfm -->
		<dependency>
			<groupId>org.sakaiproject.basiclti</groupId>
			<artifactId>basiclti-util</artifactId>
			<version>1.4</version>
		</dependency>

		<!-- core dependencies -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>tomcat</groupId>
			<artifactId>naming-resources</artifactId>
			<version>5.5.15</version>
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.2.1</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>net.sourceforge.nekohtml</groupId>
			<artifactId>nekohtml</artifactId>
			<version>1.9.14</version>
		</dependency>
		<dependency>
			<groupId>org.owasp.antisamy</groupId>
			<artifactId>antisamy</artifactId>
			<version>1.4.4</version>
		</dependency>
		<dependency>
			<groupId>org.w3c.css</groupId>
			<artifactId>sac</artifactId>
			<version>1.3</version>
		</dependency>
		<dependency>
			<groupId>org.apache.xmlgraphics</groupId>
			<artifactId>batik-css</artifactId>
			<version>1.7</version>
		</dependency>
		<dependency>
			<groupId>org.apache.xmlgraphics</groupId>
			<artifactId>batik-util</artifactId>
			<version>1.7</version>
		</dependency>
		<dependency>
			<groupId>de.java2html</groupId>
			<artifactId>java2html</artifactId>
			<version>5.0</version>
		</dependency>
		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.1.1</version>
		</dependency>
		<dependency>
			<groupId>wsdl4j</groupId>
			<artifactId>wsdl4j</artifactId>
			<version>1.6.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.ws.commons.schema</groupId>
			<artifactId>XmlSchema</artifactId>
			<version>1.4.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.neethi</groupId>
			<artifactId>neethi</artifactId>
			<version>2.0.4</version>
		</dependency>
		<dependency>
			<groupId>org.apache.woden</groupId>
			<artifactId>woden-api</artifactId>
			<version>1.0M8</version>
			<exclusions>
				<exclusion>
					<groupId>xerces</groupId>
					<artifactId>xmlParserAPIs</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>commons-httpclient</groupId>
			<artifactId>commons-httpclient</artifactId>
			<version>3.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpcore</artifactId>
			<version>4.1.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.1.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpmime</artifactId>
			<version>4.1.1</version>
		</dependency>
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.6</version>
		</dependency>
		<dependency>
			<groupId>org.openolat.testutils</groupId>
			<artifactId>codepoints</artifactId>
			<version>1.0.3</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.5</version> <!-- 4.7 somehow does not work with spring 3.0, may test later... -->
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>3.3.2.GA</version>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-jmx</artifactId>
			<version>3.3.2.GA</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-c3p0</artifactId>
			<version>3.3.2.GA</version>
			<exclusions>
				<!-- includes an old version of c3p0 -->
				<exclusion>
					<artifactId>c3p0</artifactId>
					<groupId>c3p0</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>c3p0</groupId>
			<artifactId>c3p0</artifactId>
			<version>0.9.1.2</version>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.14</version>
		</dependency>
		<dependency>
			<groupId>org.apache.velocity</groupId>
			<artifactId>velocity</artifactId>
			<version>1.6.2</version>
		</dependency>
		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache</artifactId>
			<version>1.3.0</version>
			<!-- Needed by axis2 -->
			<!-- <exclusions> <exclusion> <groupId>backport-util-concurrent</groupId> 
				<artifactId>backport-util-concurrent</artifactId> </exclusion> </exclusions> -->
		</dependency>
		<dependency>
			<groupId>jazzlib</groupId>
			<artifactId>jazzlib</artifactId>
			<version>0.0.6</version> <!-- do not replace with 0.0.7 as this version is highly patched. -->
			<classifier>patched</classifier>
		</dependency>
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<version>20080701</version>
		</dependency>
		<dependency>
			<groupId>quartz</groupId>
			<artifactId>quartz</artifactId>
			<version>1.5.2</version>
		</dependency>
		<dependency>
			<groupId>com.thoughtworks.xstream</groupId>
			<artifactId>xstream</artifactId>
			<version>1.4.1</version>
		</dependency>
		<dependency>
			<groupId>cos</groupId>
			<artifactId>cos</artifactId>
			<version>05Nov2002</version>
		</dependency>
		<dependency>
			<groupId>dom4j</groupId>
			<artifactId>dom4j</artifactId>
			<version>1.6.1</version>
		</dependency>
		<dependency>
			<groupId>xerces</groupId>
			<artifactId>xercesImpl</artifactId>
			<version>2.9.1</version>
			<!-- fxdiff: FXOLAT-243  prevents duplicate -->
			<exclusions>
  				<exclusion>
  					<groupId>xerces</groupId>
						<artifactId>xmlParserAPIs</artifactId>
  				</exclusion>
  			</exclusions>
		</dependency>
		<dependency>
			<groupId>xml-apis</groupId>
			<artifactId>xml-apis</artifactId>
			<version>1.3.04</version>
		</dependency>
		<dependency>
			<groupId>javax.mail</groupId>
			<artifactId>mail</artifactId>
			<version>1.4.3</version>
			<!-- fxdiff: FXOLAT-243 included in JDK 1.6 -->
			<exclusions>
				<exclusion>
					<groupId>javax.activation</groupId>
					<artifactId>activation</artifactId>
				</exclusion>
			</exclusions>			
		</dependency>
		<dependency>
			<groupId>com.neemsoft</groupId>
			<artifactId>jmep</artifactId>
			<version>unknown</version>
			<classifier>patched</classifier> <!-- unknown patched version of jmep (java mathematical expression parser)[http://jmep.tigris.org/], 
				do not replace unless you know what you do! -->
		</dependency>
		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-core</artifactId>
			<version>3.0.2</version>
		</dependency>
		<!-- Spring dependencies -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-expression</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${org.springframework.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<!-- end Spring dependencies -->
		<!-- Start Jersey dependency -->
		<dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>jsr311-api</artifactId>
			<version>1.1.1</version>
		</dependency>
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-server</artifactId>
			<version>1.1.5.1</version>
			<exclusions>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-core</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-beans</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-context</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-web</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-aop</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-jca</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

	<!-- 
		<dependency>
			<groupId>com.sun.jersey.contribs</groupId>
			<artifactId>jersey-spring</artifactId>
			<version>1.1.5.1</version>
			<exclusions>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-core</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-beans</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-context</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-web</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-aop</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>com.sun.jersey.contribs</groupId>
			<artifactId>jersey-multipart</artifactId>
			<version>1.1.5.1</version>
		</dependency>
		-->

		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-json</artifactId>
			<version>1.1.5.1</version>
			<exclusions>
				<exclusion>
					<groupId>stax</groupId>
					<artifactId>stax-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.xml.bind</groupId>
					<artifactId>jaxb-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.codehaus.jettison</groupId>
					<artifactId>jettison</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.xml.bind</groupId>
					<artifactId>jaxb-impl</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-test-framework</artifactId>
			<version>1.1.5.1</version>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.glassfish.embedded</groupId>
					<artifactId>glassfish-embedded-all</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.net.httpserver</groupId>
					<artifactId>http</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-core-asl</artifactId>
			<version>1.5.1</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>1.5.1</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-jaxrs</artifactId>
			<version>1.5.1</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-xc</artifactId>
			<version>1.5.1</version>
		</dependency>

		<!-- end jersey -->
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.8.1</version>
			<!-- fxdiff: FXOLAT-243  only for testing purpose -->
			<scope>test</scope>
		</dependency>
    <!-- START selenium tests dependencies -->
    <dependency>
      <groupId>org.testng</groupId>
      <artifactId>testng</artifactId>
      <version>5.14</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.seleniumhq.selenium.client-drivers</groupId>
      <artifactId>selenium-java-client-driver</artifactId>
      <version>${selenium-client.version}</version>
      <scope>test</scope>
    </dependency>
    <!-- END selenium tests dependencies -->



	</dependencies>
	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>2.3.1</version>
				<configuration>
					<!-- disable checking of url's im pom's -->
					<dependencyDetailsEnabled>false</dependencyDetailsEnabled>
					<dependencyLocationsEnabled>false</dependencyLocationsEnabled>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>2.9</version>
			</plugin>
			<!-- Javadoc -->


			<!-- <reportSets> <reportSet> <reports> <report>javadoc</report> -->
			<!-- Note: leave this line commented out if unit tests are not to be documented 
				<report>test-javadoc</report>report> -->
			<!-- </reports> </reportSet> </reportSets> </plugin> -->
			<plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jxr-plugin</artifactId>
        <version>2.3</version>
      </plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<version>2.5.1</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>2.6</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>2.5</version>
				<configuration>
					<rulesets>
						<ruleset>/rulesets/basic.xml</ruleset>
						<ruleset>/rulesets/controversial.xml</ruleset>
					</rulesets>
					<format>xml</format>
					<linkXref>true</linkXref>
					<sourceEncoding>utf-8</sourceEncoding>
					<minimumTokens>100</minimumTokens>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>taglist-maven-plugin</artifactId>
				<version>2.4</version>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
				<version>2.3.1</version>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jdepend-maven-plugin</artifactId>
				<version>2.0-beta-2</version>
			</plugin>
		</plugins>
	</reporting>
	
	<ciManagement>
		<system>Hudson</system>
		<url>http://jenkins.frentix.com</url>
	</ciManagement>
</project>
