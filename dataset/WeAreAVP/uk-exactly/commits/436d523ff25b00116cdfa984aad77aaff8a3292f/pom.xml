<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>uk-exactly</groupId>
    <artifactId>uk-exactly</artifactId>
    <version>0.1.6</version>

    <properties>
        <maven.compiler.source>1.7</maven.compiler.source>
        <maven.compiler.target>1.7</maven.compiler.target>
    </properties>

    <repositories>
        <repository>
            <id>NetBeans Repository</id>
            <url>http://bits.netbeans.org/maven2/</url>
        </repository>

        <repository>
            <id>github-asbachb-releases</id>
            <url>https://raw.github.com/asbachb/mvn-repo/master/releases</url>
        </repository>
    </repositories>

    <dependencies>
        <dependency>
            <groupId>org.netbeans.external</groupId>
            <artifactId>AbsoluteLayout</artifactId>
            <version>RELEASE802</version>
        </dependency>

        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>1.3</version>
        </dependency>

        <dependency>
            <groupId>com.apple</groupId>
            <artifactId>AppleJavaExtensions</artifactId>
            <version>1.4</version>
        </dependency>

        <dependency>
            <groupId>gov.loc</groupId>
            <artifactId>bagit</artifactId>
            <version>5.0.3</version>
        </dependency>
        
        <dependency>
            <groupId>org.zeroturnaround</groupId>
            <artifactId>zt-zip</artifactId>
            <version>1.12</version>
            <type>jar</type>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-compress</artifactId>
            <version>1.3</version>
        </dependency>

        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.0.1</version>
        </dependency>

        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
            <version>1.1.1</version>
        </dependency>

        <dependency>
            <groupId>commons-net</groupId>
            <artifactId>commons-net</artifactId>
            <version>3.0.1</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-vfs2</artifactId>
            <version>2.0</version>
        </dependency>

        <dependency>
            <groupId>org.apache.derby</groupId>
            <artifactId>derby</artifactId>
            <version>10.11.1.1</version>
        </dependency>

        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>eclipselink</artifactId>
            <version>2.5.2</version>
        </dependency>

        <dependency>
            <groupId>it.sauronsoftware.ftp4j</groupId>
            <artifactId>ftp4j</artifactId>
            <version>1.7.2</version>
        </dependency>

        <dependency>
            <groupId>javax.mail</groupId>
            <artifactId>mail</artifactId>
            <version>1.4.4</version>
        </dependency>

        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>javax.persistence</artifactId>
            <version>2.1.0</version>
        </dependency>

        <dependency>
            <groupId>com.jcraft</groupId>
            <artifactId>jsch</artifactId>
            <version>0.1.50</version>
        </dependency>

        <dependency>
            <groupId>com.opencsv</groupId>
            <artifactId>opencsv</artifactId>
            <version>3.6</version>
        </dependency>

        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
            <version>2.4</version>
        </dependency>

        <dependency>
            <groupId>com.googlecode.vfsjfilechooser2</groupId>
            <artifactId>vfsjfilechooser2</artifactId>
            <version>0.1.0</version>
        </dependency>
    </dependencies>

    <build>
        <sourceDirectory>src</sourceDirectory>

        <resources>
            <resource>
                <directory>src/META-INF</directory>
                <targetPath>META-INF</targetPath>
            </resource>

            <resource>
                <directory>src/uk/sipperfly/ui/resources</directory>
                <targetPath>uk/sipperfly/ui/resources</targetPath>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>2.4.3</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <finalName>exactly</finalName>
                            <transformers>
                                <transformer
                                    implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>uk.sipperfly.ui.Exactly</mainClass>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <!-- The deployment profile is built for daily releases. It builds the standalone
        zip and the autoupdate site. It can be used with deploy-dmg to include the dmg as well. -->
        <profile>
            <id>deployment</id>
            <properties>
                <jarGoalPhase>none</jarGoalPhase>
            </properties>
            <!-- Localization dependency -->
            <dependencies>
                <dependency>
                    <groupId>nl.cloudfarming.client</groupId>
                    <artifactId>lib-platform-l10n</artifactId>
                    <version>${gephi.platform.localization.version}</version>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <!-- Enable artifact deploy -->
                    <plugin>
                        <groupId>org.sonatype.plugins</groupId>
                        <artifactId>nexus-staging-maven-plugin</artifactId>
                        <configuration>
                            <skipNexusStagingDeployMojo>false</skipNexusStagingDeployMojo>
                        </configuration>
                    </plugin>
                    <!-- Permits NbModuleSuite to be run in integration-test phase: -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <systemPropertyVariables>
                                <all.clusters>${all.clusters}</all.clusters>
                                <branding.token>${brandingToken}</branding.token>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>replace-windows-icon</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <skip>${skipReplaceWindowsIcon}</skip>
                                    <!-- Target that replaces the icon for the launcher exe with our own icon. -->
                                    <target name="replaceWindowsLauncherIcon" description="Replace the icon for the Windows launcher exe">
                                        <!-- Windows -->
                                        <echo message="Replacing icon of Windows launcher executable."/>
                                        <exec dir="src/main/app-resources" executable="ReplaceVistaIcon.exe" resolveexecutable="true" osfamily="windows">
                                            <arg line="${project.build.directory}/${brandingToken}/bin/${brandingToken}.exe gephi.ico 0"/>
                                        </exec>
                                        <exec dir="src/main/app-resources" executable="ReplaceVistaIcon.exe" resolveexecutable="true" osfamily="windows">
                                            <arg line="${project.build.directory}/${brandingToken}/bin/${brandingToken}.exe gephifile.ico 1"/>
                                        </exec>
                                        <exec dir="src/main/app-resources" executable="ReplaceVistaIcon.exe" resolveexecutable="true" osfamily="windows">
                                            <arg line="${project.build.directory}/${brandingToken}/bin/${brandingToken}64.exe gephi.ico 0"/>
                                        </exec>
                                        <exec dir="src/main/app-resources" executable="ReplaceVistaIcon.exe" resolveexecutable="true" osfamily="windows">
                                            <arg line="${project.build.directory}/${brandingToken}/bin/${brandingToken}64.exe gephifile.ico 1"/>
                                        </exec>
                                        <!-- Linux (assuming the right wine configuration) -->
                                        <echo message="Replacing icon of Windows launcher executable."/>
                                        <exec dir="src/main/app-resources" executable="replacevistaicon" os="Linux">
                                            <arg line="${project.build.directory}/${brandingToken}/bin/${brandingToken}.exe gephi.ico 0"/>
                                        </exec>
                                        <exec dir="src/main/app-resources" executable="replacevistaicon" os="Linux">
                                            <arg line="${project.build.directory}/${brandingToken}/bin/${brandingToken}.exe gephifile.ico 1"/>
                                        </exec>
                                        <exec dir="src/main/app-resources" executable="replacevistaicon" os="Linux">
                                            <arg line="${project.build.directory}/${brandingToken}/bin/${brandingToken}64.exe gephi.ico 0"/>
                                        </exec>
                                        <exec dir="src/main/app-resources" executable="replacevistaicon" os="Linux">
                                            <arg line="${project.build.directory}/${brandingToken}/bin/${brandingToken}64.exe gephifile.ico 1"/>
                                        </exec>
                                    </target>
                                </configuration>
                            </execution>
                            
                            <!-- Execute InnoSetup with the gephi.iss script -->
                            <execution>
                                <id>create-windows-installer</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <skip>${skipCreateExe}</skip>
                                    <target name="createInstaller" description="Create Windows installer with InnoSetup">
                                        <echo message="Creating windows installer with InnoSetup"/>
                                        <delete file="${project.artifactId}-${project.version}.setup.exe" failonerror="false"/>
                                        <!-- Windows -->
                                        <exec dir="${project.build.directory}" executable="${gephi.innosetup.path}/Compil32.exe" osfamily="windows">
                                            <arg line="/cc &quot;${brandingToken}.iss&quot;" />
                                        </exec>
                                        <!-- Linux (assuming the right wine configuration) -->
                                        <exec dir="${project.build.directory}" executable="iscc" os="Linux">
                                            <arg line="${brandingToken}.iss" />
                                        </exec>
                                    </target>
                                </configuration>
                            </execution>
                            
                            <!-- Create the Mac OS X application bundle and dmg file -->
                            <execution>
                                <id>create-app-bundle</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <skip>${skipCreateDmg}</skip>
                                    <target>
                                        <!-- Clean -->
                                        <delete includeEmptyDirs="true" failonerror="false" removeNotFollowedSymlinks="true">
                                            <fileset dir="${project.build.directory}/${gephi.appbundle.name}.app" followsymlinks="false"/>
                                            <fileset dir="${project.build.directory}/${gephi.app.title}" followsymlinks="false"/>
                                            <fileset dir="${project.build.directory}/${project.artifactId}-${project.version}.dmg" followsymlinks="false"/>
                                        </delete>
                                        <delete file="${project.build.directory}/${project.artifactId}-${project.version}.dmg" failonerror="false"/>
                                        <!-- Create folders -->
                                        <mkdir dir="${project.build.directory}/${gephi.appbundle.name}.app"/>
                                        <mkdir dir="${project.build.directory}/${gephi.appbundle.name}.app/Contents/MacOS"/>
                                        <!-- Copy application -->
                                        <copy todir="${project.build.directory}/${gephi.appbundle.name}.app/Contents/Resources/${brandingToken}">
                                            <fileset dir="${project.build.directory}/${brandingToken}"/>
                                        </copy>
                                        <!-- Copy logo and configuration files -->
                                        <copy tofile="${project.build.directory}/${gephi.appbundle.name}.app/Contents/Resources/${brandingToken}.icns" file="src/main/app-resources/${brandingToken}.icns" />
                                        <copy tofile="${project.build.directory}/${gephi.appbundle.name}.app/Contents/Info.plist" file="${project.build.directory}/Info.plist"/>
                                        <!-- Move bin/gephi script into MacOS/gephi and modify the script so it founds its resources -->
                                        <move file="${project.build.directory}/${gephi.appbundle.name}.app/Contents/Resources/${brandingToken}/bin/${brandingToken}" todir="${project.build.directory}/${gephi.appbundle.name}.app/Contents/MacOS"/>
                                        <replace file="${project.build.directory}/${gephi.appbundle.name}.app/Contents/MacOS/${brandingToken}" token="`dirname &quot;$PRG&quot;`" value="`dirname &quot;$PRG&quot;`&quot;/../Resources/${brandingToken}/bin&quot;"/>
                                        <chmod file="${project.build.directory}/${gephi.appbundle.name}.app/Contents/MacOS/${brandingToken}" perm="ugo+rx"/>
                                        <!-- Download and untar JRE -->
                                        <exec dir="${project.build.directory}" executable="curl">
                                            <arg line="-L"/>
                                            <arg line="-C"/>
                                            <arg line="-"/>
                                            <arg line="-b"/>
                                            <arg line="&quot;oraclelicense=accept-securebackup-cookie&quot;"/>
                                            <arg line="-O"/>
                                            <arg line="${gephi.bundle.jre.url}/${gephi.bundle.jre.version}.tar.gz"/>
                                        </exec>
                                        <!-- Unzip archive -->
                                        <mkdir dir="${project.build.directory}/${gephi.appbundle.name}.app/Contents/PlugIns"/>
                                        <exec dir="${project.build.directory}" executable="tar">
                                            <arg line="-zxf"/>
                                            <arg line="${gephi.bundle.jre.version}.tar.gz"/>
                                            <arg line="-C &quot;${gephi.appbundle.name}.app/Contents/PlugIns&quot;"/>
                                        </exec>
                                        <!-- Remove quarantine bit set recursively on JRE -->
                                        <exec dir="${project.build.directory}" os="Mac OS X" executable="xattr">
                                            <arg line="-rd"/>
                                            <arg line="com.apple.quarantine"/>
                                            <arg line="&quot;${gephi.appbundle.name}.app/Contents/PlugIns&quot;"/>
                                        </exec>
                                        <!-- Get the JRE folder name -->
                                        <path id="jre_name">
                                            <dirset dir="${project.build.directory}/${gephi.appbundle.name}.app/Contents/PlugIns" includes="jre*" />
                                        </path>
                                        <property name="bundle.jre.path" refid="jre_name" />
                                        <basename property="bundle.jre.name" file="${bundle.jre.path}"/>
                                        <!-- Configure relative JRE path into gephi.conf -->
                                        <replace file="${project.build.directory}/${gephi.appbundle.name}.app/Contents/Resources/${brandingToken}/etc/${brandingToken}.conf" token="#jdkhome=&quot;/path/to/jdk&quot;" value="jdkhome=&quot;../../PlugIns/${bundle.jre.name}/Contents/Home&quot;"/>
                                        <chmod file="${project.build.directory}/${gephi.appbundle.name}.app/Contents/PlugIns/**" perm="+x" type="both"/>
                                        <!-- Fix JRE by replacing libjli.dylib symlink with real file -->
                                        <delete file="${project.build.directory}/${gephi.appbundle.name}.app/Contents/PlugIns/${bundle.jre.name}/Contents/MacOS/libjli.dylib"/>
                                        <copy file="${project.build.directory}/${gephi.appbundle.name}.app/Contents/PlugIns/${bundle.jre.name}/Contents/Home/lib/jli/libjli.dylib" todir="${project.build.directory}/${gephi.appbundle.name}.app/Contents/PlugIns/${bundle.jre.name}/Contents/MacOS"/>
                                        <!-- Codesign JRE -->
                                        <exec dir="${project.build.directory}" os="Mac OS X" executable="codesign">
                                            <arg value="-fs"/>
                                            <arg value="${gephi.codesign.identity}"/>
                                            <arg value="-v"/>
                                            <arg value="${gephi.appbundle.name}.app/Contents/PlugIns/${bundle.jre.name}/"/>
                                        </exec>
                                        <!-- Codesign app -->
                                        <exec dir="${project.build.directory}" os="Mac OS X" executable="codesign">
                                            <arg value="-fs"/>
                                            <arg value="${gephi.codesign.identity}"/>
                                            <arg value="-v"/>
                                            <arg value="${gephi.appbundle.name}.app"/>
                                        </exec>
                                        <!-- Create application folder and add Applications dynamic link -->
                                        <mkdir dir="${project.build.directory}/${gephi.app.title}"/>
                                        <move file="${project.build.directory}/${gephi.appbundle.name}.app" todir="${project.build.directory}/${gephi.app.title}/" />
                                        <symlink link="${project.build.directory}/${gephi.app.title}/Applications" resource="/Applications" failonerror="false" />
                                        <!-- Create DMG (Mac OS X) -->
                                        <exec dir="${project.build.directory}" os="Mac OS X" executable="hdiutil">
                                            <arg value="create"/>
                                            <arg value="-noanyowners"/>
                                            <arg value="-imagekey"/>
                                            <arg value="zlib-level=9"/>
                                            <arg value="-srcfolder"/>
                                            <arg value="${project.build.directory}/${gephi.app.title}"/>
                                            <arg value="${project.artifactId}-${project.version}.dmg"/>
                                        </exec>
                                        <!-- Create DMG (Linux), only for testing -->
                                        <exec dir="${project.build.directory}" os="Linux" executable="genisoimage">
                                            <arg value="-V"/>
                                            <arg value="${gephi.appbundle.name}"/>
                                            <arg value="-U"/>
                                            <arg value="-D"/>
                                            <arg value="-l"/>
                                            <arg value="-allow-multidot"/>
                                            <arg value="-max-iso9660-filenames"/>
                                            <arg value="-relaxed-filenames"/>
                                            <arg value="-no-iso-translate"/>
                                            <arg value="-r"/>
                                            <arg value="-o"/>
                                            <arg value="${project.artifactId}-${project.version}.dmg"/>
                                            <arg value="-root"/>
                                            <arg value="${project.build.directory}/${gephi.app.title}"/>
                                            <arg value="${project.build.directory}/${gephi.app.title}"/>
                                        </exec>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    
                    <!-- Assembler to produce linux's tar.gz -->
                    <plugin>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>linux-assembly</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                                <configuration>
                                    <skipAssembly>${skipCreateTargz}</skipAssembly>
                                    <tarLongFileMode>gnu</tarLongFileMode>
                                    <finalName>${brandingToken}-${project.version}</finalName>
                                    <descriptors>
                                        <descriptor>src/assemble/linux.xml</descriptor>
                                    </descriptors>
                                    <attach>false</attach>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <executions>
                            <!-- Attach tar.gz artifact -->
                            <execution>
                                <id>attach-linux</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>attach-artifact</goal>
                                </goals>
                                <configuration>
                                    <skipAttach>${skipCreateTargz}</skipAttach>
                                    <artifacts>
                                        <artifact>
                                            <file>${basedir}/target/${brandingToken}-${project.version}-linux.tar.gz</file>
                                            <type>tar.gz</type>
                                            <classifier>linux</classifier>
                                        </artifact>
                                    </artifacts>
                                </configuration>
                            </execution>
                            
                            <!-- Attach the final exe installer for deployment -->
                            <execution>
                                <id>attach-exe</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>attach-artifact</goal>
                                </goals>
                                <configuration>
                                    <skipAttach>${skipCreateExe}</skipAttach>
                                    <artifacts>
                                        <artifact>
                                            <file>${project.build.directory}/${project.artifactId}-${project.version}.setup.exe</file>
                                            <type>exe</type>
                                            <classifier>windows</classifier>
                                        </artifact>
                                    </artifacts>
                                </configuration>
                            </execution>
                            
                            <!-- Attach the final DMG for deployment -->
                            <execution>
                                <id>attach-dmg</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>attach-artifact</goal>
                                </goals>
                                <configuration>
                                    <skipAttach>${skipCreateDmg}</skipAttach>
                                    <artifacts>
                                        <artifact>
                                            <file>${project.build.directory}/${project.artifactId}-${project.version}.dmg</file>
                                            <type>dmg</type>
                                            <classifier>macos</classifier>
                                        </artifact>
                                    </artifacts>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>