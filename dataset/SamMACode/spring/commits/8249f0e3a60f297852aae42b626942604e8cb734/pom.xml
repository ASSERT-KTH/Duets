<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <!-- modelVersion表示的是对象模型版本,相对于Maven2和3来说,这个是正常的 -->
  <modelVersion>4.0.0</modelVersion>
  <!-- groupId表示项目属于哪个组,这个一般与公司的域名有关,一般为公司域名+项目名 -->
  <groupId>org.spring.learn</groupId>
  <!-- artifactId定义的是当前maven项目在项目组中的唯一标识 -->
  <artifactId>spring</artifactId>
  <!-- maven对其打包的方式为war包 -->
  <packaging>war</packaging>
  <!-- version指的是当前项目的版本,1.0-SNAPSHOT位当前的快照版本 -->
  <version>1.0-SNAPSHOT</version>
  <!-- name表示的是当前项目的名称,虽然不是必须的但是也是对项目的说明 -->
  <name>spring Maven Webapp</name>
  <!-- 一般情况下类的包名称都是基于项目的groupId和ArtifactId拼接而成的 -->
  <url>http://maven.apache.org</url>

  <!-- 在Properties文件中配置spring内容 -->
  <properties>
    <spring.version>4.3.21.RELEASE</spring.version>
  </properties>

  <dependencies>
    <!-- 引入Junit4的jar包 -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <!-- scope表示的是依赖的范围,test的话是只对测试状态有效;
       在不设置的时候,其默认值就是compile这个是对于主代码和测试都是有效的. -->
      <scope>test</scope>
    </dependency>

    <!-- 补全项目依赖,日志的内容:引入slf4j.jar,项目接口的依赖-->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>1.7.12</version>
    </dependency>
    <!-- 第二个组合是使用logback-core + logback-classic -->
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-core</artifactId>
      <version>1.1.1</version>
    </dependency>
    <!-- 第二是slf4j的实现与整合,log4j,是核心的classic-->
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>1.1.1</version>
    </dependency>

    <!--引入mysql-connecttor-java的jar-->
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>5.1.1</version>
      <!--scope的值为runtime表示的是在运行期间引入jar包-->
      <scope>runtime</scope>
    </dependency>
    <!-- 引入数据库连接池-->
    <dependency>
      <groupId>c3p0</groupId>
      <artifactId>c3p0</artifactId>
      <version>0.9.1.2</version>
    </dependency>

    <!--DAO层的项目依赖,引入mybatis的jar-->
    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>3.3.0</version>
    </dependency>
    <!-- 引入mybatis-spring整合的jar-->
    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis-spring</artifactId>
      <version>1.3.0</version>
    </dependency>

    <!-- Servlet web相关的依赖 -->
    <dependency>
      <groupId>taglibs</groupId>
      <artifactId>standard</artifactId>
      <version>1.1.2</version>
    </dependency>
    <!-- 引入jstl的依赖-->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>jstl</artifactId>
      <version>1.2</version>
    </dependency>
    <!-- 引入servlet的相关依赖 -->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>3.1.0</version>
    </dependency>
    <!-- 引入jackson-databind的数据依赖-->
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.5.4</version>
    </dependency>

    <!-- 4.引入spring-core的一些依赖jar包 -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-core</artifactId>
      <version>${spring.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-beans</artifactId>
      <version>${spring.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>${spring.version}</version>
    </dependency>
    <!--引入Spring DAO层相关的依赖-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-jdbc</artifactId>
      <version>${spring.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-tx</artifactId>
      <version>${spring.version}</version>
    </dependency>
    <!-- Spring-web相关的依赖 -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
      <version>${spring.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <version>${spring.version}</version>
    </dependency>
    <!-- 测试部分依赖:引入spring test目录-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-test</artifactId>
      <version>${spring.version}</version>
    </dependency>
    <!-- 引入Redis的客户端:jedis -->
    <dependency>
      <groupId>redis.clients</groupId>
      <artifactId>jedis</artifactId>
      <version>2.7.3</version>
    </dependency>
    <!-- 引入Google的protostuff依赖,自定义对象的序列化-->
    <dependency>
      <groupId>com.dyuproject.protostuff</groupId>
      <artifactId>protostuff-core</artifactId>
      <version>1.0.8</version>
    </dependency>
    <dependency>
      <groupId>com.dyuproject.protostuff</groupId>
      <artifactId>protostuff-runtime</artifactId>
      <version>1.0.8</version>
    </dependency>
    <!--添加Commons工具jar-->
    <dependency>
      <groupId>commons-collections</groupId>
      <artifactId>commons-collections</artifactId>
      <version>3.2.1</version>
    </dependency>
  </dependencies>

  <build>
    <finalName>spring</finalName>
  </build>
</project>
