[INFO] Error stacktraces are turned on.
[INFO] Scanning for projects...
[INFO] 
[INFO] --------------< com.khubla.antlr:antlr4test-maven-plugin >--------------
[INFO] Building khubla.com Antlr4 test mojo 1.15-SNAPSHOT
[INFO] ----------------------------[ maven-plugin ]----------------------------
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:prepare-agent (default) @ antlr4test-maven-plugin ---
[INFO] argLine set to -javaagent:/home/jdbl/.m2/repository/org/jacoco/org.jacoco.agent/0.8.5/org.jacoco.agent-0.8.5-runtime.jar=destfile=/tmp/tmpb5in_1zy/antlr4test-maven-plugin/target/jacoco.exec
[INFO] 
[INFO] --- antlr4-maven-plugin:4.8-1:antlr4 (antlr4-test-resources) @ antlr4test-maven-plugin ---
[INFO] ANTLR 4: Processing source directory /tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources
[INFO] Processing grammar: tnt.g4
[INFO] Processing grammar: CaseInsensitive_lower.g4
[INFO] Processing grammar: CaseInsensitive_UPPER.g4
[INFO] Processing grammar: dummy/TestGrammarLexer.g4
[INFO] Processing grammar: dummy/TestGrammarParser.g4
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ antlr4test-maven-plugin ---
[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory /tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/main/resources
[INFO] 
[INFO] --- maven-antrun-plugin:1.8:run (copy-java-resources) @ antlr4test-maven-plugin ---
[INFO] Executing tasks

main:
     [copy] Copying 1 file to /tmp/tmpb5in_1zy/antlr4test-maven-plugin/target/generated-sources/antlr4/dummy
[INFO] Executed tasks
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ antlr4test-maven-plugin ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!
[INFO] Compiling 26 source files to /tmp/tmpb5in_1zy/antlr4test-maven-plugin/target/classes
[INFO] /tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/main/java/com/khubla/antlr/antlr4test/AntlrCaseInsensitiveFileStream.java: /tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/main/java/com/khubla/antlr/antlr4test/AntlrCaseInsensitiveFileStream.java uses or overrides a deprecated API.
[INFO] /tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/main/java/com/khubla/antlr/antlr4test/AntlrCaseInsensitiveFileStream.java: Recompile with -Xlint:deprecation for details.
[INFO] 
[INFO] --- maven-plugin-plugin:3.6.0:descriptor (default-descriptor) @ antlr4test-maven-plugin ---
[WARNING] Using platform encoding (UTF-8 actually) to read mojo source files, i.e. build is platform dependent!
[INFO] java-javadoc mojo extractor found 0 mojo descriptor.
[INFO] java-annotations mojo extractor found 1 mojo descriptor.
[INFO] 
[INFO] --- maven-plugin-plugin:3.6.0:helpmojo (help-descriptor) @ antlr4test-maven-plugin ---
[WARNING] Using platform encoding (UTF-8 actually) to read mojo source files, i.e. build is platform dependent!
[INFO] java-javadoc mojo extractor found 0 mojo descriptor.
[INFO] java-annotations mojo extractor found 1 mojo descriptor.
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ antlr4test-maven-plugin ---
[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] Copying 40 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ antlr4test-maven-plugin ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!
[INFO] Compiling 3 source files to /tmp/tmpb5in_1zy/antlr4test-maven-plugin/target/test-classes
[INFO] 
[INFO] --- maven-surefire-plugin:2.19.1:test (default-test) @ antlr4test-maven-plugin ---
[INFO] Surefire report directory: /tmp/tmpb5in_1zy/antlr4test-maven-plugin/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running com.khubla.antlr.antlr4test.AssertErrorsErrorListenerTest
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.386 sec - in com.khubla.antlr.antlr4test.AssertErrorsErrorListenerTest
Running test.com.khubla.antlr.antlr4test.TestGrammarTestMojo
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
Testing 'src/test/resources/caseInsensitive_lower-pom.xml'
[INFO] Evaluating Scenario: Default Scenario
[INFO] baseDir: /tmp/tmpb5in_1zy/antlr4test-maven-plugin
[INFO] exampleFiles: src/test/resources/examples/
[INFO] Lexer classname is: CaseInsensitive_lowerLexer
[INFO] Parser classname is: CaseInsensitive_lowerParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/CaseInsensitive.txt1
[INFO] Token List: 
[INFO] [@0,0:3='AAAA',<1>,1:0]
[INFO] [@1,5:8='aAaA',<1>,1:5]
[INFO] [@2,10:13='aaaa',<1>,1:10]
[INFO] [@3,14:13='<EOF>',<-1>,1:14]
Testing 'src/test/resources/grammarInitializer-pom.xml'
[INFO] Evaluating Scenario: Default Scenario
[INFO] baseDir: /tmp/tmpb5in_1zy/antlr4test-maven-plugin
[INFO] exampleFiles: src/test/resources/examples
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/twoplusthreeisfive.txt
[INFO] Token List: 
[INFO] [@0,0:0='(',<4>,1:0]
[INFO] [@1,1:1='S',<9>,1:1]
[INFO] [@2,2:2='S',<9>,1:2]
[INFO] [@3,3:3='0',<8>,1:3]
[INFO] [@4,5:5='+',<2>,1:5]
[INFO] [@5,7:7='S',<9>,1:7]
[INFO] [@6,8:8='S',<9>,1:8]
[INFO] [@7,9:9='S',<9>,1:9]
[INFO] [@8,10:10='0',<8>,1:10]
[INFO] [@9,11:11=')',<5>,1:11]
[INFO] [@10,13:13='=',<1>,1:13]
[INFO] [@11,15:15='S',<9>,1:15]
[INFO] [@12,16:16='S',<9>,1:16]
[INFO] [@13,17:17='S',<9>,1:17]
[INFO] [@14,18:18='S',<9>,1:18]
[INFO] [@15,19:19='S',<9>,1:19]
[INFO] [@16,20:20='0',<8>,1:20]
[INFO] [@17,21:20='<EOF>',<-1>,1:21]
[INFO] Parsed Tree: 
[INFO] (equation (expression ( (expression (expression (atom (number S S 0))) + (expression (atom (number S S S 0)))) )) = (expression (atom (number S S S S S 0))))
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/modulo.txt
line 1:7 token recognition error at: '%'
[WARNING] line 1:7 token recognition error at: '%'
[INFO] Token List: 
[INFO] [@0,0:0='S',<9>,1:0]
[INFO] [@1,1:1='S',<9>,1:1]
[INFO] [@2,2:2='S',<9>,1:2]
[INFO] [@3,3:3='S',<9>,1:3]
[INFO] [@4,4:4='S',<9>,1:4]
[INFO] [@5,5:5='0',<8>,1:5]
[INFO] [@6,9:9='S',<9>,1:9]
[INFO] [@7,10:10='S',<9>,1:10]
[INFO] [@8,11:11='0',<8>,1:11]
[INFO] [@9,13:12='<EOF>',<-1>,2:0]
line 1:9 missing '=' at 'S'
[WARNING] line 1:9 missing '=' at 'S'
[INFO] Parsed Tree: 
[INFO] (equation (expression (atom (number S S S S S 0))) <missing '='> (expression (atom (number S S 0))))
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/example3.txt
[INFO] Token List: 
[INFO] [@0,0:0='(',<4>,1:0]
[INFO] [@1,1:1='b',<11>,1:1]
[INFO] [@2,3:3='+',<2>,1:3]
[INFO] [@3,5:5='c',<12>,1:5]
[INFO] [@4,6:6=')',<5>,1:6]
[INFO] [@5,8:8='=',<1>,1:8]
[INFO] [@6,10:10='(',<4>,1:10]
[INFO] [@7,11:11='a',<10>,1:11]
[INFO] [@8,13:13='*',<3>,1:13]
[INFO] [@9,15:15='d',<13>,1:15]
[INFO] [@10,16:16=')',<5>,1:16]
[INFO] [@11,19:18='<EOF>',<-1>,3:0]
[INFO] Parsed Tree: 
[INFO] (equation (expression ( (expression (expression (atom (variable b))) + (expression (atom (variable c)))) )) = (expression ( (expression (expression (atom (variable a))) * (expression (atom (variable d)))) )))
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/twoplustwoisnotfive.txt
[INFO] Token List: 
[INFO] [@0,0:0='~',<6>,1:0]
[INFO] [@1,1:1='(',<4>,1:1]
[INFO] [@2,2:2='S',<9>,1:2]
[INFO] [@3,3:3='S',<9>,1:3]
[INFO] [@4,4:4='0',<8>,1:4]
[INFO] [@5,6:6='+',<2>,1:6]
[INFO] [@6,8:8='S',<9>,1:8]
[INFO] [@7,9:9='S',<9>,1:9]
[INFO] [@8,10:10='0',<8>,1:10]
[INFO] [@9,11:11=')',<5>,1:11]
[INFO] [@10,13:13='=',<1>,1:13]
[INFO] [@11,15:15='S',<9>,1:15]
[INFO] [@12,16:16='S',<9>,1:16]
[INFO] [@13,17:17='S',<9>,1:17]
[INFO] [@14,18:18='0',<8>,1:18]
[INFO] [@15,19:18='<EOF>',<-1>,1:19]
[INFO] Parsed Tree: 
[INFO] (equation (expression ~ (expression ( (expression (expression (atom (number S S 0))) + (expression (atom (number S S 0)))) ))) = (expression (atom (number S S S 0))))
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/onenotequaltotwo.txt
[INFO] Token List: 
[INFO] [@0,0:0='~',<6>,1:0]
[INFO] [@1,2:2='S',<9>,1:2]
[INFO] [@2,3:3='0',<8>,1:3]
[INFO] [@3,4:4='=',<1>,1:4]
[INFO] [@4,5:5='S',<9>,1:5]
[INFO] [@5,6:6='S',<9>,1:6]
[INFO] [@6,7:7='0',<8>,1:7]
[INFO] [@7,8:7='<EOF>',<-1>,1:8]
[INFO] Parsed Tree: 
[INFO] (equation (expression ~ (expression (atom (number S 0)))) = (expression (atom (number S S 0))))
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/zeronotsuccessor.txt
[INFO] Token List: 
[INFO] [@0,0:0='~',<6>,1:0]
[INFO] [@1,1:1='E',<17>,1:1]
[INFO] [@2,2:2='c',<12>,1:2]
[INFO] [@3,3:3=':',<7>,1:3]
[INFO] [@4,4:4='S',<9>,1:4]
[INFO] [@5,5:5='c',<12>,1:5]
[INFO] [@6,7:7='=',<1>,1:7]
[INFO] [@7,9:9='0',<8>,1:9]
[INFO] [@8,10:9='<EOF>',<-1>,1:10]
[INFO] Parsed Tree: 
[INFO] (equation (expression ~ (expression (exists E (variable c) :) (expression (atom (variable S c))))) = (expression (atom (number 0))))
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/example2.txt
[INFO] Token List: 
[INFO] [@0,0:0='~',<6>,1:0]
[INFO] [@1,1:1='(',<4>,1:1]
[INFO] [@2,2:2='S',<9>,1:2]
[INFO] [@3,3:3='S',<9>,1:3]
[INFO] [@4,4:4='S',<9>,1:4]
[INFO] [@5,5:5='0',<8>,1:5]
[INFO] [@6,7:7='+',<2>,1:7]
[INFO] [@7,9:9='S',<9>,1:9]
[INFO] [@8,10:10='S',<9>,1:10]
[INFO] [@9,11:11='S',<9>,1:11]
[INFO] [@10,12:12='0',<8>,1:12]
[INFO] [@11,13:13=')',<5>,1:13]
[INFO] [@12,15:15='=',<1>,1:15]
[INFO] [@13,17:17='S',<9>,1:17]
[INFO] [@14,18:18='S',<9>,1:18]
[INFO] [@15,19:19='S',<9>,1:19]
[INFO] [@16,20:20='S',<9>,1:20]
[INFO] [@17,21:21='S',<9>,1:21]
[INFO] [@18,22:22='S',<9>,1:22]
[INFO] [@19,23:23='S',<9>,1:23]
[INFO] [@20,24:24='0',<8>,1:24]
[INFO] [@21,25:24='<EOF>',<-1>,1:25]
[INFO] Parsed Tree: 
[INFO] (equation (expression ~ (expression ( (expression (expression (atom (number S S S 0))) + (expression (atom (number S S S 0)))) ))) = (expression (atom (number S S S S S S S 0))))
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/aprimeprimeequalsfive.txt
[INFO] Token List: 
[INFO] [@0,0:0='a',<10>,1:0]
[INFO] [@1,1:1=''',<15>,1:1]
[INFO] [@2,2:2=''',<15>,1:2]
[INFO] [@3,4:4='=',<1>,1:4]
[INFO] [@4,6:6='S',<9>,1:6]
[INFO] [@5,7:7='S',<9>,1:7]
[INFO] [@6,8:8='S',<9>,1:8]
[INFO] [@7,9:9='S',<9>,1:9]
[INFO] [@8,10:10='0',<8>,1:10]
[INFO] [@9,12:11='<EOF>',<-1>,2:0]
[INFO] Parsed Tree: 
[INFO] (equation (expression (atom (variable a ' '))) = (expression (atom (number S S S S 0))))
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/primes.txt
[INFO] Token List: 
[INFO] [@0,0:0='A',<16>,1:0]
[INFO] [@1,1:1='a',<10>,1:1]
[INFO] [@2,2:2=':',<7>,1:2]
[INFO] [@3,3:3='E',<17>,1:3]
[INFO] [@4,4:4='b',<11>,1:4]
[INFO] [@5,5:5=':',<7>,1:5]
[INFO] [@6,6:6='~',<6>,1:6]
[INFO] [@7,7:7='E',<17>,1:7]
[INFO] [@8,8:8='c',<12>,1:8]
[INFO] [@9,9:9=':',<7>,1:9]
[INFO] [@10,10:10='E',<17>,1:10]
[INFO] [@11,11:11='d',<13>,1:11]
[INFO] [@12,12:12=':',<7>,1:12]
[INFO] [@13,13:13='(',<4>,1:13]
[INFO] [@14,14:14='a',<10>,1:14]
[INFO] [@15,15:15='+',<2>,1:15]
[INFO] [@16,16:16='S',<9>,1:16]
[INFO] [@17,17:17='b',<11>,1:17]
[INFO] [@18,18:18=')',<5>,1:18]
[INFO] [@19,19:19='=',<1>,1:19]
[INFO] [@20,20:20='(',<4>,1:20]
[INFO] [@21,21:21='S',<9>,1:21]
[INFO] [@22,22:22='S',<9>,1:22]
[INFO] [@23,23:23='c',<12>,1:23]
[INFO] [@24,25:25='*',<3>,1:25]
[INFO] [@25,27:27='S',<9>,1:27]
[INFO] [@26,28:28='S',<9>,1:28]
[INFO] [@27,29:29='d',<13>,1:29]
[INFO] [@28,30:30=')',<5>,1:30]
[INFO] [@29,31:30='<EOF>',<-1>,1:31]
[INFO] Parsed Tree: 
[INFO] (equation (expression (forevery A (variable a) :) (expression (exists E (variable b) :) (expression ~ (expression (exists E (variable c) :) (expression (exists E (variable d) :) (expression ( (expression (expression (atom (variable a))) + (expression (atom (variable S b)))) ))))))) = (expression ( (expression (expression (atom (variable S S c))) * (expression (atom (variable S S d)))) )))
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/xplusy.txt
line 1:0 token recognition error at: 'x'
[WARNING] line 1:0 token recognition error at: 'x'
line 1:4 token recognition error at: 'y'
[WARNING] line 1:4 token recognition error at: 'y'
[INFO] Token List: 
[INFO] [@0,2:2='+',<2>,1:2]
[INFO] [@1,6:5='<EOF>',<-1>,2:0]
line 1:2 mismatched input '+' expecting {'(', '~', '0', 'S', 'a', 'b', 'c', 'd', 'e', 'A', 'E'}
[WARNING] line 1:2 mismatched input '+' expecting {'(', '~', '0', 'S', 'a', 'b', 'c', 'd', 'e', 'A', 'E'}
[INFO] Parsed Tree: 
[INFO] (equation (expression +))
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/example1.txt
[INFO] Token List: 
[INFO] [@0,0:0='(',<4>,1:0]
[INFO] [@1,1:1='S',<9>,1:1]
[INFO] [@2,2:2='S',<9>,1:2]
[INFO] [@3,3:3='S',<9>,1:3]
[INFO] [@4,4:4='0',<8>,1:4]
[INFO] [@5,6:6='+',<2>,1:6]
[INFO] [@6,8:8='S',<9>,1:8]
[INFO] [@7,9:9='S',<9>,1:9]
[INFO] [@8,10:10='S',<9>,1:10]
[INFO] [@9,11:11='0',<8>,1:11]
[INFO] [@10,12:12=')',<5>,1:12]
[INFO] [@11,14:14='=',<1>,1:14]
[INFO] [@12,16:16='S',<9>,1:16]
[INFO] [@13,17:17='S',<9>,1:17]
[INFO] [@14,18:18='S',<9>,1:18]
[INFO] [@15,19:19='S',<9>,1:19]
[INFO] [@16,20:20='S',<9>,1:20]
[INFO] [@17,21:21='S',<9>,1:21]
[INFO] [@18,22:22='0',<8>,1:22]
[INFO] [@19,24:23='<EOF>',<-1>,2:0]
[INFO] Parsed Tree: 
[INFO] (equation (expression ( (expression (expression (atom (number S S S 0))) + (expression (atom (number S S S 0)))) )) = (expression (atom (number S S S S S S 0))))
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/example4.txt
[INFO] Token List: 
[INFO] [@0,0:0='(',<4>,1:0]
[INFO] [@1,1:1='(',<4>,1:1]
[INFO] [@2,2:2='a',<10>,1:2]
[INFO] [@3,4:4='+',<2>,1:4]
[INFO] [@4,6:6='b',<11>,1:6]
[INFO] [@5,7:7=')',<5>,1:7]
[INFO] [@6,9:9='+',<2>,1:9]
[INFO] [@7,11:11='c',<12>,1:11]
[INFO] [@8,12:12=')',<5>,1:12]
[INFO] [@9,14:14='=',<1>,1:14]
[INFO] [@10,16:16='(',<4>,1:16]
[INFO] [@11,17:17='a',<10>,1:17]
[INFO] [@12,19:19='+',<2>,1:19]
[INFO] [@13,21:21='(',<4>,1:21]
[INFO] [@14,22:22='b',<11>,1:22]
[INFO] [@15,24:24='+',<2>,1:24]
[INFO] [@16,26:26='c',<12>,1:26]
[INFO] [@17,27:27=')',<5>,1:27]
[INFO] [@18,28:28=')',<5>,1:28]
[INFO] [@19,30:29='<EOF>',<-1>,2:0]
[INFO] Parsed Tree: 
[INFO] (equation (expression ( (expression (expression ( (expression (expression (atom (variable a))) + (expression (atom (variable b)))) )) + (expression (atom (variable c)))) )) = (expression ( (expression (expression (atom (variable a))) + (expression ( (expression (expression (atom (variable b))) + (expression (atom (variable c)))) ))) )))
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/commutative.txt
[INFO] Token List: 
[INFO] [@0,0:0='A',<16>,1:0]
[INFO] [@1,1:1='a',<10>,1:1]
[INFO] [@2,2:2=':',<7>,1:2]
[INFO] [@3,3:3='A',<16>,1:3]
[INFO] [@4,4:4='b',<11>,1:4]
[INFO] [@5,5:5=':',<7>,1:5]
[INFO] [@6,6:6='(',<4>,1:6]
[INFO] [@7,7:7='a',<10>,1:7]
[INFO] [@8,9:9='+',<2>,1:9]
[INFO] [@9,11:11='b',<11>,1:11]
[INFO] [@10,12:12=')',<5>,1:12]
[INFO] [@11,14:14='=',<1>,1:14]
[INFO] [@12,16:16='(',<4>,1:16]
[INFO] [@13,17:17='b',<11>,1:17]
[INFO] [@14,19:19='+',<2>,1:19]
[INFO] [@15,21:21='a',<10>,1:21]
[INFO] [@16,22:22=')',<5>,1:22]
[INFO] [@17,23:22='<EOF>',<-1>,1:23]
[INFO] Parsed Tree: 
[INFO] (equation (expression (forevery A (variable a) :) (expression (forevery A (variable b) :) (expression ( (expression (expression (atom (variable a))) + (expression (atom (variable b)))) )))) = (expression ( (expression (expression (atom (variable b))) + (expression (atom (variable a)))) )))
Testing 'src/test/resources/caseInsensitive_UPPER-pom.xml'
[INFO] Evaluating Scenario: Default Scenario
[INFO] baseDir: /tmp/tmpb5in_1zy/antlr4test-maven-plugin
[INFO] exampleFiles: src/test/resources/examples/
[INFO] Lexer classname is: CaseInsensitive_UPPERLexer
[INFO] Parser classname is: CaseInsensitive_UPPERParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/CaseInsensitive.txt1
[INFO] Token List: 
[INFO] [@0,0:3='AAAA',<1>,1:0]
[INFO] [@1,5:8='aAaA',<1>,1:5]
[INFO] [@2,10:13='aaaa',<1>,1:10]
[INFO] [@3,14:13='<EOF>',<-1>,1:14]
Testing 'src/test/resources/generic-pom.xml'
[INFO] Evaluating Scenario: Default Scenario
[INFO] baseDir: /tmp/tmpb5in_1zy/antlr4test-maven-plugin
[INFO] exampleFiles: src/test/resources/examples
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/twoplusthreeisfive.txt
[INFO] Token List: 
[INFO] [@0,0:0='(',<4>,1:0]
[INFO] [@1,1:1='S',<9>,1:1]
[INFO] [@2,2:2='S',<9>,1:2]
[INFO] [@3,3:3='0',<8>,1:3]
[INFO] [@4,5:5='+',<2>,1:5]
[INFO] [@5,7:7='S',<9>,1:7]
[INFO] [@6,8:8='S',<9>,1:8]
[INFO] [@7,9:9='S',<9>,1:9]
[INFO] [@8,10:10='0',<8>,1:10]
[INFO] [@9,11:11=')',<5>,1:11]
[INFO] [@10,13:13='=',<1>,1:13]
[INFO] [@11,15:15='S',<9>,1:15]
[INFO] [@12,16:16='S',<9>,1:16]
[INFO] [@13,17:17='S',<9>,1:17]
[INFO] [@14,18:18='S',<9>,1:18]
[INFO] [@15,19:19='S',<9>,1:19]
[INFO] [@16,20:20='0',<8>,1:20]
[INFO] [@17,21:20='<EOF>',<-1>,1:21]
[INFO] Parsed Tree: 
[INFO] (equation (expression ( (expression (expression (atom (number S S 0))) + (expression (atom (number S S S 0)))) )) = (expression (atom (number S S S S S 0))))
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/modulo.txt
line 1:7 token recognition error at: '%'
[WARNING] line 1:7 token recognition error at: '%'
[INFO] Token List: 
[INFO] [@0,0:0='S',<9>,1:0]
[INFO] [@1,1:1='S',<9>,1:1]
[INFO] [@2,2:2='S',<9>,1:2]
[INFO] [@3,3:3='S',<9>,1:3]
[INFO] [@4,4:4='S',<9>,1:4]
[INFO] [@5,5:5='0',<8>,1:5]
[INFO] [@6,9:9='S',<9>,1:9]
[INFO] [@7,10:10='S',<9>,1:10]
[INFO] [@8,11:11='0',<8>,1:11]
[INFO] [@9,13:12='<EOF>',<-1>,2:0]
line 1:9 missing '=' at 'S'
[WARNING] line 1:9 missing '=' at 'S'
[INFO] Parsed Tree: 
[INFO] (equation (expression (atom (number S S S S S 0))) <missing '='> (expression (atom (number S S 0))))
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/example3.txt
[INFO] Token List: 
[INFO] [@0,0:0='(',<4>,1:0]
[INFO] [@1,1:1='b',<11>,1:1]
[INFO] [@2,3:3='+',<2>,1:3]
[INFO] [@3,5:5='c',<12>,1:5]
[INFO] [@4,6:6=')',<5>,1:6]
[INFO] [@5,8:8='=',<1>,1:8]
[INFO] [@6,10:10='(',<4>,1:10]
[INFO] [@7,11:11='a',<10>,1:11]
[INFO] [@8,13:13='*',<3>,1:13]
[INFO] [@9,15:15='d',<13>,1:15]
[INFO] [@10,16:16=')',<5>,1:16]
[INFO] [@11,19:18='<EOF>',<-1>,3:0]
[INFO] Parsed Tree: 
[INFO] (equation (expression ( (expression (expression (atom (variable b))) + (expression (atom (variable c)))) )) = (expression ( (expression (expression (atom (variable a))) * (expression (atom (variable d)))) )))
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/twoplustwoisnotfive.txt
[INFO] Token List: 
[INFO] [@0,0:0='~',<6>,1:0]
[INFO] [@1,1:1='(',<4>,1:1]
[INFO] [@2,2:2='S',<9>,1:2]
[INFO] [@3,3:3='S',<9>,1:3]
[INFO] [@4,4:4='0',<8>,1:4]
[INFO] [@5,6:6='+',<2>,1:6]
[INFO] [@6,8:8='S',<9>,1:8]
[INFO] [@7,9:9='S',<9>,1:9]
[INFO] [@8,10:10='0',<8>,1:10]
[INFO] [@9,11:11=')',<5>,1:11]
[INFO] [@10,13:13='=',<1>,1:13]
[INFO] [@11,15:15='S',<9>,1:15]
[INFO] [@12,16:16='S',<9>,1:16]
[INFO] [@13,17:17='S',<9>,1:17]
[INFO] [@14,18:18='0',<8>,1:18]
[INFO] [@15,19:18='<EOF>',<-1>,1:19]
[INFO] Parsed Tree: 
[INFO] (equation (expression ~ (expression ( (expression (expression (atom (number S S 0))) + (expression (atom (number S S 0)))) ))) = (expression (atom (number S S S 0))))
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/onenotequaltotwo.txt
[INFO] Token List: 
[INFO] [@0,0:0='~',<6>,1:0]
[INFO] [@1,2:2='S',<9>,1:2]
[INFO] [@2,3:3='0',<8>,1:3]
[INFO] [@3,4:4='=',<1>,1:4]
[INFO] [@4,5:5='S',<9>,1:5]
[INFO] [@5,6:6='S',<9>,1:6]
[INFO] [@6,7:7='0',<8>,1:7]
[INFO] [@7,8:7='<EOF>',<-1>,1:8]
[INFO] Parsed Tree: 
[INFO] (equation (expression ~ (expression (atom (number S 0)))) = (expression (atom (number S S 0))))
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/zeronotsuccessor.txt
[INFO] Token List: 
[INFO] [@0,0:0='~',<6>,1:0]
[INFO] [@1,1:1='E',<17>,1:1]
[INFO] [@2,2:2='c',<12>,1:2]
[INFO] [@3,3:3=':',<7>,1:3]
[INFO] [@4,4:4='S',<9>,1:4]
[INFO] [@5,5:5='c',<12>,1:5]
[INFO] [@6,7:7='=',<1>,1:7]
[INFO] [@7,9:9='0',<8>,1:9]
[INFO] [@8,10:9='<EOF>',<-1>,1:10]
[INFO] Parsed Tree: 
[INFO] (equation (expression ~ (expression (exists E (variable c) :) (expression (atom (variable S c))))) = (expression (atom (number 0))))
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/example2.txt
[INFO] Token List: 
[INFO] [@0,0:0='~',<6>,1:0]
[INFO] [@1,1:1='(',<4>,1:1]
[INFO] [@2,2:2='S',<9>,1:2]
[INFO] [@3,3:3='S',<9>,1:3]
[INFO] [@4,4:4='S',<9>,1:4]
[INFO] [@5,5:5='0',<8>,1:5]
[INFO] [@6,7:7='+',<2>,1:7]
[INFO] [@7,9:9='S',<9>,1:9]
[INFO] [@8,10:10='S',<9>,1:10]
[INFO] [@9,11:11='S',<9>,1:11]
[INFO] [@10,12:12='0',<8>,1:12]
[INFO] [@11,13:13=')',<5>,1:13]
[INFO] [@12,15:15='=',<1>,1:15]
[INFO] [@13,17:17='S',<9>,1:17]
[INFO] [@14,18:18='S',<9>,1:18]
[INFO] [@15,19:19='S',<9>,1:19]
[INFO] [@16,20:20='S',<9>,1:20]
[INFO] [@17,21:21='S',<9>,1:21]
[INFO] [@18,22:22='S',<9>,1:22]
[INFO] [@19,23:23='S',<9>,1:23]
[INFO] [@20,24:24='0',<8>,1:24]
[INFO] [@21,25:24='<EOF>',<-1>,1:25]
[INFO] Parsed Tree: 
[INFO] (equation (expression ~ (expression ( (expression (expression (atom (number S S S 0))) + (expression (atom (number S S S 0)))) ))) = (expression (atom (number S S S S S S S 0))))
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/aprimeprimeequalsfive.txt
[INFO] Token List: 
[INFO] [@0,0:0='a',<10>,1:0]
[INFO] [@1,1:1=''',<15>,1:1]
[INFO] [@2,2:2=''',<15>,1:2]
[INFO] [@3,4:4='=',<1>,1:4]
[INFO] [@4,6:6='S',<9>,1:6]
[INFO] [@5,7:7='S',<9>,1:7]
[INFO] [@6,8:8='S',<9>,1:8]
[INFO] [@7,9:9='S',<9>,1:9]
[INFO] [@8,10:10='0',<8>,1:10]
[INFO] [@9,12:11='<EOF>',<-1>,2:0]
[INFO] Parsed Tree: 
[INFO] (equation (expression (atom (variable a ' '))) = (expression (atom (number S S S S 0))))
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/primes.txt
[INFO] Token List: 
[INFO] [@0,0:0='A',<16>,1:0]
[INFO] [@1,1:1='a',<10>,1:1]
[INFO] [@2,2:2=':',<7>,1:2]
[INFO] [@3,3:3='E',<17>,1:3]
[INFO] [@4,4:4='b',<11>,1:4]
[INFO] [@5,5:5=':',<7>,1:5]
[INFO] [@6,6:6='~',<6>,1:6]
[INFO] [@7,7:7='E',<17>,1:7]
[INFO] [@8,8:8='c',<12>,1:8]
[INFO] [@9,9:9=':',<7>,1:9]
[INFO] [@10,10:10='E',<17>,1:10]
[INFO] [@11,11:11='d',<13>,1:11]
[INFO] [@12,12:12=':',<7>,1:12]
[INFO] [@13,13:13='(',<4>,1:13]
[INFO] [@14,14:14='a',<10>,1:14]
[INFO] [@15,15:15='+',<2>,1:15]
[INFO] [@16,16:16='S',<9>,1:16]
[INFO] [@17,17:17='b',<11>,1:17]
[INFO] [@18,18:18=')',<5>,1:18]
[INFO] [@19,19:19='=',<1>,1:19]
[INFO] [@20,20:20='(',<4>,1:20]
[INFO] [@21,21:21='S',<9>,1:21]
[INFO] [@22,22:22='S',<9>,1:22]
[INFO] [@23,23:23='c',<12>,1:23]
[INFO] [@24,25:25='*',<3>,1:25]
[INFO] [@25,27:27='S',<9>,1:27]
[INFO] [@26,28:28='S',<9>,1:28]
[INFO] [@27,29:29='d',<13>,1:29]
[INFO] [@28,30:30=')',<5>,1:30]
[INFO] [@29,31:30='<EOF>',<-1>,1:31]
[INFO] Parsed Tree: 
[INFO] (equation (expression (forevery A (variable a) :) (expression (exists E (variable b) :) (expression ~ (expression (exists E (variable c) :) (expression (exists E (variable d) :) (expression ( (expression (expression (atom (variable a))) + (expression (atom (variable S b)))) ))))))) = (expression ( (expression (expression (atom (variable S S c))) * (expression (atom (variable S S d)))) )))
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/xplusy.txt
line 1:0 token recognition error at: 'x'
[WARNING] line 1:0 token recognition error at: 'x'
line 1:4 token recognition error at: 'y'
[WARNING] line 1:4 token recognition error at: 'y'
[INFO] Token List: 
[INFO] [@0,2:2='+',<2>,1:2]
[INFO] [@1,6:5='<EOF>',<-1>,2:0]
line 1:2 mismatched input '+' expecting {'(', '~', '0', 'S', 'a', 'b', 'c', 'd', 'e', 'A', 'E'}
[WARNING] line 1:2 mismatched input '+' expecting {'(', '~', '0', 'S', 'a', 'b', 'c', 'd', 'e', 'A', 'E'}
[INFO] Parsed Tree: 
[INFO] (equation (expression +))
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/example1.txt
[INFO] Token List: 
[INFO] [@0,0:0='(',<4>,1:0]
[INFO] [@1,1:1='S',<9>,1:1]
[INFO] [@2,2:2='S',<9>,1:2]
[INFO] [@3,3:3='S',<9>,1:3]
[INFO] [@4,4:4='0',<8>,1:4]
[INFO] [@5,6:6='+',<2>,1:6]
[INFO] [@6,8:8='S',<9>,1:8]
[INFO] [@7,9:9='S',<9>,1:9]
[INFO] [@8,10:10='S',<9>,1:10]
[INFO] [@9,11:11='0',<8>,1:11]
[INFO] [@10,12:12=')',<5>,1:12]
[INFO] [@11,14:14='=',<1>,1:14]
[INFO] [@12,16:16='S',<9>,1:16]
[INFO] [@13,17:17='S',<9>,1:17]
[INFO] [@14,18:18='S',<9>,1:18]
[INFO] [@15,19:19='S',<9>,1:19]
[INFO] [@16,20:20='S',<9>,1:20]
[INFO] [@17,21:21='S',<9>,1:21]
[INFO] [@18,22:22='0',<8>,1:22]
[INFO] [@19,24:23='<EOF>',<-1>,2:0]
[INFO] Parsed Tree: 
[INFO] (equation (expression ( (expression (expression (atom (number S S S 0))) + (expression (atom (number S S S 0)))) )) = (expression (atom (number S S S S S S 0))))
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/example4.txt
[INFO] Token List: 
[INFO] [@0,0:0='(',<4>,1:0]
[INFO] [@1,1:1='(',<4>,1:1]
[INFO] [@2,2:2='a',<10>,1:2]
[INFO] [@3,4:4='+',<2>,1:4]
[INFO] [@4,6:6='b',<11>,1:6]
[INFO] [@5,7:7=')',<5>,1:7]
[INFO] [@6,9:9='+',<2>,1:9]
[INFO] [@7,11:11='c',<12>,1:11]
[INFO] [@8,12:12=')',<5>,1:12]
[INFO] [@9,14:14='=',<1>,1:14]
[INFO] [@10,16:16='(',<4>,1:16]
[INFO] [@11,17:17='a',<10>,1:17]
[INFO] [@12,19:19='+',<2>,1:19]
[INFO] [@13,21:21='(',<4>,1:21]
[INFO] [@14,22:22='b',<11>,1:22]
[INFO] [@15,24:24='+',<2>,1:24]
[INFO] [@16,26:26='c',<12>,1:26]
[INFO] [@17,27:27=')',<5>,1:27]
[INFO] [@18,28:28=')',<5>,1:28]
[INFO] [@19,30:29='<EOF>',<-1>,2:0]
[INFO] Parsed Tree: 
[INFO] (equation (expression ( (expression (expression ( (expression (expression (atom (variable a))) + (expression (atom (variable b)))) )) + (expression (atom (variable c)))) )) = (expression ( (expression (expression (atom (variable a))) + (expression ( (expression (expression (atom (variable b))) + (expression (atom (variable c)))) ))) )))
[INFO] Lexer classname is: tntLexer
[INFO] Parser classname is: tntParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/src/test/resources/examples/commutative.txt
[INFO] Token List: 
[INFO] [@0,0:0='A',<16>,1:0]
[INFO] [@1,1:1='a',<10>,1:1]
[INFO] [@2,2:2=':',<7>,1:2]
[INFO] [@3,3:3='A',<16>,1:3]
[INFO] [@4,4:4='b',<11>,1:4]
[INFO] [@5,5:5=':',<7>,1:5]
[INFO] [@6,6:6='(',<4>,1:6]
[INFO] [@7,7:7='a',<10>,1:7]
[INFO] [@8,9:9='+',<2>,1:9]
[INFO] [@9,11:11='b',<11>,1:11]
[INFO] [@10,12:12=')',<5>,1:12]
[INFO] [@11,14:14='=',<1>,1:14]
[INFO] [@12,16:16='(',<4>,1:16]
[INFO] [@13,17:17='b',<11>,1:17]
[INFO] [@14,19:19='+',<2>,1:19]
[INFO] [@15,21:21='a',<10>,1:21]
[INFO] [@16,22:22=')',<5>,1:22]
[INFO] [@17,23:22='<EOF>',<-1>,1:23]
[INFO] Parsed Tree: 
[INFO] (equation (expression (forevery A (variable a) :) (expression (forevery A (variable b) :) (expression ( (expression (expression (atom (variable a))) + (expression (atom (variable b)))) )))) = (expression ( (expression (expression (atom (variable b))) + (expression (atom (variable a)))) )))
Testing 'src/test/resources/scenarios-pom.xml'
[INFO] Evaluating Scenario: generic-pom
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/./src/test/resources/examples/twoplusthreeisfive.txt
[INFO] Parsed Tree: 
[INFO] (equation (expression ( (expression (expression (atom (number S S 0))) + (expression (atom (number S S S 0)))) )) = (expression (atom (number S S S S S 0))))
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/./src/test/resources/examples/modulo.txt
line 1:7 token recognition error at: '%'
line 1:9 missing '=' at 'S'
[INFO] Parsed Tree: 
[INFO] (equation (expression (atom (number S S S S S 0))) <missing '='> (expression (atom (number S S 0))))
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/./src/test/resources/examples/example3.txt
[INFO] Parsed Tree: 
[INFO] (equation (expression ( (expression (expression (atom (variable b))) + (expression (atom (variable c)))) )) = (expression ( (expression (expression (atom (variable a))) * (expression (atom (variable d)))) )))
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/./src/test/resources/examples/twoplustwoisnotfive.txt
[INFO] Parsed Tree: 
[INFO] (equation (expression ~ (expression ( (expression (expression (atom (number S S 0))) + (expression (atom (number S S 0)))) ))) = (expression (atom (number S S S 0))))
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/./src/test/resources/examples/onenotequaltotwo.txt
[INFO] Parsed Tree: 
[INFO] (equation (expression ~ (expression (atom (number S 0)))) = (expression (atom (number S S 0))))
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/./src/test/resources/examples/zeronotsuccessor.txt
[INFO] Parsed Tree: 
[INFO] (equation (expression ~ (expression (exists E (variable c) :) (expression (atom (variable S c))))) = (expression (atom (number 0))))
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/./src/test/resources/examples/example2.txt
[INFO] Parsed Tree: 
[INFO] (equation (expression ~ (expression ( (expression (expression (atom (number S S S 0))) + (expression (atom (number S S S 0)))) ))) = (expression (atom (number S S S S S S S 0))))
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/./src/test/resources/examples/aprimeprimeequalsfive.txt
[INFO] Parsed Tree: 
[INFO] (equation (expression (atom (variable a ' '))) = (expression (atom (number S S S S 0))))
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/./src/test/resources/examples/primes.txt
[INFO] Parsed Tree: 
[INFO] (equation (expression (forevery A (variable a) :) (expression (exists E (variable b) :) (expression ~ (expression (exists E (variable c) :) (expression (exists E (variable d) :) (expression ( (expression (expression (atom (variable a))) + (expression (atom (variable S b)))) ))))))) = (expression ( (expression (expression (atom (variable S S c))) * (expression (atom (variable S S d)))) )))
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/./src/test/resources/examples/xplusy.txt
line 1:0 token recognition error at: 'x'
line 1:4 token recognition error at: 'y'
line 1:2 mismatched input '+' expecting {'(', '~', '0', 'S', 'a', 'b', 'c', 'd', 'e', 'A', 'E'}
[INFO] Parsed Tree: 
[INFO] (equation (expression +))
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/./src/test/resources/examples/example1.txt
[INFO] Parsed Tree: 
[INFO] (equation (expression ( (expression (expression (atom (number S S S 0))) + (expression (atom (number S S S 0)))) )) = (expression (atom (number S S S S S S 0))))
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/./src/test/resources/examples/example4.txt
[INFO] Parsed Tree: 
[INFO] (equation (expression ( (expression (expression ( (expression (expression (atom (variable a))) + (expression (atom (variable b)))) )) + (expression (atom (variable c)))) )) = (expression ( (expression (expression (atom (variable a))) + (expression ( (expression (expression (atom (variable b))) + (expression (atom (variable c)))) ))) )))
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/./src/test/resources/examples/commutative.txt
[INFO] Parsed Tree: 
[INFO] (equation (expression (forevery A (variable a) :) (expression (forevery A (variable b) :) (expression ( (expression (expression (atom (variable a))) + (expression (atom (variable b)))) )))) = (expression ( (expression (expression (atom (variable b))) + (expression (atom (variable a)))) )))
[INFO] Evaluating Scenario: CaseInsensitive_UPPER
[WARNING] Scenario CaseInsensitive_UPPER is disabled. Skipping.
[INFO] Evaluating Scenario: CaseInsensitive_lower
[INFO] baseDir: .
[INFO] exampleFiles: src/test/resources/examples/
[WARNING] Scenario CaseInsensitive_lower is disabled. Skipping.
[INFO] Evaluating Scenario: Package-Without-Initialization
[INFO] baseDir: .
[INFO] exampleFiles: src/test/resources/scenarioNoInitialization/
[INFO] Lexer classname is: dummy.TestGrammarLexer
[INFO] Parser classname is: dummy.TestGrammarParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/./src/test/resources/scenarioNoInitialization/myAttribList.txt
[INFO] Token List: 
[INFO] [@0,0:4='MyVar',<9>,1:0]
[INFO] [@1,5:5=' ',<8>,channel=1,1:5]
[INFO] [@2,6:6='=',<1>,1:6]
[INFO] [@3,7:7=' ',<8>,channel=1,1:7]
[INFO] [@4,8:9='FA',<2>,1:8]
[INFO] [@5,10:10='(',<6>,1:10]
[INFO] [@6,11:11=')',<7>,1:11]
[INFO] [@7,12:12='\n',<8>,channel=1,1:12]
[INFO] [@8,13:14='FB',<9>,2:0]
[INFO] [@9,15:15=' ',<8>,channel=1,2:2]
[INFO] [@10,16:16='=',<1>,2:3]
[INFO] [@11,17:17=' ',<8>,channel=1,2:4]
[INFO] [@12,18:19='FA',<2>,2:5]
[INFO] [@13,20:20='(',<6>,2:7]
[INFO] [@14,21:25='MyVar',<9>,2:8]
[INFO] [@15,26:26=')',<7>,2:13]
[INFO] [@16,27:27='\n',<8>,channel=1,2:14]
[INFO] [@17,28:32='MyVar',<9>,3:0]
[INFO] [@18,33:33=' ',<8>,channel=1,3:5]
[INFO] [@19,34:34='=',<1>,3:6]
[INFO] [@20,35:35=' ',<8>,channel=1,3:7]
[INFO] [@21,36:37='FC',<4>,3:8]
[INFO] [@22,38:38='(',<6>,3:10]
[INFO] [@23,39:39=')',<7>,3:11]
[INFO] [@24,40:40='\n',<8>,channel=1,3:12]
[INFO] [@25,41:42='FD',<9>,4:0]
[INFO] [@26,43:43=' ',<8>,channel=1,4:2]
[INFO] [@27,44:44='=',<1>,4:3]
[INFO] [@28,45:45=' ',<8>,channel=1,4:4]
[INFO] [@29,46:47='FC',<9>,4:5]
[INFO] [@30,48:48=' ',<8>,channel=1,4:7]
[INFO] [@31,49:49=' ',<8>,channel=1,4:8]
[INFO] [@32,50:50='(',<6>,4:9]
[INFO] [@33,51:55='MyVar',<9>,4:10]
[INFO] [@34,56:56=')',<7>,4:15]
[INFO] [@35,57:56='<EOF>',<-1>,4:16]
line 4:5 mismatched input 'FC' expecting {FA, FB, FC, FD}
[WARNING] line 4:5 mismatched input 'FC' expecting {FA, FB, FC, FD}
[INFO] Parsed Tree: 
[INFO] (attrib_list (attrib (variable_name MyVar) = (function FA) ( )) (attrib (variable_name FB) = (function FA) ( (variable_name MyVar) )) (attrib (variable_name MyVar) = (function FC) ( )) (attrib (variable_name FD) = function FC ( (variable_name MyVar) )) <EOF>)
[INFO] Parse tree for 'myAttribList.txt' matches 'myAttribList.txt.tree'
[INFO] Evaluating Scenario: Package-Initialize-IgnoreSpaces
[INFO] baseDir: .
[INFO] exampleFiles: src/test/resources/scenarioInitializeIgnoreSpaces/
[INFO] Lexer classname is: dummy.TestGrammarLexer
[INFO] Parser classname is: dummy.TestGrammarParser
[INFO] Parsing :/tmp/tmpb5in_1zy/antlr4test-maven-plugin/./src/test/resources/scenarioInitializeIgnoreSpaces/myAttribList.txt
[INFO] dummy.TestGrammarInitializer
[INFO] Token List: 
[INFO] [@0,0:4='MyVar',<9>,1:0]
[INFO] [@1,5:5=' ',<8>,channel=1,1:5]
[INFO] [@2,6:6='=',<1>,1:6]
[INFO] [@3,7:7=' ',<8>,channel=1,1:7]
[INFO] [@4,8:9='FA',<2>,1:8]
[INFO] [@5,10:10='(',<6>,1:10]
[INFO] [@6,11:11=')',<7>,1:11]
[INFO] [@7,12:12='\n',<8>,channel=1,1:12]
[INFO] [@8,13:14='FB',<9>,2:0]
[INFO] [@9,15:15=' ',<8>,channel=1,2:2]
[INFO] [@10,16:16='=',<1>,2:3]
[INFO] [@11,17:17=' ',<8>,channel=1,2:4]
[INFO] [@12,18:19='FA',<2>,2:5]
[INFO] [@13,20:20='(',<6>,2:7]
[INFO] [@14,21:25='MyVar',<9>,2:8]
[INFO] [@15,26:26=')',<7>,2:13]
[INFO] [@16,27:27='\n',<8>,channel=1,2:14]
[INFO] [@17,28:32='MyVar',<9>,3:0]
[INFO] [@18,33:33=' ',<8>,channel=1,3:5]
[INFO] [@19,34:34='=',<1>,3:6]
[INFO] [@20,35:35=' ',<8>,channel=1,3:7]
[INFO] [@21,36:37='FC',<4>,3:8]
[INFO] [@22,38:38='(',<6>,3:10]
[INFO] [@23,39:39=')',<7>,3:11]
[INFO] [@24,40:40='\n',<8>,channel=1,3:12]
[INFO] [@25,41:42='FD',<9>,4:0]
[INFO] [@26,43:43=' ',<8>,channel=1,4:2]
[INFO] [@27,44:44='=',<1>,4:3]
[INFO] [@28,45:45=' ',<8>,channel=1,4:4]
[INFO] [@29,46:47='FC',<4>,4:5]
[INFO] [@30,48:48=' ',<8>,channel=1,4:7]
[INFO] [@31,49:49=' ',<8>,channel=1,4:8]
[INFO] [@32,50:50='(',<6>,4:9]
[INFO] [@33,51:55='MyVar',<9>,4:10]
[INFO] [@34,56:56=')',<7>,4:15]
[INFO] [@35,57:56='<EOF>',<-1>,4:16]
[INFO] Parsed Tree: 
[INFO] (attrib_list (attrib (variable_name MyVar) = (function FA) ( )) (attrib (variable_name FB) = (function FA) ( (variable_name MyVar) )) (attrib (variable_name MyVar) = (function FC) ( )) (attrib (variable_name FD) = (function FC) ( (variable_name MyVar) )) <EOF>)
[INFO] Parse tree for 'myAttribList.txt' matches 'myAttribList.txt.tree'
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 12.159 sec - in test.com.khubla.antlr.antlr4test.TestGrammarTestMojo

Results :

Tests run: 16, Failures: 0, Errors: 0, Skipped: 0

[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.5:report (report) @ antlr4test-maven-plugin ---
[INFO] Loading execution data file /tmp/tmpb5in_1zy/antlr4test-maven-plugin/target/jacoco.exec
[INFO] Analyzed bundle 'khubla.com Antlr4 test mojo' with 156 classes
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  26.000 s
[INFO] Finished at: 2020-07-30T21:14:47Z
[INFO] ------------------------------------------------------------------------
