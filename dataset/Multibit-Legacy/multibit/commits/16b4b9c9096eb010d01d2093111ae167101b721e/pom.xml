<project xmlns="http:/f/maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.multibit</groupId>
  <artifactId>multibit</artifactId>
  <version>0.1.4-SNAPSHOT</version>
  <name>MultiBit</name>
  <description>A Java swing client for bitcoin</description>
  <url>http://www.multibit.org</url> 
    <!-- 

       Use "mvn clean package" to build the generic installer
       Use "mvn clean install" to build the Mac installer
       (The reason the Mac installer is in the wrong phase is that it is in a profile
        and uses the generic installer as input.  
        I cannot get it to run after the generic installer create in the 'package' phase as it appears first in the pom)
 
       Use "mvn clean verify" before submitting a patch

       Use "mvn site:site" to generate a complete website under target/site
       Use "mvn site:run" to run a local webserver localhost:8080/index.html

       -->
  
  <licenses>
    <license>
      <name>MIT</name>
      <url>http://www.opensource.org/licenses/mit-license.php</url>
      <distribution>repo</distribution>
      <comments>A business-friendly OSS license</comments>
    </license>
  </licenses> 
  <issueManagement>
    <system>GitHub</system>
    <url>https://github.com/jim618/multibit/issues</url>
  </issueManagement>
  <scm>
    <!-- Public read-only source -->
    <url>https://github.com/jim618/multibit</url>
  </scm>
  <profiles>
    <!-- create a Mac bundle from the generic IzPack installer - currently only working in a Mac profile -->
    <profile>
      <id>izpack-app-mac</id>
      <activation>
        <activeByDefault>false</activeByDefault>
        <os>
          <family>mac</family>
        </os>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <id>IzPack-Platform-Executable</id>
                <phase>install</phase>
                <configuration>
                  <tasks>
                    <exec executable="python" dir="${project.build.directory}">
                      <arg value="${staging.dir}/izpack2app/izpack2app.py" />
                      <arg value="${project.build.directory}/${project.build.finalName}-installer.jar" /> 
                      <arg value="${project.build.directory}/${project.build.finalName}-installer.app" /> 
                    </exec>
                    <exec executable="chmod" dir="${project.build.directory}">
                      <arg value="+x" />
                      <arg value="${project.build.directory}/${project.build.finalName}-installer.app//Contents/macos/JavaApplicationStub" /> 
                    </exec>         
                  </tasks>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
  <repositories>
    <repository>
      <id>bitcoinj-release</id>
      <url>http://nexus.bitcoinj.org/content/repositories/releases</url>
      <releases/>
    </repository>
  </repositories>
  <build>  
    <finalName>multibit</finalName>
    <plugins>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>2.3.2</version>
        <configuration>
          <source>1.6</source>
          <target>1.6</target>
        </configuration>
      </plugin>

      <!-- Put izPack2app into staging dir for production of installer later -->
      <plugin>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>unpack-shared-resources-ipack2app</id>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <phase>package</phase>
            <configuration>
              <includeGroupIds>org.codehaus.izpack</includeGroupIds>
              <includeArtifacIds>izpack-standalone-compiler</includeArtifacIds>
              <classifier>izpack2app</classifier>
              <type>zip</type>
              <excludeTransitive>true</excludeTransitive>
              <outputDirectory>${staging.dir}</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>  
            
      <!-- Create executable jar -->
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>2.2.1</version>
        <configuration>
          <descriptors>
            <descriptor>src/assemble/executable-jar.xml</descriptor>
          </descriptors>
          <archive>
            <manifestFile>src/main/resources/META-INF/MANIFEST.MF</manifestFile>
           </archive>
         </configuration>
         <executions>
            <execution>
              <id>make-assembly</id> 
              <phase>package</phase>
              <goals>
                <goal>single</goal>
              </goals>
          </execution>
         </executions>
       </plugin>
       
       <!-- Produce staging directory with all resources used in creation of the IzPack installer -->
       <plugin>
         <artifactId>maven-resources-plugin</artifactId>
         <version>2.5</version>
         <executions>
           <execution>
             <id>copy-resources-to-staging</id>
             <phase>package</phase>
             <goals>
               <goal>copy-resources</goal>
             </goals>
             <configuration>
               <outputDirectory>${basedir}/target/staging</outputDirectory>
               <resources>          
                 <resource>
                   <directory>src/main/izpack</directory>
                   <includes>
                     <include>readme.txt</include>
                     <include>install.xml</include>
                     <include>log4j.xml</include>
                     <include>multibit.properties</include>
                   </includes>
                 </resource>
                 <resource>
                   <directory>.</directory>
                   <includes>
                     <include>multibit.blockchain</include>
                     <include>release_notes.txt</include>
                     <include>COPYING</include>
                   </includes>
                 </resource>
                <resource>
                   <directory>target</directory>
                   <includes>
                     <include>multibit-executableJar.jar</include>
                   </includes>
                 </resource>
               </resources>              
             </configuration>            
           </execution>
         </executions>
       </plugin>  
          
      <!-- Produce IzPack installer from contents of staging directory -->
      <plugin>
        <groupId>org.codehaus.izpack</groupId>
        <artifactId>izpack-maven-plugin</artifactId>
        <version>1.0-alpha-5</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>izpack</goal>
            </goals>
            <configuration>
              <izpackBasedir>${staging.dir}</izpackBasedir>
              <installerFile>target/${project.build.finalName}-installer.jar</installerFile>
            </configuration>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>org.codehaus.izpack</groupId>
            <artifactId>izpack-standalone-compiler</artifactId>
            <version>4.3.4</version>
          </dependency>
        </dependencies>
      </plugin> 
      
      <!-- Produce a Win32 exe from the generic installer (no Maven plugin for JSmooth so drop down to ant -->
      <plugin>
         <artifactId>maven-antrun-plugin</artifactId>
         <executions>
           <execution>
             <id>jsmooth-installer2exe</id>
             <phase>package</phase>
             <configuration>
               <tasks>
                 <path id="jsmooth-classpathref">
                   <pathelement path="src/main/jsmooth/lib/jsmoothgen.jar"/>
                   <pathelement path="src/main/jsmooth/lib/jsmoothgen-ant.jar"/>
                 </path>
                 <taskdef name="jsmoothgen" classname="net.charabia.jsmoothgen.ant.JSmoothGen" classpathref="jsmooth-classpathref"/>
                 <jsmoothgen project="installer.jsmooth" skeletonroot="src/main/jsmooth/skeletons"/> 
               </tasks>
             </configuration>
             <goals>
               <goal>run</goal>
             </goals>
           </execution>         
         </executions>
      </plugin> 
    </plugins>    
 </build>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.8.2</version>
      <type>jar</type>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>1.6.2</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <version>1.6.2</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.bouncycastle</groupId>
      <artifactId>bcprov-jdk15</artifactId>
      <version>1.46</version>
      <type>jar</type>
      <scope>compile</scope>
     </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>apache-log4j-extras</artifactId>
      <version>1.0</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>com.google.zxing</groupId>
      <artifactId>zxing-javase</artifactId>
      <version>1.7</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.izpack</groupId>
      <artifactId>izpack-standalone-compiler</artifactId>
      <version>4.3.4</version>
    </dependency>
  </dependencies>
  <properties>
    <!-- Source encoding -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    
    <!-- Location of staging directory for creation of IzPack installer -->
    <staging.dir>${project.build.directory}/staging</staging.dir>
  </properties>
</project>