<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" name="TestSuite" time="3.11" tests="265" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="sun.boot.library.path" value="/usr/local/openjdk-8/jre/lib/amd64"/>
    <property name="java.vm.version" value="25.262-b10"/>
    <property name="animal.sniffer.skip" value="true"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="maven.multiModuleProjectDirectory" value="/tmp/tmputricfp7/storm-benchmark"/>
    <property name="maven.javadoc.skip" value="true"/>
    <property name="java.vendor.url" value="http://java.oracle.com/"/>
    <property name="path.separator" value=":"/>
    <property name="guice.disable.misplaced.annotation.check" value="true"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="file.encoding.pkg" value="sun.io"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.os.patch.level" value="unknown"/>
    <property name="source.skip" value="true"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="user.dir" value="/tmp/tmputricfp7/storm-benchmark"/>
    <property name="java.runtime.version" value="1.8.0_262-b10"/>
    <property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
    <property name="java.endorsed.dirs" value="/usr/local/openjdk-8/jre/lib/endorsed"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="os.name" value="Linux"/>
    <property name="classworlds.conf" value="/usr/share/maven/bin/m2.conf"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib"/>
    <property name="license.skip" value="true"/>
    <property name="maven.conf" value="/usr/share/maven/conf"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.class.version" value="52.0"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="maven.test.failure.ignore" value="true"/>
    <property name="os.version" value="4.15.0-109-generic"/>
    <property name="library.jansi.path" value="/usr/share/maven/lib/jansi-native"/>
    <property name="user.home" value="/home/jdbl"/>
    <property name="user.timezone" value="Etc/UTC"/>
    <property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
    <property name="java.specification.version" value="1.8"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="user.name" value="jdbl"/>
    <property name="java.class.path" value="/usr/share/maven/boot/plexus-classworlds-2.6.0.jar"/>
    <property name="java.vm.specification.version" value="1.8"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.home" value="/usr/local/openjdk-8/jre"/>
    <property name="sun.java.command" value="org.codehaus.plexus.classworlds.launcher.Launcher test -e --fail-never -ntp -Dmaven.test.failure.ignore=true -B -Dmaven.javadoc.skip=true -Drat.skip=true -Danimal.sniffer.skip=true -Dmaven.javadoc.skip=true -Dlicense.skip=true -Dsource.skip=true"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="user.language" value="en"/>
    <property name="awt.toolkit" value="sun.awt.X11.XToolkit"/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.version" value="1.8.0_262"/>
    <property name="java.ext.dirs" value="/usr/local/openjdk-8/jre/lib/ext:/usr/java/packages/lib/ext"/>
    <property name="securerandom.source" value="file:/dev/./urandom"/>
    <property name="sun.boot.class.path" value="/usr/local/openjdk-8/jre/lib/resources.jar:/usr/local/openjdk-8/jre/lib/rt.jar:/usr/local/openjdk-8/jre/lib/sunrsasign.jar:/usr/local/openjdk-8/jre/lib/jsse.jar:/usr/local/openjdk-8/jre/lib/jce.jar:/usr/local/openjdk-8/jre/lib/charsets.jar:/usr/local/openjdk-8/jre/lib/jfr.jar:/usr/local/openjdk-8/jre/classes"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="rat.skip" value="true"/>
    <property name="maven.home" value="/usr/share/maven"/>
    <property name="file.separator" value="/"/>
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="sun.cpu.isalist" value=""/>
  </properties>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.027"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.005"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.003"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="getValueShouldReturnRightField" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.096"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.007"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.002"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.004"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.002"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.05"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.002"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.009"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="shouldEmitOnExecute" classname="storm.benchmark.lib.bolt.PageViewBoltTest" time="0.001"/>
  <testcase name="componentParallelismCouldBeSetThroughConfig" classname="storm.benchmark.benchmarks.PageViewCountTest" time="0.594"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.common.RollingBoltTest" time="0.001"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.common.RollingBoltTest" time="0.001"/>
  <testcase name="shouldEmitNothingIfNoObjectHasBeenCountedYetAndTickTupleIsReceived" classname="storm.benchmark.lib.bolt.common.RollingBoltTest" time="0.001"/>
  <testcase name="shouldEmitNothingIfNoObjectHasBeenCountedYetAndTickTupleIsReceived" classname="storm.benchmark.lib.bolt.common.RollingBoltTest" time="0.001"/>
  <testcase name="shouldEmitSomethingIfAtLeastOneObjectWasCountedAndTickTupleIsReceived" classname="storm.benchmark.lib.bolt.common.RollingBoltTest" time="0.012"/>
  <testcase name="shouldEmitSomethingIfAtLeastOneObjectWasCountedAndTickTupleIsReceived" classname="storm.benchmark.lib.bolt.common.RollingBoltTest" time="0.023"/>
  <testcase name="shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue" classname="storm.benchmark.lib.bolt.common.RollingBoltTest" time="0.003"/>
  <testcase name="shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue" classname="storm.benchmark.lib.bolt.common.RollingBoltTest" time="0"/>
  <testcase name="componentParallelismCouldBeSetThroughConfig" classname="storm.benchmark.benchmarks.SOLTest" time="0.003"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.FilterBoltTest" time="0"/>
  <testcase name="shouldEmitSecondFieldIfNotFiltered" classname="storm.benchmark.lib.bolt.FilterBoltTest" time="0.001"/>
  <testcase name="shouldNotEmitIfFiltered" classname="storm.benchmark.lib.bolt.FilterBoltTest" time="0.001"/>
  <testcase name="componentParallelismCouldBeSetThroughConfig" classname="storm.benchmark.benchmarks.RollingSortTest" time="0.026"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.bolt.ConstBoltTest" time="0"/>
  <testcase name="shouldEmitFirstFieldOfTuple" classname="storm.benchmark.lib.bolt.ConstBoltTest" time="0.001"/>
  <testcase name="componentParallelismCouldBeSetThroughConfig" classname="storm.benchmark.benchmarks.DataCleanTest" time="0.002"/>
  <testcase name="componentParallelismCouldBeSetThroughConfig" classname="storm.benchmark.benchmarks.FileReadWordCountTest" time="0.058"/>
  <testcase name="testIsZero" classname="storm.benchmark.lib.reducer.LongSummerTest" time="0"/>
  <testcase name="testReduce" classname="storm.benchmark.lib.reducer.LongSummerTest" time="0.001"/>
  <testcase name="testReduce" classname="storm.benchmark.lib.reducer.LongSummerTest" time="0"/>
  <testcase name="testReduce" classname="storm.benchmark.lib.reducer.LongSummerTest" time="0"/>
  <testcase name="testZero" classname="storm.benchmark.lib.reducer.LongSummerTest" time="0"/>
  <testcase name="componentParallelismCouldBeSetThroughConfig" classname="storm.benchmark.benchmarks.RollingCountTest" time="0.036"/>
  <testcase name="isZeroShouldReturnTrueOnEmptySet" classname="storm.benchmark.lib.reducer.SetReducerTest" time="0"/>
  <testcase name="reduceShouldReturnUnionOfTwoSets" classname="storm.benchmark.lib.reducer.SetReducerTest" time="0.006"/>
  <testcase name="reduceShouldReturnUnionOfTwoSets" classname="storm.benchmark.lib.reducer.SetReducerTest" time="0.001"/>
  <testcase name="reduceShouldReturnUnionOfTwoSets" classname="storm.benchmark.lib.reducer.SetReducerTest" time="0"/>
  <testcase name="reduceShouldReturnUnionOfTwoSets" classname="storm.benchmark.lib.reducer.SetReducerTest" time="0"/>
  <testcase name="zeroShouldReturnEmptySet" classname="storm.benchmark.lib.reducer.SetReducerTest" time="0.001"/>
  <testcase name="testExpand" classname="storm.benchmark.lib.operation.ExpandTest" time="0.029"/>
  <testcase name="testExpand" classname="storm.benchmark.lib.operation.ExpandTest" time="0.001"/>
  <testcase name="getMetricsCollectorShouldReturnProperCollector" classname="storm.benchmark.benchmarks.common.StormBenchmarkTest" time="0.002"/>
  <testcase name="getMetricsCollectorShouldReturnProperCollector" classname="storm.benchmark.benchmarks.common.StormBenchmarkTest" time="0"/>
  <testcase name="getMetricsCollectorShouldReturnProperCollector" classname="storm.benchmark.benchmarks.common.StormBenchmarkTest" time="0"/>
  <testcase name="getMetricsCollectorShouldReturnProperCollector" classname="storm.benchmark.benchmarks.common.StormBenchmarkTest" time="0"/>
  <testcase name="getMetricsCollectorShouldReturnProperCollector" classname="storm.benchmark.benchmarks.common.StormBenchmarkTest" time="0.001"/>
  <testcase name="getMetricsCollectorShouldReturnProperCollector" classname="storm.benchmark.benchmarks.common.StormBenchmarkTest" time="0"/>
  <testcase name="getMetricsCollectorShouldReturnProperCollector" classname="storm.benchmark.benchmarks.common.StormBenchmarkTest" time="0.001"/>
  <testcase name="getMetricsCollectorShouldReturnProperCollector" classname="storm.benchmark.benchmarks.common.StormBenchmarkTest" time="0"/>
  <testcase name="getMetricsCollectorShouldReturnProperCollector" classname="storm.benchmark.benchmarks.common.StormBenchmarkTest" time="0"/>
  <testcase name="testCombine" classname="storm.benchmark.lib.operation.DistinctTest" time="0.002"/>
  <testcase name="testInit" classname="storm.benchmark.lib.operation.DistinctTest" time="0.001"/>
  <testcase name="testZero" classname="storm.benchmark.lib.operation.DistinctTest" time="0"/>
  <testcase name="countBoltShouldCountAndEmitNumberOfEveryWord" classname="storm.benchmark.benchmarks.common.WordCountTest" time="0.001"/>
  <testcase name="countBoltShouldDeclareOutputFields" classname="storm.benchmark.benchmarks.common.WordCountTest" time="0.001"/>
  <testcase name="splitSentenceBoltShouldDeclareOutputFields" classname="storm.benchmark.benchmarks.common.WordCountTest" time="0"/>
  <testcase name="splitSentenceBoltShouldEmitEveryWord" classname="storm.benchmark.benchmarks.common.WordCountTest" time="0.002"/>
  <testcase name="testCombine" classname="storm.benchmark.lib.operation.OneTest" time="0.001"/>
  <testcase name="testInit" classname="storm.benchmark.lib.operation.OneTest" time="0"/>
  <testcase name="testZero" classname="storm.benchmark.lib.operation.OneTest" time="0"/>
  <testcase name="componentParallelismCouldBeSetThroughConfig" classname="storm.benchmark.benchmarks.UniqueVisitorTest" time="0.003"/>
  <testcase name="componentParallelismCouldBeSetThroughConfig" classname="storm.benchmark.benchmarks.GrepTest" time="0.007"/>
  <testcase name="sentenceShouldBeSplittedWithWhitespace" classname="storm.benchmark.lib.operation.WordSplitTest" time="0"/>
  <testcase name="sentenceShouldBeSplittedWithWhitespace" classname="storm.benchmark.lib.operation.WordSplitTest" time="0"/>
  <testcase name="sentenceShouldBeSplittedWithWhitespace" classname="storm.benchmark.lib.operation.WordSplitTest" time="0.001"/>
  <testcase name="testCollectExecutorStats" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testCollectExecutorStats" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testCollectExecutorStats" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testCollectExecutorStats" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testCollectExecutorStats" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testCollectExecutorStats" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testCollectSpoutLatency" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testCollectSpoutLatency" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testCollectSpoutLatency" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testCollectSpoutLatency" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testCollectSpoutThroughput" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testCollectSpoutThroughput" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testCollectSpoutThroughput" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testCollectSpoutThroughput" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0.001"/>
  <testcase name="testCollectSupervisorStats" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testCollectSupervisorStats" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testCollectSupervisorStats" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testCollectSupervisorStats" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testCollectThroughput" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testCollectThroughput" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0.001"/>
  <testcase name="testCollectThroughput" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testCollectThroughput" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0.001"/>
  <testcase name="testCollectThroughputMB" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0.006"/>
  <testcase name="testCollectThroughputMB" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testCollectThroughputMB" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testCollectThroughputMB" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testCollectTopologyStats" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testCollectTopologyStats" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testCollectTopologyStats" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testCollectTopologyStats" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="testWriteHeaders" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0.011"/>
  <testcase name="testWriteHeaders" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0.001"/>
  <testcase name="testWriteHeaders" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0.001"/>
  <testcase name="testWriteHeaders" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0.001"/>
  <testcase name="testWriteHeaders" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0.003"/>
  <testcase name="testWriteHeaders" classname="storm.benchmark.metrics.BasicMetricsCollectorTest" time="0"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.spout.pageview.PageViewSpoutTest" time="0.001"/>
  <testcase name="shouldEmitValueAndIdWhenAckEnabled" classname="storm.benchmark.lib.spout.pageview.PageViewSpoutTest" time="0"/>
  <testcase name="shouldEmitValueOnlyWhenAckDisabled" classname="storm.benchmark.lib.spout.pageview.PageViewSpoutTest" time="0"/>
  <testcase name="testFromString" classname="storm.benchmark.lib.spout.pageview.PageViewTest" time="0.008"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.spout.FileReadSpoutTest" time="0"/>
  <testcase name="shouldEmitValueAndIdWhenAckEnabled" classname="storm.benchmark.lib.spout.FileReadSpoutTest" time="0"/>
  <testcase name="shouldEmitValueOnlyWhenAckDisabled" classname="storm.benchmark.lib.spout.FileReadSpoutTest" time="0.001"/>
  <testcase name="shouldDeclareOutputFields" classname="storm.benchmark.lib.spout.RandomMessageSpoutTest" time="0.001"/>
  <testcase name="shouldEmitValueAndIdWhenAckEnabled" classname="storm.benchmark.lib.spout.RandomMessageSpoutTest" time="0.006"/>
  <testcase name="shouldEmitValueOnlyWhenAckDisabled" classname="storm.benchmark.lib.spout.RandomMessageSpoutTest" time="0.01"/>
  <testcase name="ackShouldRemoveBatch" classname="storm.benchmark.lib.spout.TridentFileReadSpoutTest" time="0.001"/>
  <testcase name="testEmitBatch" classname="storm.benchmark.lib.spout.TridentFileReadSpoutTest" time="0.007"/>
  <testcase name="addToIllegalSlotShouldThrowIAE" classname="storm.benchmark.tools.SlotsTest" time="0"/>
  <testcase name="addToIllegalSlotShouldThrowIAE" classname="storm.benchmark.tools.SlotsTest" time="0"/>
  <testcase name="addToIllegalSlotShouldThrowIAE" classname="storm.benchmark.tools.SlotsTest" time="0"/>
  <testcase name="addToLegalSlotShouldSucceed" classname="storm.benchmark.tools.SlotsTest" time="0"/>
  <testcase name="addToLegalSlotShouldSucceed" classname="storm.benchmark.tools.SlotsTest" time="0"/>
  <testcase name="addToLegalSlotShouldSucceed" classname="storm.benchmark.tools.SlotsTest" time="0.007"/>
  <testcase name="emptySlotsShouldNotContainAnyObject" classname="storm.benchmark.tools.SlotsTest" time="0"/>
  <testcase name="lessThanOneSlotShouldThrowIAE" classname="storm.benchmark.tools.SlotsTest" time="0"/>
  <testcase name="lessThanOneSlotShouldThrowIAE" classname="storm.benchmark.tools.SlotsTest" time="0"/>
  <testcase name="lessThanOneSlotShouldThrowIAE" classname="storm.benchmark.tools.SlotsTest" time="0"/>
  <testcase name="lessThanOneSlotShouldThrowIAE" classname="storm.benchmark.tools.SlotsTest" time="0"/>
  <testcase name="oneOrMoreSlotsShouldBeValid" classname="storm.benchmark.tools.SlotsTest" time="0"/>
  <testcase name="oneOrMoreSlotsShouldBeValid" classname="storm.benchmark.tools.SlotsTest" time="0"/>
  <testcase name="oneOrMoreSlotsShouldBeValid" classname="storm.benchmark.tools.SlotsTest" time="0"/>
  <testcase name="oneOrMoreSlotsShouldBeValid" classname="storm.benchmark.tools.SlotsTest" time="0"/>
  <testcase name="wipeIllegalSlotShouldThrowIAE" classname="storm.benchmark.tools.SlotsTest" time="0.002"/>
  <testcase name="wipeIllegalSlotShouldThrowIAE" classname="storm.benchmark.tools.SlotsTest" time="0"/>
  <testcase name="wipeIllegalSlotShouldThrowIAE" classname="storm.benchmark.tools.SlotsTest" time="0"/>
  <testcase name="wipeLegalSlotShouldWork" classname="storm.benchmark.tools.SlotsTest" time="0.001"/>
  <testcase name="wipeLegalSlotShouldWork" classname="storm.benchmark.tools.SlotsTest" time="0"/>
  <testcase name="wipeLegalSlotShouldWork" classname="storm.benchmark.tools.SlotsTest" time="0.011"/>
  <testcase name="wipeZerosShouldRemoveObjWhoseReducedValueIsZero" classname="storm.benchmark.tools.SlotsTest" time="0"/>
  <testcase name="lessThanTwoSlotsShouldThrowIAE" classname="storm.benchmark.tools.SlidingWindowTest" time="0"/>
  <testcase name="lessThanTwoSlotsShouldThrowIAE" classname="storm.benchmark.tools.SlidingWindowTest" time="0"/>
  <testcase name="lessThanTwoSlotsShouldThrowIAE" classname="storm.benchmark.tools.SlidingWindowTest" time="0"/>
  <testcase name="lessThanTwoSlotsShouldThrowIAE" classname="storm.benchmark.tools.SlidingWindowTest" time="0"/>
  <testcase name="lessThanTwoSlotsShouldThrowIAE" classname="storm.benchmark.tools.SlidingWindowTest" time="0"/>
  <testcase name="lessThanTwoSlotsShouldThrowIAE" classname="storm.benchmark.tools.SlidingWindowTest" time="0.001"/>
  <testcase name="testCounterWithSimulatedRuns" classname="storm.benchmark.tools.SlidingWindowTest" time="0.001"/>
  <testcase name="testCounterWithSimulatedRuns" classname="storm.benchmark.tools.SlidingWindowTest" time="0"/>
  <testcase name="testCounterWithSimulatedRuns" classname="storm.benchmark.tools.SlidingWindowTest" time="0"/>
  <testcase name="testCounterWithSimulatedRuns" classname="storm.benchmark.tools.SlidingWindowTest" time="0"/>
  <testcase name="testCounterWithSimulatedRuns" classname="storm.benchmark.tools.SlidingWindowTest" time="0.004"/>
  <testcase name="twoOrMoreSlotsShouldBeValid" classname="storm.benchmark.tools.SlidingWindowTest" time="0"/>
  <testcase name="twoOrMoreSlotsShouldBeValid" classname="storm.benchmark.tools.SlidingWindowTest" time="0"/>
  <testcase name="twoOrMoreSlotsShouldBeValid" classname="storm.benchmark.tools.SlidingWindowTest" time="0"/>
  <testcase name="testNextLine" classname="storm.benchmark.tools.FileReaderTest" time="0"/>
  <testcase name="getBenchmarkFromValidName" classname="storm.benchmark.tools.RunnerTest" time="0.001"/>
  <testcase name="getBenchmarkFromValidName" classname="storm.benchmark.tools.RunnerTest" time="0"/>
  <testcase name="getBenchmarkFromValidName" classname="storm.benchmark.tools.RunnerTest" time="0.001"/>
  <testcase name="getBenchmarkFromValidName" classname="storm.benchmark.tools.RunnerTest" time="0"/>
  <testcase name="getBenchmarkFromValidName" classname="storm.benchmark.tools.RunnerTest" time="0"/>
  <testcase name="getBenchmarkFromValidName" classname="storm.benchmark.tools.RunnerTest" time="0"/>
  <testcase name="getBenchmarkFromValidName" classname="storm.benchmark.tools.RunnerTest" time="0"/>
  <testcase name="getBenchmarkFromValidName" classname="storm.benchmark.tools.RunnerTest" time="0.001"/>
  <testcase name="getBenchmarkFromValidName" classname="storm.benchmark.tools.RunnerTest" time="0"/>
  <testcase name="getBenchmarkFromValidName" classname="storm.benchmark.tools.RunnerTest" time="0"/>
  <testcase name="getBenchmarkFromValidName" classname="storm.benchmark.tools.RunnerTest" time="0.002"/>
  <testcase name="getBenchmarkFromValidName" classname="storm.benchmark.tools.RunnerTest" time="0"/>
  <testcase name="throwsExceptionFromInvalidName" classname="storm.benchmark.tools.RunnerTest" time="0.001"/>
  <testcase name="throwsExceptionFromInvalidName" classname="storm.benchmark.tools.RunnerTest" time="0"/>
  <testcase name="nextTupleShouldEmitNextClickEvent" classname="storm.benchmark.tools.producer.kafka.PageViewKafkaProducerTest" time="0.002"/>
  <testcase name="spoutShouldBeKafkaPageViewSpout" classname="storm.benchmark.tools.producer.kafka.PageViewKafkaProducerTest" time="0.005"/>
  <testcase name="nextTupleShouldEmitNextLineOfFile" classname="storm.benchmark.tools.producer.kafka.FileReadKafkaProducerTest" time="0.001"/>
  <testcase name="spoutShouldBeKafkaFileReadSpout" classname="storm.benchmark.tools.producer.kafka.FileReadKafkaProducerTest" time="0.032"/>
  <testcase name="componentParallelismCouldBeSetThroughConfig" classname="storm.benchmark.tools.producer.kafka.KafkaProducerTest" time="0.014"/>
  <testcase name="componentParallelismCouldBeSetThroughConfig" classname="storm.benchmark.tools.producer.kafka.KafkaProducerTest" time="0.001"/>
  <testcase name="testAddLatency" classname="storm.benchmark.util.MetricsUtilsTest" time="0.001"/>
  <testcase name="testGetTopologySummary" classname="storm.benchmark.util.MetricsUtilsTest" time="0.033"/>
  <testcase name="testFileCreateWhenParentDoesNotExist" classname="storm.benchmark.util.FileUtilsTest" time="0.001"/>
  <testcase name="testFileCreateWhenParentExists" classname="storm.benchmark.util.FileUtilsTest" time="0"/>
  <testcase name="ifAckEnabledShouldReturnTrueForOneOrMoreAckers" classname="storm.benchmark.util.BenchmarkUtilsTest" time="0"/>
  <testcase name="ifAckEnabledShouldReturnTrueForOneOrMoreAckers" classname="storm.benchmark.util.BenchmarkUtilsTest" time="0"/>
  <testcase name="ifAckEnabledShouldReturnTrueForOneOrMoreAckers" classname="storm.benchmark.util.BenchmarkUtilsTest" time="0.001"/>
  <testcase name="testAvg" classname="storm.benchmark.util.BenchmarkUtilsTest" time="0.002"/>
  <testcase name="testAvg" classname="storm.benchmark.util.BenchmarkUtilsTest" time="0"/>
  <testcase name="testGetInt" classname="storm.benchmark.util.BenchmarkUtilsTest" time="0"/>
  <testcase name="testMax" classname="storm.benchmark.util.BenchmarkUtilsTest" time="0"/>
  <testcase name="testMax" classname="storm.benchmark.util.BenchmarkUtilsTest" time="0"/>
  <testcase name="testPutIfAbsent" classname="storm.benchmark.util.BenchmarkUtilsTest" time="0"/>
  <testcase name="testIsTickTuple" classname="storm.benchmark.util.TupleHelpersTest" time="0.001"/>
</testsuite>