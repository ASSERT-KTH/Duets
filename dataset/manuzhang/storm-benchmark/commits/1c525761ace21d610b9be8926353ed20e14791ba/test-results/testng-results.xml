<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="265" passed="265">
  <reporter-output>
  </reporter-output>
  <suite name="Surefire suite" duration-ms="1406" started-at="2020-07-30T21:36:23Z" finished-at="2020-07-30T21:36:25Z">
    <groups>
    </groups>
    <test name="Surefire test" duration-ms="1406" started-at="2020-07-30T21:36:23Z" finished-at="2020-07-30T21:36:25Z">
      <class name="storm.benchmark.tools.producer.kafka.PageViewKafkaProducerTest">
        <test-method status="PASS" signature="nextTupleShouldEmitNextClickEvent()[pri:0, instance:storm.benchmark.tools.producer.kafka.PageViewKafkaProducerTest@48e41b5d]" name="nextTupleShouldEmitNextClickEvent" duration-ms="2" started-at="2020-07-30T21:36:25Z" finished-at="2020-07-30T21:36:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nextTupleShouldEmitNextClickEvent -->
        <test-method status="PASS" signature="spoutShouldBeKafkaPageViewSpout()[pri:0, instance:storm.benchmark.tools.producer.kafka.PageViewKafkaProducerTest@48e41b5d]" name="spoutShouldBeKafkaPageViewSpout" duration-ms="5" started-at="2020-07-30T21:36:25Z" finished-at="2020-07-30T21:36:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- spoutShouldBeKafkaPageViewSpout -->
      </class> <!-- storm.benchmark.tools.producer.kafka.PageViewKafkaProducerTest -->
      <class name="storm.benchmark.benchmarks.RollingSortTest">
        <test-method status="PASS" signature="componentParallelismCouldBeSetThroughConfig()[pri:0, instance:storm.benchmark.benchmarks.RollingSortTest@3f5dfe69]" name="componentParallelismCouldBeSetThroughConfig" duration-ms="25" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- componentParallelismCouldBeSetThroughConfig -->
      </class> <!-- storm.benchmark.benchmarks.RollingSortTest -->
      <class name="storm.benchmark.lib.spout.pageview.PageViewTest">
        <test-method status="PASS" signature="testFromString()[pri:0, instance:storm.benchmark.lib.spout.pageview.PageViewTest@2f0ccb34]" name="testFromString" duration-ms="8" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFromString -->
      </class> <!-- storm.benchmark.lib.spout.pageview.PageViewTest -->
      <class name="storm.benchmark.tools.SlotsTest">
        <test-method status="PASS" signature="addToIllegalSlotShouldThrowIAE(int, int)[pri:0, instance:storm.benchmark.tools.SlotsTest@74a820bf]" name="addToIllegalSlotShouldThrowIAE" duration-ms="1" started-at="2020-07-30T21:36:24Z" data-provider="illegalSlot" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[the range of slot must be [0, numSlots)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: the range of slot must be [0, numSlots)
	at storm.benchmark.tools.SlidingWindow$Slots.add(SlidingWindow.java:94)
	at storm.benchmark.tools.SlotsTest.addToIllegalSlotShouldThrowIAE(SlotsTest.java:69)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addToIllegalSlotShouldThrowIAE -->
        <test-method status="PASS" signature="addToLegalSlotShouldSucceed(int, int)[pri:0, instance:storm.benchmark.tools.SlotsTest@74a820bf]" name="addToLegalSlotShouldSucceed" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="legalSlot" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addToLegalSlotShouldSucceed -->
        <test-method status="PASS" signature="addToIllegalSlotShouldThrowIAE(int, int)[pri:0, instance:storm.benchmark.tools.SlotsTest@74a820bf]" name="addToIllegalSlotShouldThrowIAE" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="illegalSlot" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[the range of slot must be [0, numSlots)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: the range of slot must be [0, numSlots)
	at storm.benchmark.tools.SlidingWindow$Slots.add(SlidingWindow.java:94)
	at storm.benchmark.tools.SlotsTest.addToIllegalSlotShouldThrowIAE(SlotsTest.java:69)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addToIllegalSlotShouldThrowIAE -->
        <test-method status="PASS" signature="addToLegalSlotShouldSucceed(int, int)[pri:0, instance:storm.benchmark.tools.SlotsTest@74a820bf]" name="addToLegalSlotShouldSucceed" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="legalSlot" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addToLegalSlotShouldSucceed -->
        <test-method status="PASS" signature="addToIllegalSlotShouldThrowIAE(int, int)[pri:0, instance:storm.benchmark.tools.SlotsTest@74a820bf]" name="addToIllegalSlotShouldThrowIAE" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="illegalSlot" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[the range of slot must be [0, numSlots)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: the range of slot must be [0, numSlots)
	at storm.benchmark.tools.SlidingWindow$Slots.add(SlidingWindow.java:94)
	at storm.benchmark.tools.SlotsTest.addToIllegalSlotShouldThrowIAE(SlotsTest.java:69)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addToIllegalSlotShouldThrowIAE -->
        <test-method status="PASS" signature="addToLegalSlotShouldSucceed(int, int)[pri:0, instance:storm.benchmark.tools.SlotsTest@74a820bf]" name="addToLegalSlotShouldSucceed" duration-ms="7" started-at="2020-07-30T21:36:24Z" data-provider="legalSlot" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[300]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[201]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addToLegalSlotShouldSucceed -->
        <test-method status="PASS" signature="lessThanOneSlotShouldThrowIAE(int)[pri:0, instance:storm.benchmark.tools.SlotsTest@74a820bf]" name="lessThanOneSlotShouldThrowIAE" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="illegalNumSlots" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Number of slots must be greater than zero (you requested -1)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Number of slots must be greater than zero (you requested -1)
	at storm.benchmark.tools.SlidingWindow$Slots.<init>(SlidingWindow.java:86)
	at storm.benchmark.tools.SlotsTest.lessThanOneSlotShouldThrowIAE(SlotsTest.java:42)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lessThanOneSlotShouldThrowIAE -->
        <test-method status="PASS" signature="lessThanOneSlotShouldThrowIAE(int)[pri:0, instance:storm.benchmark.tools.SlotsTest@74a820bf]" name="lessThanOneSlotShouldThrowIAE" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="illegalNumSlots" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-2147483648]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Number of slots must be greater than zero (you requested -2147483648)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Number of slots must be greater than zero (you requested -2147483648)
	at storm.benchmark.tools.SlidingWindow$Slots.<init>(SlidingWindow.java:86)
	at storm.benchmark.tools.SlotsTest.lessThanOneSlotShouldThrowIAE(SlotsTest.java:42)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lessThanOneSlotShouldThrowIAE -->
        <test-method status="PASS" signature="emptySlotsShouldNotContainAnyObject()[pri:0, instance:storm.benchmark.tools.SlotsTest@74a820bf]" name="emptySlotsShouldNotContainAnyObject" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- emptySlotsShouldNotContainAnyObject -->
        <test-method status="PASS" signature="lessThanOneSlotShouldThrowIAE(int)[pri:0, instance:storm.benchmark.tools.SlotsTest@74a820bf]" name="lessThanOneSlotShouldThrowIAE" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="illegalNumSlots" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Number of slots must be greater than zero (you requested 0)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Number of slots must be greater than zero (you requested 0)
	at storm.benchmark.tools.SlidingWindow$Slots.<init>(SlidingWindow.java:86)
	at storm.benchmark.tools.SlotsTest.lessThanOneSlotShouldThrowIAE(SlotsTest.java:42)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lessThanOneSlotShouldThrowIAE -->
        <test-method status="PASS" signature="lessThanOneSlotShouldThrowIAE(int)[pri:0, instance:storm.benchmark.tools.SlotsTest@74a820bf]" name="lessThanOneSlotShouldThrowIAE" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="illegalNumSlots" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Number of slots must be greater than zero (you requested -10)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Number of slots must be greater than zero (you requested -10)
	at storm.benchmark.tools.SlidingWindow$Slots.<init>(SlidingWindow.java:86)
	at storm.benchmark.tools.SlotsTest.lessThanOneSlotShouldThrowIAE(SlotsTest.java:42)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lessThanOneSlotShouldThrowIAE -->
        <test-method status="PASS" signature="oneOrMoreSlotsShouldBeValid(int)[pri:0, instance:storm.benchmark.tools.SlotsTest@74a820bf]" name="oneOrMoreSlotsShouldBeValid" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="legalNumSlots" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- oneOrMoreSlotsShouldBeValid -->
        <test-method status="PASS" signature="wipeIllegalSlotShouldThrowIAE(int, int)[pri:0, instance:storm.benchmark.tools.SlotsTest@74a820bf]" name="wipeIllegalSlotShouldThrowIAE" duration-ms="2" started-at="2020-07-30T21:36:24Z" data-provider="illegalSlot" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[the range of slot must be [0, numSlots)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: the range of slot must be [0, numSlots)
	at storm.benchmark.tools.SlidingWindow$Slots.wipeSlot(SlidingWindow.java:131)
	at storm.benchmark.tools.SlotsTest.wipeIllegalSlotShouldThrowIAE(SlotsTest.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- wipeIllegalSlotShouldThrowIAE -->
        <test-method status="PASS" signature="oneOrMoreSlotsShouldBeValid(int)[pri:0, instance:storm.benchmark.tools.SlotsTest@74a820bf]" name="oneOrMoreSlotsShouldBeValid" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="legalNumSlots" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- oneOrMoreSlotsShouldBeValid -->
        <test-method status="PASS" signature="oneOrMoreSlotsShouldBeValid(int)[pri:0, instance:storm.benchmark.tools.SlotsTest@74a820bf]" name="oneOrMoreSlotsShouldBeValid" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="legalNumSlots" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- oneOrMoreSlotsShouldBeValid -->
        <test-method status="PASS" signature="oneOrMoreSlotsShouldBeValid(int)[pri:0, instance:storm.benchmark.tools.SlotsTest@74a820bf]" name="oneOrMoreSlotsShouldBeValid" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="legalNumSlots" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2147483647]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- oneOrMoreSlotsShouldBeValid -->
        <test-method status="PASS" signature="wipeIllegalSlotShouldThrowIAE(int, int)[pri:0, instance:storm.benchmark.tools.SlotsTest@74a820bf]" name="wipeIllegalSlotShouldThrowIAE" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="illegalSlot" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[the range of slot must be [0, numSlots)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: the range of slot must be [0, numSlots)
	at storm.benchmark.tools.SlidingWindow$Slots.wipeSlot(SlidingWindow.java:131)
	at storm.benchmark.tools.SlotsTest.wipeIllegalSlotShouldThrowIAE(SlotsTest.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- wipeIllegalSlotShouldThrowIAE -->
        <test-method status="PASS" signature="wipeLegalSlotShouldWork(int, int)[pri:0, instance:storm.benchmark.tools.SlotsTest@74a820bf]" name="wipeLegalSlotShouldWork" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="legalSlot" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- wipeLegalSlotShouldWork -->
        <test-method status="PASS" signature="wipeIllegalSlotShouldThrowIAE(int, int)[pri:0, instance:storm.benchmark.tools.SlotsTest@74a820bf]" name="wipeIllegalSlotShouldThrowIAE" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="illegalSlot" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[the range of slot must be [0, numSlots)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: the range of slot must be [0, numSlots)
	at storm.benchmark.tools.SlidingWindow$Slots.wipeSlot(SlidingWindow.java:131)
	at storm.benchmark.tools.SlotsTest.wipeIllegalSlotShouldThrowIAE(SlotsTest.java:111)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- wipeIllegalSlotShouldThrowIAE -->
        <test-method status="PASS" signature="wipeLegalSlotShouldWork(int, int)[pri:0, instance:storm.benchmark.tools.SlotsTest@74a820bf]" name="wipeLegalSlotShouldWork" duration-ms="1" started-at="2020-07-30T21:36:24Z" data-provider="legalSlot" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- wipeLegalSlotShouldWork -->
        <test-method status="PASS" signature="wipeLegalSlotShouldWork(int, int)[pri:0, instance:storm.benchmark.tools.SlotsTest@74a820bf]" name="wipeLegalSlotShouldWork" duration-ms="6" started-at="2020-07-30T21:36:24Z" data-provider="legalSlot" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[300]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[201]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- wipeLegalSlotShouldWork -->
        <test-method status="PASS" signature="wipeZerosShouldRemoveObjWhoseReducedValueIsZero()[pri:0, instance:storm.benchmark.tools.SlotsTest@74a820bf]" name="wipeZerosShouldRemoveObjWhoseReducedValueIsZero" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- wipeZerosShouldRemoveObjWhoseReducedValueIsZero -->
      </class> <!-- storm.benchmark.tools.SlotsTest -->
      <class name="storm.benchmark.tools.producer.kafka.KafkaProducerTest">
        <test-method status="PASS" signature="componentParallelismCouldBeSetThroughConfig(storm.benchmark.tools.producer.kafka.KafkaProducer)[pri:0, instance:storm.benchmark.tools.producer.kafka.KafkaProducerTest@3e5beab5]" name="componentParallelismCouldBeSetThroughConfig" duration-ms="14" started-at="2020-07-30T21:36:25Z" data-provider="getKafkaProducer" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.tools.producer.kafka.FileReadKafkaProducer@c34fad3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- componentParallelismCouldBeSetThroughConfig -->
        <test-method status="PASS" signature="componentParallelismCouldBeSetThroughConfig(storm.benchmark.tools.producer.kafka.KafkaProducer)[pri:0, instance:storm.benchmark.tools.producer.kafka.KafkaProducerTest@3e5beab5]" name="componentParallelismCouldBeSetThroughConfig" duration-ms="1" started-at="2020-07-30T21:36:25Z" data-provider="getKafkaProducer" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.tools.producer.kafka.PageViewKafkaProducer@2b2c7eaa]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- componentParallelismCouldBeSetThroughConfig -->
      </class> <!-- storm.benchmark.tools.producer.kafka.KafkaProducerTest -->
      <class name="storm.benchmark.lib.operation.OneTest">
        <test-method status="PASS" signature="testCombine()[pri:0, instance:storm.benchmark.lib.operation.OneTest@3009eed7]" name="testCombine" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCombine -->
        <test-method status="PASS" signature="testInit()[pri:0, instance:storm.benchmark.lib.operation.OneTest@3009eed7]" name="testInit" duration-ms="1" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInit -->
        <test-method status="PASS" signature="testZero()[pri:0, instance:storm.benchmark.lib.operation.OneTest@3009eed7]" name="testZero" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZero -->
      </class> <!-- storm.benchmark.lib.operation.OneTest -->
      <class name="storm.benchmark.lib.bolt.FilterBoltTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.lib.bolt.FilterBoltTest@111cba40]" name="setUp" is-config="true" duration-ms="2" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldDeclareOutputFields()[pri:0, instance:storm.benchmark.lib.bolt.FilterBoltTest@111cba40]" name="shouldDeclareOutputFields" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.lib.bolt.FilterBoltTest@111cba40]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldEmitSecondFieldIfNotFiltered()[pri:0, instance:storm.benchmark.lib.bolt.FilterBoltTest@111cba40]" name="shouldEmitSecondFieldIfNotFiltered" duration-ms="1" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitSecondFieldIfNotFiltered -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.lib.bolt.FilterBoltTest@111cba40]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldNotEmitIfFiltered()[pri:0, instance:storm.benchmark.lib.bolt.FilterBoltTest@111cba40]" name="shouldNotEmitIfFiltered" duration-ms="1" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldNotEmitIfFiltered -->
      </class> <!-- storm.benchmark.lib.bolt.FilterBoltTest -->
      <class name="storm.benchmark.lib.bolt.common.RollingBoltTest">
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.bolt.RollingBolt)[pri:0, instance:storm.benchmark.lib.bolt.common.RollingBoltTest@7b8ea1db]" name="shouldDeclareOutputFields" duration-ms="1" started-at="2020-07-30T21:36:24Z" data-provider="getRollingBolt" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.lib.bolt.RollingCountBolt@3ead589f]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.bolt.RollingBolt)[pri:0, instance:storm.benchmark.lib.bolt.common.RollingBoltTest@7b8ea1db]" name="shouldDeclareOutputFields" duration-ms="1" started-at="2020-07-30T21:36:24Z" data-provider="getRollingBolt" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.lib.bolt.UniqueVisitorBolt@21a391fd]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldEmitNothingIfNoObjectHasBeenCountedYetAndTickTupleIsReceived(storm.benchmark.lib.bolt.RollingBolt)[pri:0, instance:storm.benchmark.lib.bolt.common.RollingBoltTest@7b8ea1db]" name="shouldEmitNothingIfNoObjectHasBeenCountedYetAndTickTupleIsReceived" duration-ms="1" started-at="2020-07-30T21:36:24Z" data-provider="getRollingBolt" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.lib.bolt.RollingCountBolt@774a6bc4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitNothingIfNoObjectHasBeenCountedYetAndTickTupleIsReceived -->
        <test-method status="PASS" signature="shouldEmitNothingIfNoObjectHasBeenCountedYetAndTickTupleIsReceived(storm.benchmark.lib.bolt.RollingBolt)[pri:0, instance:storm.benchmark.lib.bolt.common.RollingBoltTest@7b8ea1db]" name="shouldEmitNothingIfNoObjectHasBeenCountedYetAndTickTupleIsReceived" duration-ms="1" started-at="2020-07-30T21:36:24Z" data-provider="getRollingBolt" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.lib.bolt.UniqueVisitorBolt@38442545]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitNothingIfNoObjectHasBeenCountedYetAndTickTupleIsReceived -->
        <test-method status="PASS" signature="shouldEmitSomethingIfAtLeastOneObjectWasCountedAndTickTupleIsReceived(storm.benchmark.lib.bolt.RollingBolt)[pri:0, instance:storm.benchmark.lib.bolt.common.RollingBoltTest@7b8ea1db]" name="shouldEmitSomethingIfAtLeastOneObjectWasCountedAndTickTupleIsReceived" duration-ms="12" started-at="2020-07-30T21:36:24Z" data-provider="getRollingBolt" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.lib.bolt.RollingCountBolt@6cf9fb72]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitSomethingIfAtLeastOneObjectWasCountedAndTickTupleIsReceived -->
        <test-method status="PASS" signature="shouldEmitSomethingIfAtLeastOneObjectWasCountedAndTickTupleIsReceived(storm.benchmark.lib.bolt.RollingBolt)[pri:0, instance:storm.benchmark.lib.bolt.common.RollingBoltTest@7b8ea1db]" name="shouldEmitSomethingIfAtLeastOneObjectWasCountedAndTickTupleIsReceived" duration-ms="23" started-at="2020-07-30T21:36:24Z" data-provider="getRollingBolt" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.lib.bolt.UniqueVisitorBolt@5168a369]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitSomethingIfAtLeastOneObjectWasCountedAndTickTupleIsReceived -->
        <test-method status="PASS" signature="shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue(storm.benchmark.lib.bolt.RollingBolt)[pri:0, instance:storm.benchmark.lib.bolt.common.RollingBoltTest@7b8ea1db]" name="shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue" duration-ms="3" started-at="2020-07-30T21:36:24Z" data-provider="getRollingBolt" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.lib.bolt.RollingCountBolt@75d8e6cb]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue -->
        <test-method status="PASS" signature="shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue(storm.benchmark.lib.bolt.RollingBolt)[pri:0, instance:storm.benchmark.lib.bolt.common.RollingBoltTest@7b8ea1db]" name="shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getRollingBolt" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.lib.bolt.UniqueVisitorBolt@6c2f8b38]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldSetTickTupleFrequencyInComponentConfigurationToNonZeroValue -->
      </class> <!-- storm.benchmark.lib.bolt.common.RollingBoltTest -->
      <class name="storm.benchmark.lib.spout.TridentFileReadSpoutTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.lib.spout.TridentFileReadSpoutTest@60591e1b]" name="setUp" is-config="true" duration-ms="2" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="ackShouldRemoveBatch()[pri:0, instance:storm.benchmark.lib.spout.TridentFileReadSpoutTest@60591e1b]" name="ackShouldRemoveBatch" duration-ms="1" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ackShouldRemoveBatch -->
        <test-method status="PASS" signature="testEmitBatch()[pri:0, instance:storm.benchmark.lib.spout.TridentFileReadSpoutTest@60591e1b]" name="testEmitBatch" duration-ms="7" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmitBatch -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.lib.spout.TridentFileReadSpoutTest@60591e1b]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
      </class> <!-- storm.benchmark.lib.spout.TridentFileReadSpoutTest -->
      <class name="storm.benchmark.benchmarks.common.StormBenchmarkTest">
        <test-method status="PASS" signature="getMetricsCollectorShouldReturnProperCollector(storm.benchmark.benchmarks.common.StormBenchmark, java.lang.Class)[pri:0, instance:storm.benchmark.benchmarks.common.StormBenchmarkTest@2ee4706d]" name="getMetricsCollectorShouldReturnProperCollector" duration-ms="2" started-at="2020-07-30T21:36:24Z" data-provider="getStormBenchmark" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.benchmarks.FileReadWordCount@35419399]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class storm.benchmark.metrics.BasicMetricsCollector]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getMetricsCollectorShouldReturnProperCollector -->
        <test-method status="PASS" signature="getMetricsCollectorShouldReturnProperCollector(storm.benchmark.benchmarks.common.StormBenchmark, java.lang.Class)[pri:0, instance:storm.benchmark.benchmarks.common.StormBenchmarkTest@2ee4706d]" name="getMetricsCollectorShouldReturnProperCollector" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getStormBenchmark" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.benchmarks.Grep@9141410]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class storm.benchmark.metrics.BasicMetricsCollector]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getMetricsCollectorShouldReturnProperCollector -->
        <test-method status="PASS" signature="getMetricsCollectorShouldReturnProperCollector(storm.benchmark.benchmarks.common.StormBenchmark, java.lang.Class)[pri:0, instance:storm.benchmark.benchmarks.common.StormBenchmarkTest@2ee4706d]" name="getMetricsCollectorShouldReturnProperCollector" duration-ms="2" started-at="2020-07-30T21:36:24Z" data-provider="getStormBenchmark" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.benchmarks.DRPC@307083f0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class storm.benchmark.metrics.DRPCMetricsCollector]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getMetricsCollectorShouldReturnProperCollector -->
        <test-method status="PASS" signature="getMetricsCollectorShouldReturnProperCollector(storm.benchmark.benchmarks.common.StormBenchmark, java.lang.Class)[pri:0, instance:storm.benchmark.benchmarks.common.StormBenchmarkTest@2ee4706d]" name="getMetricsCollectorShouldReturnProperCollector" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getStormBenchmark" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.benchmarks.RollingCount@4105ebb4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class storm.benchmark.metrics.BasicMetricsCollector]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getMetricsCollectorShouldReturnProperCollector -->
        <test-method status="PASS" signature="getMetricsCollectorShouldReturnProperCollector(storm.benchmark.benchmarks.common.StormBenchmark, java.lang.Class)[pri:0, instance:storm.benchmark.benchmarks.common.StormBenchmarkTest@2ee4706d]" name="getMetricsCollectorShouldReturnProperCollector" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getStormBenchmark" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.benchmarks.SOL@6a4c764c]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class storm.benchmark.metrics.BasicMetricsCollector]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getMetricsCollectorShouldReturnProperCollector -->
        <test-method status="PASS" signature="getMetricsCollectorShouldReturnProperCollector(storm.benchmark.benchmarks.common.StormBenchmark, java.lang.Class)[pri:0, instance:storm.benchmark.benchmarks.common.StormBenchmarkTest@2ee4706d]" name="getMetricsCollectorShouldReturnProperCollector" duration-ms="1" started-at="2020-07-30T21:36:24Z" data-provider="getStormBenchmark" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.benchmarks.UniqueVisitor@7eac5319]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class storm.benchmark.metrics.BasicMetricsCollector]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getMetricsCollectorShouldReturnProperCollector -->
        <test-method status="PASS" signature="getMetricsCollectorShouldReturnProperCollector(storm.benchmark.benchmarks.common.StormBenchmark, java.lang.Class)[pri:0, instance:storm.benchmark.benchmarks.common.StormBenchmarkTest@2ee4706d]" name="getMetricsCollectorShouldReturnProperCollector" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getStormBenchmark" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.benchmarks.TridentWordCount@39076da4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class storm.benchmark.metrics.BasicMetricsCollector]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getMetricsCollectorShouldReturnProperCollector -->
        <test-method status="PASS" signature="getMetricsCollectorShouldReturnProperCollector(storm.benchmark.benchmarks.common.StormBenchmark, java.lang.Class)[pri:0, instance:storm.benchmark.benchmarks.common.StormBenchmarkTest@2ee4706d]" name="getMetricsCollectorShouldReturnProperCollector" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getStormBenchmark" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.benchmarks.PageViewCount@5731697b]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class storm.benchmark.metrics.BasicMetricsCollector]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getMetricsCollectorShouldReturnProperCollector -->
        <test-method status="PASS" signature="getMetricsCollectorShouldReturnProperCollector(storm.benchmark.benchmarks.common.StormBenchmark, java.lang.Class)[pri:0, instance:storm.benchmark.benchmarks.common.StormBenchmarkTest@2ee4706d]" name="getMetricsCollectorShouldReturnProperCollector" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getStormBenchmark" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.benchmarks.DataClean@4a77203f]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class storm.benchmark.metrics.BasicMetricsCollector]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getMetricsCollectorShouldReturnProperCollector -->
      </class> <!-- storm.benchmark.benchmarks.common.StormBenchmarkTest -->
      <class name="storm.benchmark.benchmarks.GrepTest">
        <test-method status="PASS" signature="componentParallelismCouldBeSetThroughConfig()[pri:0, instance:storm.benchmark.benchmarks.GrepTest@5333f08f]" name="componentParallelismCouldBeSetThroughConfig" duration-ms="7" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- componentParallelismCouldBeSetThroughConfig -->
      </class> <!-- storm.benchmark.benchmarks.GrepTest -->
      <class name="storm.benchmark.benchmarks.FileReadWordCountTest">
        <test-method status="PASS" signature="componentParallelismCouldBeSetThroughConfig()[pri:0, instance:storm.benchmark.benchmarks.FileReadWordCountTest@194012a2]" name="componentParallelismCouldBeSetThroughConfig" duration-ms="55" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- componentParallelismCouldBeSetThroughConfig -->
      </class> <!-- storm.benchmark.benchmarks.FileReadWordCountTest -->
      <class name="storm.benchmark.benchmarks.DataCleanTest">
        <test-method status="PASS" signature="componentParallelismCouldBeSetThroughConfig()[pri:0, instance:storm.benchmark.benchmarks.DataCleanTest@571a663c]" name="componentParallelismCouldBeSetThroughConfig" duration-ms="2" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- componentParallelismCouldBeSetThroughConfig -->
      </class> <!-- storm.benchmark.benchmarks.DataCleanTest -->
      <class name="storm.benchmark.tools.RunnerTest">
        <test-method status="PASS" signature="getBenchmarkFromValidName(java.lang.String)[pri:0, instance:storm.benchmark.tools.RunnerTest@29c53c4f]" name="getBenchmarkFromValidName" duration-ms="1" started-at="2020-07-30T21:36:25Z" data-provider="getValidNames" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.benchmarks.FileReadWordCount]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getBenchmarkFromValidName -->
        <test-method status="PASS" signature="getBenchmarkFromValidName(java.lang.String)[pri:0, instance:storm.benchmark.tools.RunnerTest@29c53c4f]" name="getBenchmarkFromValidName" duration-ms="0" started-at="2020-07-30T21:36:25Z" data-provider="getValidNames" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.benchmarks.SOL]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getBenchmarkFromValidName -->
        <test-method status="PASS" signature="getBenchmarkFromValidName(java.lang.String)[pri:0, instance:storm.benchmark.tools.RunnerTest@29c53c4f]" name="getBenchmarkFromValidName" duration-ms="1" started-at="2020-07-30T21:36:25Z" data-provider="getValidNames" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.benchmarks.Grep]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getBenchmarkFromValidName -->
        <test-method status="PASS" signature="getBenchmarkFromValidName(java.lang.String)[pri:0, instance:storm.benchmark.tools.RunnerTest@29c53c4f]" name="getBenchmarkFromValidName" duration-ms="0" started-at="2020-07-30T21:36:25Z" data-provider="getValidNames" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.benchmarks.UniqueVisitor]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getBenchmarkFromValidName -->
        <test-method status="PASS" signature="getBenchmarkFromValidName(java.lang.String)[pri:0, instance:storm.benchmark.tools.RunnerTest@29c53c4f]" name="getBenchmarkFromValidName" duration-ms="1" started-at="2020-07-30T21:36:25Z" data-provider="getValidNames" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.benchmarks.RollingCount]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getBenchmarkFromValidName -->
        <test-method status="PASS" signature="getBenchmarkFromValidName(java.lang.String)[pri:0, instance:storm.benchmark.tools.RunnerTest@29c53c4f]" name="getBenchmarkFromValidName" duration-ms="0" started-at="2020-07-30T21:36:25Z" data-provider="getValidNames" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.benchmarks.KafkaWordCount]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getBenchmarkFromValidName -->
        <test-method status="PASS" signature="getBenchmarkFromValidName(java.lang.String)[pri:0, instance:storm.benchmark.tools.RunnerTest@29c53c4f]" name="getBenchmarkFromValidName" duration-ms="0" started-at="2020-07-30T21:36:25Z" data-provider="getValidNames" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.benchmarks.DRPC]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getBenchmarkFromValidName -->
        <test-method status="PASS" signature="getBenchmarkFromValidName(java.lang.String)[pri:0, instance:storm.benchmark.tools.RunnerTest@29c53c4f]" name="getBenchmarkFromValidName" duration-ms="0" started-at="2020-07-30T21:36:25Z" data-provider="getValidNames" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.benchmarks.PageViewCount]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getBenchmarkFromValidName -->
        <test-method status="PASS" signature="getBenchmarkFromValidName(java.lang.String)[pri:0, instance:storm.benchmark.tools.RunnerTest@29c53c4f]" name="getBenchmarkFromValidName" duration-ms="2" started-at="2020-07-30T21:36:25Z" data-provider="getValidNames" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.tools.producer.kafka.FileReadKafkaProducer]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getBenchmarkFromValidName -->
        <test-method status="PASS" signature="getBenchmarkFromValidName(java.lang.String)[pri:0, instance:storm.benchmark.tools.RunnerTest@29c53c4f]" name="getBenchmarkFromValidName" duration-ms="0" started-at="2020-07-30T21:36:25Z" data-provider="getValidNames" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.benchmarks.TridentWordCount]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getBenchmarkFromValidName -->
        <test-method status="PASS" signature="getBenchmarkFromValidName(java.lang.String)[pri:0, instance:storm.benchmark.tools.RunnerTest@29c53c4f]" name="getBenchmarkFromValidName" duration-ms="0" started-at="2020-07-30T21:36:25Z" data-provider="getValidNames" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.benchmarks.SOL]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getBenchmarkFromValidName -->
        <test-method status="PASS" signature="getBenchmarkFromValidName(java.lang.String)[pri:0, instance:storm.benchmark.tools.RunnerTest@29c53c4f]" name="getBenchmarkFromValidName" duration-ms="0" started-at="2020-07-30T21:36:25Z" data-provider="getValidNames" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[storm.benchmark.tools.producer.kafka.PageViewKafkaProducer]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getBenchmarkFromValidName -->
        <test-method status="PASS" signature="throwsExceptionFromInvalidName(java.lang.String)[pri:0, instance:storm.benchmark.tools.RunnerTest@29c53c4f]" name="throwsExceptionFromInvalidName" duration-ms="1" started-at="2020-07-30T21:36:25Z" data-provider="getInValidNames" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[foo]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.ClassNotFoundException">
            <message>
              <![CDATA[foo]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.ClassNotFoundException: foo
	at java.net.URLClassLoader.findClass(URLClassLoader.java:382)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:264)
	at storm.benchmark.tools.Runner.getApplicationFromName(Runner.java:85)
	at storm.benchmark.tools.RunnerTest.throwsExceptionFromInvalidName(RunnerTest.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.ClassNotFoundException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- throwsExceptionFromInvalidName -->
        <test-method status="PASS" signature="throwsExceptionFromInvalidName(java.lang.String)[pri:0, instance:storm.benchmark.tools.RunnerTest@29c53c4f]" name="throwsExceptionFromInvalidName" duration-ms="0" started-at="2020-07-30T21:36:25Z" data-provider="getInValidNames" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[bar]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.ClassNotFoundException">
            <message>
              <![CDATA[bar]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.ClassNotFoundException: bar
	at java.net.URLClassLoader.findClass(URLClassLoader.java:382)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:264)
	at storm.benchmark.tools.Runner.getApplicationFromName(Runner.java:85)
	at storm.benchmark.tools.RunnerTest.throwsExceptionFromInvalidName(RunnerTest.java:39)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.ClassNotFoundException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- throwsExceptionFromInvalidName -->
      </class> <!-- storm.benchmark.tools.RunnerTest -->
      <class name="storm.benchmark.lib.spout.RandomMessageSpoutTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.lib.spout.RandomMessageSpoutTest@21e5f0b6]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldDeclareOutputFields()[pri:0, instance:storm.benchmark.lib.spout.RandomMessageSpoutTest@21e5f0b6]" name="shouldDeclareOutputFields" duration-ms="1" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.lib.spout.RandomMessageSpoutTest@21e5f0b6]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldEmitValueAndIdWhenAckEnabled()[pri:0, instance:storm.benchmark.lib.spout.RandomMessageSpoutTest@21e5f0b6]" name="shouldEmitValueAndIdWhenAckEnabled" duration-ms="5" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitValueAndIdWhenAckEnabled -->
        <test-method status="PASS" signature="shouldEmitValueOnlyWhenAckDisabled()[pri:0, instance:storm.benchmark.lib.spout.RandomMessageSpoutTest@21e5f0b6]" name="shouldEmitValueOnlyWhenAckDisabled" duration-ms="10" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitValueOnlyWhenAckDisabled -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.lib.spout.RandomMessageSpoutTest@21e5f0b6]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
      </class> <!-- storm.benchmark.lib.spout.RandomMessageSpoutTest -->
      <class name="storm.benchmark.lib.bolt.PageViewBoltTest">
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="15" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="4" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="0" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="0" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="0" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="0" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="0" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="0" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="0" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="4" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="0" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="0" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="0" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="97" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="getValueShouldReturnRightField(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="getValueShouldReturnRightField" duration-ms="0" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getValueShouldReturnRightField -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="3" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="0" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="0" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="0" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="0" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="0" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="0" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="0" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="0" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="0" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="0" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="0" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="4" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldDeclareOutputFields(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldDeclareOutputFields" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="50" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="2" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="1" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="9" started-at="2020-07-30T21:36:23Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="1" started-at="2020-07-30T21:36:24Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="1" started-at="2020-07-30T21:36:24Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="1" started-at="2020-07-30T21:36:24Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="1" started-at="2020-07-30T21:36:24Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="1" started-at="2020-07-30T21:36:24Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="1" started-at="2020-07-30T21:36:24Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[page_view]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="1" started-at="2020-07-30T21:36:24Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[url]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="1" started-at="2020-07-30T21:36:24Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[http_status]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[zip_code]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
        <test-method status="PASS" signature="shouldEmitOnExecute(storm.benchmark.lib.spout.pageview.PageView$Item, storm.benchmark.lib.spout.pageview.PageView$Item)[pri:0, instance:storm.benchmark.lib.bolt.PageViewBoltTest@78b03788]" name="shouldEmitOnExecute" duration-ms="2" started-at="2020-07-30T21:36:24Z" data-provider="getAnyFields" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[count_one]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[user_id]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitOnExecute -->
      </class> <!-- storm.benchmark.lib.bolt.PageViewBoltTest -->
      <class name="storm.benchmark.lib.operation.ExpandTest">
        <test-method status="PASS" signature="testExpand(java.lang.Iterable, int)[pri:0, instance:storm.benchmark.lib.operation.ExpandTest@4f2ac7e0]" name="testExpand" duration-ms="29" started-at="2020-07-30T21:36:24Z" data-provider="getIterable" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[1, 2, 3]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExpand -->
        <test-method status="PASS" signature="testExpand(java.lang.Iterable, int)[pri:0, instance:storm.benchmark.lib.operation.ExpandTest@4f2ac7e0]" name="testExpand" duration-ms="1" started-at="2020-07-30T21:36:24Z" data-provider="getIterable" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[1, 2, 3]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExpand -->
      </class> <!-- storm.benchmark.lib.operation.ExpandTest -->
      <class name="storm.benchmark.benchmarks.common.WordCountTest">
        <test-method status="PASS" signature="countBoltShouldCountAndEmitNumberOfEveryWord()[pri:0, instance:storm.benchmark.benchmarks.common.WordCountTest@6ad6443]" name="countBoltShouldCountAndEmitNumberOfEveryWord" duration-ms="1" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- countBoltShouldCountAndEmitNumberOfEveryWord -->
        <test-method status="PASS" signature="countBoltShouldDeclareOutputFields()[pri:0, instance:storm.benchmark.benchmarks.common.WordCountTest@6ad6443]" name="countBoltShouldDeclareOutputFields" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- countBoltShouldDeclareOutputFields -->
        <test-method status="PASS" signature="splitSentenceBoltShouldEmitEveryWord()[pri:0, instance:storm.benchmark.benchmarks.common.WordCountTest@6ad6443]" name="splitSentenceBoltShouldEmitEveryWord" duration-ms="2" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- splitSentenceBoltShouldEmitEveryWord -->
        <test-method status="PASS" signature="splitSentenceBoltShouldDeclareOutputFields()[pri:0, instance:storm.benchmark.benchmarks.common.WordCountTest@6ad6443]" name="splitSentenceBoltShouldDeclareOutputFields" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- splitSentenceBoltShouldDeclareOutputFields -->
      </class> <!-- storm.benchmark.benchmarks.common.WordCountTest -->
      <class name="storm.benchmark.util.BenchmarkUtilsTest">
        <test-method status="PASS" signature="ifAckEnabledShouldReturnTrueForOneOrMoreAckers(int, boolean)[pri:0, instance:storm.benchmark.util.BenchmarkUtilsTest@2d130ac4]" name="ifAckEnabledShouldReturnTrueForOneOrMoreAckers" duration-ms="1" started-at="2020-07-30T21:36:25Z" data-provider="getNumberOfAckers" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ifAckEnabledShouldReturnTrueForOneOrMoreAckers -->
        <test-method status="PASS" signature="ifAckEnabledShouldReturnTrueForOneOrMoreAckers(int, boolean)[pri:0, instance:storm.benchmark.util.BenchmarkUtilsTest@2d130ac4]" name="ifAckEnabledShouldReturnTrueForOneOrMoreAckers" duration-ms="0" started-at="2020-07-30T21:36:25Z" data-provider="getNumberOfAckers" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ifAckEnabledShouldReturnTrueForOneOrMoreAckers -->
        <test-method status="PASS" signature="testAvg(java.lang.Iterable, double)[pri:0, instance:storm.benchmark.util.BenchmarkUtilsTest@2d130ac4]" name="testAvg" duration-ms="3" started-at="2020-07-30T21:36:25Z" data-provider="getAvgs" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[1.0, 3.0, 8.0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAvg -->
        <test-method status="PASS" signature="ifAckEnabledShouldReturnTrueForOneOrMoreAckers(int, boolean)[pri:0, instance:storm.benchmark.util.BenchmarkUtilsTest@2d130ac4]" name="ifAckEnabledShouldReturnTrueForOneOrMoreAckers" duration-ms="0" started-at="2020-07-30T21:36:25Z" data-provider="getNumberOfAckers" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ifAckEnabledShouldReturnTrueForOneOrMoreAckers -->
        <test-method status="PASS" signature="testAvg(java.lang.Iterable, double)[pri:0, instance:storm.benchmark.util.BenchmarkUtilsTest@2d130ac4]" name="testAvg" duration-ms="0" started-at="2020-07-30T21:36:25Z" data-provider="getAvgs" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[2.5, 4.5, 9.5]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[5.5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAvg -->
        <test-method status="PASS" signature="testGetInt()[pri:0, instance:storm.benchmark.util.BenchmarkUtilsTest@2d130ac4]" name="testGetInt" duration-ms="1" started-at="2020-07-30T21:36:25Z" finished-at="2020-07-30T21:36:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetInt -->
        <test-method status="PASS" signature="testMax(java.lang.Iterable, double)[pri:0, instance:storm.benchmark.util.BenchmarkUtilsTest@2d130ac4]" name="testMax" duration-ms="0" started-at="2020-07-30T21:36:25Z" data-provider="getMaxes" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[2.5, 4.5, 6.5]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[6.5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMax -->
        <test-method status="PASS" signature="testMax(java.lang.Iterable, double)[pri:0, instance:storm.benchmark.util.BenchmarkUtilsTest@2d130ac4]" name="testMax" duration-ms="0" started-at="2020-07-30T21:36:25Z" data-provider="getMaxes" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[1.0, 3.0, 3.0]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMax -->
        <test-method status="PASS" signature="testPutIfAbsent()[pri:0, instance:storm.benchmark.util.BenchmarkUtilsTest@2d130ac4]" name="testPutIfAbsent" duration-ms="0" started-at="2020-07-30T21:36:25Z" finished-at="2020-07-30T21:36:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPutIfAbsent -->
      </class> <!-- storm.benchmark.util.BenchmarkUtilsTest -->
      <class name="storm.benchmark.lib.operation.DistinctTest">
        <test-method status="PASS" signature="testCombine()[pri:0, instance:storm.benchmark.lib.operation.DistinctTest@55296b50]" name="testCombine" duration-ms="2" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCombine -->
        <test-method status="PASS" signature="testInit()[pri:0, instance:storm.benchmark.lib.operation.DistinctTest@55296b50]" name="testInit" duration-ms="1" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInit -->
        <test-method status="PASS" signature="testZero()[pri:0, instance:storm.benchmark.lib.operation.DistinctTest@55296b50]" name="testZero" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZero -->
      </class> <!-- storm.benchmark.lib.operation.DistinctTest -->
      <class name="storm.benchmark.lib.operation.WordSplitTest">
        <test-method status="PASS" signature="sentenceShouldBeSplittedWithWhitespace(java.lang.String)[pri:0, instance:storm.benchmark.lib.operation.WordSplitTest@5a30722c]" name="sentenceShouldBeSplittedWithWhitespace" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getSentenceWithWhiteSpace" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[foo 
 bar]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sentenceShouldBeSplittedWithWhitespace -->
        <test-method status="PASS" signature="sentenceShouldBeSplittedWithWhitespace(java.lang.String)[pri:0, instance:storm.benchmark.lib.operation.WordSplitTest@5a30722c]" name="sentenceShouldBeSplittedWithWhitespace" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getSentenceWithWhiteSpace" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[foo
bar]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sentenceShouldBeSplittedWithWhitespace -->
        <test-method status="PASS" signature="sentenceShouldBeSplittedWithWhitespace(java.lang.String)[pri:0, instance:storm.benchmark.lib.operation.WordSplitTest@5a30722c]" name="sentenceShouldBeSplittedWithWhitespace" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getSentenceWithWhiteSpace" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[foo  bar]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sentenceShouldBeSplittedWithWhitespace -->
      </class> <!-- storm.benchmark.lib.operation.WordSplitTest -->
      <class name="storm.benchmark.tools.SlidingWindowTest">
        <test-method status="PASS" signature="lessThanTwoSlotsShouldThrowIAE(int)[pri:0, instance:storm.benchmark.tools.SlidingWindowTest@175c5c3a]" name="lessThanTwoSlotsShouldThrowIAE" duration-ms="0" started-at="2020-07-30T21:36:25Z" data-provider="illegalWindowLengths" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-10]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Window length in slots must be at least two (you requested -10)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Window length in slots must be at least two (you requested -10)
	at storm.benchmark.tools.SlidingWindow.<init>(SlidingWindow.java:43)
	at storm.benchmark.tools.SlidingWindowTest.lessThanTwoSlotsShouldThrowIAE(SlidingWindowTest.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lessThanTwoSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="lessThanTwoSlotsShouldThrowIAE(int)[pri:0, instance:storm.benchmark.tools.SlidingWindowTest@175c5c3a]" name="lessThanTwoSlotsShouldThrowIAE" duration-ms="1" started-at="2020-07-30T21:36:25Z" data-provider="illegalWindowLengths" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-3]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Window length in slots must be at least two (you requested -3)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Window length in slots must be at least two (you requested -3)
	at storm.benchmark.tools.SlidingWindow.<init>(SlidingWindow.java:43)
	at storm.benchmark.tools.SlidingWindowTest.lessThanTwoSlotsShouldThrowIAE(SlidingWindowTest.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lessThanTwoSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="lessThanTwoSlotsShouldThrowIAE(int)[pri:0, instance:storm.benchmark.tools.SlidingWindowTest@175c5c3a]" name="lessThanTwoSlotsShouldThrowIAE" duration-ms="0" started-at="2020-07-30T21:36:25Z" data-provider="illegalWindowLengths" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-2]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Window length in slots must be at least two (you requested -2)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Window length in slots must be at least two (you requested -2)
	at storm.benchmark.tools.SlidingWindow.<init>(SlidingWindow.java:43)
	at storm.benchmark.tools.SlidingWindowTest.lessThanTwoSlotsShouldThrowIAE(SlidingWindowTest.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lessThanTwoSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="lessThanTwoSlotsShouldThrowIAE(int)[pri:0, instance:storm.benchmark.tools.SlidingWindowTest@175c5c3a]" name="lessThanTwoSlotsShouldThrowIAE" duration-ms="0" started-at="2020-07-30T21:36:25Z" data-provider="illegalWindowLengths" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Window length in slots must be at least two (you requested 0)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Window length in slots must be at least two (you requested 0)
	at storm.benchmark.tools.SlidingWindow.<init>(SlidingWindow.java:43)
	at storm.benchmark.tools.SlidingWindowTest.lessThanTwoSlotsShouldThrowIAE(SlidingWindowTest.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lessThanTwoSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="lessThanTwoSlotsShouldThrowIAE(int)[pri:0, instance:storm.benchmark.tools.SlidingWindowTest@175c5c3a]" name="lessThanTwoSlotsShouldThrowIAE" duration-ms="1" started-at="2020-07-30T21:36:25Z" data-provider="illegalWindowLengths" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Window length in slots must be at least two (you requested 1)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Window length in slots must be at least two (you requested 1)
	at storm.benchmark.tools.SlidingWindow.<init>(SlidingWindow.java:43)
	at storm.benchmark.tools.SlidingWindowTest.lessThanTwoSlotsShouldThrowIAE(SlidingWindowTest.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lessThanTwoSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="lessThanTwoSlotsShouldThrowIAE(int)[pri:0, instance:storm.benchmark.tools.SlidingWindowTest@175c5c3a]" name="lessThanTwoSlotsShouldThrowIAE" duration-ms="0" started-at="2020-07-30T21:36:25Z" data-provider="illegalWindowLengths" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Window length in slots must be at least two (you requested -1)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Window length in slots must be at least two (you requested -1)
	at storm.benchmark.tools.SlidingWindow.<init>(SlidingWindow.java:43)
	at storm.benchmark.tools.SlidingWindowTest.lessThanTwoSlotsShouldThrowIAE(SlidingWindowTest.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:132)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:147)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lessThanTwoSlotsShouldThrowIAE -->
        <test-method status="PASS" signature="testCounterWithSimulatedRuns(int, [I, [J)[pri:0, instance:storm.benchmark.tools.SlidingWindowTest@175c5c3a]" name="testCounterWithSimulatedRuns" duration-ms="1" started-at="2020-07-30T21:36:25Z" data-provider="simulatedCounterIterations" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@4faedfa4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[J@5b494ed3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCounterWithSimulatedRuns -->
        <test-method status="PASS" signature="testCounterWithSimulatedRuns(int, [I, [J)[pri:0, instance:storm.benchmark.tools.SlidingWindowTest@175c5c3a]" name="testCounterWithSimulatedRuns" duration-ms="0" started-at="2020-07-30T21:36:25Z" data-provider="simulatedCounterIterations" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@10cd3b79]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[J@70f2b33b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCounterWithSimulatedRuns -->
        <test-method status="PASS" signature="testCounterWithSimulatedRuns(int, [I, [J)[pri:0, instance:storm.benchmark.tools.SlidingWindowTest@175c5c3a]" name="testCounterWithSimulatedRuns" duration-ms="0" started-at="2020-07-30T21:36:25Z" data-provider="simulatedCounterIterations" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@691505cf]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[J@79f3359e]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCounterWithSimulatedRuns -->
        <test-method status="PASS" signature="testCounterWithSimulatedRuns(int, [I, [J)[pri:0, instance:storm.benchmark.tools.SlidingWindowTest@175c5c3a]" name="testCounterWithSimulatedRuns" duration-ms="5" started-at="2020-07-30T21:36:25Z" data-provider="simulatedCounterIterations" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@7c505d80]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[J@1632d5f8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCounterWithSimulatedRuns -->
        <test-method status="PASS" signature="testCounterWithSimulatedRuns(int, [I, [J)[pri:0, instance:storm.benchmark.tools.SlidingWindowTest@175c5c3a]" name="testCounterWithSimulatedRuns" duration-ms="0" started-at="2020-07-30T21:36:25Z" data-provider="simulatedCounterIterations" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@409986fb]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[J@513777ed]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCounterWithSimulatedRuns -->
        <test-method status="PASS" signature="twoOrMoreSlotsShouldBeValid(int)[pri:0, instance:storm.benchmark.tools.SlidingWindowTest@175c5c3a]" name="twoOrMoreSlotsShouldBeValid" duration-ms="0" started-at="2020-07-30T21:36:25Z" data-provider="legalWindowLengths" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- twoOrMoreSlotsShouldBeValid -->
        <test-method status="PASS" signature="twoOrMoreSlotsShouldBeValid(int)[pri:0, instance:storm.benchmark.tools.SlidingWindowTest@175c5c3a]" name="twoOrMoreSlotsShouldBeValid" duration-ms="0" started-at="2020-07-30T21:36:25Z" data-provider="legalWindowLengths" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- twoOrMoreSlotsShouldBeValid -->
        <test-method status="PASS" signature="twoOrMoreSlotsShouldBeValid(int)[pri:0, instance:storm.benchmark.tools.SlidingWindowTest@175c5c3a]" name="twoOrMoreSlotsShouldBeValid" duration-ms="0" started-at="2020-07-30T21:36:25Z" data-provider="legalWindowLengths" finished-at="2020-07-30T21:36:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- twoOrMoreSlotsShouldBeValid -->
      </class> <!-- storm.benchmark.tools.SlidingWindowTest -->
      <class name="storm.benchmark.benchmarks.UniqueVisitorTest">
        <test-method status="PASS" signature="componentParallelismCouldBeSetThroughConfig()[pri:0, instance:storm.benchmark.benchmarks.UniqueVisitorTest@51e8d066]" name="componentParallelismCouldBeSetThroughConfig" duration-ms="3" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- componentParallelismCouldBeSetThroughConfig -->
      </class> <!-- storm.benchmark.benchmarks.UniqueVisitorTest -->
      <class name="storm.benchmark.tools.FileReaderTest">
        <test-method status="PASS" signature="testNextLine()[pri:0, instance:storm.benchmark.tools.FileReaderTest@69a5c6be]" name="testNextLine" duration-ms="1" started-at="2020-07-30T21:36:25Z" finished-at="2020-07-30T21:36:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextLine -->
      </class> <!-- storm.benchmark.tools.FileReaderTest -->
      <class name="storm.benchmark.lib.spout.FileReadSpoutTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.lib.spout.FileReadSpoutTest@3a788fe0]" name="setUp" is-config="true" duration-ms="3" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldDeclareOutputFields()[pri:0, instance:storm.benchmark.lib.spout.FileReadSpoutTest@3a788fe0]" name="shouldDeclareOutputFields" duration-ms="1" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.lib.spout.FileReadSpoutTest@3a788fe0]" name="setUp" is-config="true" duration-ms="1" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldEmitValueAndIdWhenAckEnabled()[pri:0, instance:storm.benchmark.lib.spout.FileReadSpoutTest@3a788fe0]" name="shouldEmitValueAndIdWhenAckEnabled" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitValueAndIdWhenAckEnabled -->
        <test-method status="PASS" signature="shouldEmitValueOnlyWhenAckDisabled()[pri:0, instance:storm.benchmark.lib.spout.FileReadSpoutTest@3a788fe0]" name="shouldEmitValueOnlyWhenAckDisabled" duration-ms="1" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitValueOnlyWhenAckDisabled -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.lib.spout.FileReadSpoutTest@3a788fe0]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
      </class> <!-- storm.benchmark.lib.spout.FileReadSpoutTest -->
      <class name="storm.benchmark.util.FileUtilsTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.util.FileUtilsTest@68e2d03e]" name="setUp" is-config="true" duration-ms="4" started-at="2020-07-30T21:36:25Z" finished-at="2020-07-30T21:36:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testFileCreateWhenParentDoesNotExist()[pri:0, instance:storm.benchmark.util.FileUtilsTest@68e2d03e]" name="testFileCreateWhenParentDoesNotExist" duration-ms="1" started-at="2020-07-30T21:36:25Z" finished-at="2020-07-30T21:36:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFileCreateWhenParentDoesNotExist -->
        <test-method status="PASS" signature="cleanUp()[pri:0, instance:storm.benchmark.util.FileUtilsTest@68e2d03e]" name="cleanUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:25Z" finished-at="2020-07-30T21:36:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.util.FileUtilsTest@68e2d03e]" name="setUp" is-config="true" duration-ms="1" started-at="2020-07-30T21:36:25Z" finished-at="2020-07-30T21:36:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="cleanUp()[pri:0, instance:storm.benchmark.util.FileUtilsTest@68e2d03e]" name="cleanUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:25Z" finished-at="2020-07-30T21:36:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method status="PASS" signature="testFileCreateWhenParentExists()[pri:0, instance:storm.benchmark.util.FileUtilsTest@68e2d03e]" name="testFileCreateWhenParentExists" duration-ms="0" started-at="2020-07-30T21:36:25Z" finished-at="2020-07-30T21:36:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFileCreateWhenParentExists -->
      </class> <!-- storm.benchmark.util.FileUtilsTest -->
      <class name="storm.benchmark.benchmarks.PageViewCountTest">
        <test-method status="PASS" signature="componentParallelismCouldBeSetThroughConfig()[pri:0, instance:storm.benchmark.benchmarks.PageViewCountTest@497ed877]" name="componentParallelismCouldBeSetThroughConfig" duration-ms="594" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- componentParallelismCouldBeSetThroughConfig -->
      </class> <!-- storm.benchmark.benchmarks.PageViewCountTest -->
      <class name="storm.benchmark.lib.bolt.ConstBoltTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.lib.bolt.ConstBoltTest@64279ab]" name="setUp" is-config="true" duration-ms="1" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldDeclareOutputFields()[pri:0, instance:storm.benchmark.lib.bolt.ConstBoltTest@64279ab]" name="shouldDeclareOutputFields" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.lib.bolt.ConstBoltTest@64279ab]" name="setUp" is-config="true" duration-ms="1" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldEmitFirstFieldOfTuple()[pri:0, instance:storm.benchmark.lib.bolt.ConstBoltTest@64279ab]" name="shouldEmitFirstFieldOfTuple" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitFirstFieldOfTuple -->
      </class> <!-- storm.benchmark.lib.bolt.ConstBoltTest -->
      <class name="storm.benchmark.tools.producer.kafka.FileReadKafkaProducerTest">
        <test-method status="PASS" signature="nextTupleShouldEmitNextLineOfFile()[pri:0, instance:storm.benchmark.tools.producer.kafka.FileReadKafkaProducerTest@430df350]" name="nextTupleShouldEmitNextLineOfFile" duration-ms="2" started-at="2020-07-30T21:36:25Z" finished-at="2020-07-30T21:36:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nextTupleShouldEmitNextLineOfFile -->
        <test-method status="PASS" signature="spoutShouldBeKafkaFileReadSpout()[pri:0, instance:storm.benchmark.tools.producer.kafka.FileReadKafkaProducerTest@430df350]" name="spoutShouldBeKafkaFileReadSpout" duration-ms="32" started-at="2020-07-30T21:36:25Z" finished-at="2020-07-30T21:36:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- spoutShouldBeKafkaFileReadSpout -->
      </class> <!-- storm.benchmark.tools.producer.kafka.FileReadKafkaProducerTest -->
      <class name="storm.benchmark.metrics.BasicMetricsCollectorTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="1" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testCollectExecutorStats(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectExecutorStats" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getExecutorMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[SUPERVISOR_STATS, THROUGHPUT]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectExecutorStats -->
        <test-method status="PASS" signature="testCollectExecutorStats(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectExecutorStats" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getExecutorMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[THROUGHPUT_IN_MB, TOPOLOGY_STATS]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectExecutorStats -->
        <test-method status="PASS" signature="testCollectExecutorStats(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectExecutorStats" duration-ms="1" started-at="2020-07-30T21:36:24Z" data-provider="getExecutorMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[SPOUT_THROUGHPUT]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectExecutorStats -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="1" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testCollectExecutorStats(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectExecutorStats" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getExecutorMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[SUPERVISOR_STATS, TOPOLOGY_STATS]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectExecutorStats -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testCollectExecutorStats(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectExecutorStats" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getExecutorMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[SPOUT_LATENCY]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectExecutorStats -->
        <test-method status="PASS" signature="testCollectExecutorStats(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectExecutorStats" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getExecutorMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[ALL]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectExecutorStats -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testCollectSpoutLatency(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectSpoutLatency" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getSpoutLatencyMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[SPOUT_LATENCY]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectSpoutLatency -->
        <test-method status="PASS" signature="testCollectSpoutLatency(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectSpoutLatency" duration-ms="1" started-at="2020-07-30T21:36:24Z" data-provider="getSpoutLatencyMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[ALL]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectSpoutLatency -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testCollectSpoutLatency(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectSpoutLatency" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getSpoutLatencyMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[THROUGHPUT_IN_MB, SPOUT_LATENCY]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectSpoutLatency -->
        <test-method status="PASS" signature="testCollectSpoutLatency(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectSpoutLatency" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getSpoutLatencyMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TOPOLOGY_STATS, SUPERVISOR_STATS, THROUGHPUT_IN_MB, SPOUT_THROUGHPUT, THROUGHPUT]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectSpoutLatency -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testCollectSpoutThroughput(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectSpoutThroughput" duration-ms="1" started-at="2020-07-30T21:36:24Z" data-provider="getSpoutThroughputMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[ALL]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectSpoutThroughput -->
        <test-method status="PASS" signature="testCollectSpoutThroughput(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectSpoutThroughput" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getSpoutThroughputMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[SPOUT_THROUGHPUT]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectSpoutThroughput -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testCollectSpoutThroughput(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectSpoutThroughput" duration-ms="1" started-at="2020-07-30T21:36:24Z" data-provider="getSpoutThroughputMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[SPOUT_THROUGHPUT, THROUGHPUT]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectSpoutThroughput -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testCollectSpoutThroughput(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectSpoutThroughput" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getSpoutThroughputMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TOPOLOGY_STATS, SPOUT_LATENCY, SUPERVISOR_STATS, THROUGHPUT_IN_MB, THROUGHPUT]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectSpoutThroughput -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="1" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testCollectSupervisorStats(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectSupervisorStats" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getSupervisorMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[SUPERVISOR_STATS]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectSupervisorStats -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testCollectSupervisorStats(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectSupervisorStats" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getSupervisorMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[ALL]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectSupervisorStats -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="1" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testCollectSupervisorStats(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectSupervisorStats" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getSupervisorMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[SUPERVISOR_STATS, TOPOLOGY_STATS]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectSupervisorStats -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testCollectSupervisorStats(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectSupervisorStats" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getSupervisorMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TOPOLOGY_STATS, SPOUT_LATENCY, THROUGHPUT_IN_MB, SPOUT_THROUGHPUT, THROUGHPUT]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectSupervisorStats -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testCollectThroughput(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectThroughput" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getThroughputMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[THROUGHPUT]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectThroughput -->
        <test-method status="PASS" signature="testCollectThroughput(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectThroughput" duration-ms="1" started-at="2020-07-30T21:36:24Z" data-provider="getThroughputMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[ALL]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectThroughput -->
        <test-method status="PASS" signature="testCollectThroughput(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectThroughput" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getThroughputMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TOPOLOGY_STATS, SPOUT_LATENCY, SUPERVISOR_STATS, THROUGHPUT_IN_MB, SPOUT_THROUGHPUT]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectThroughput -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testCollectThroughput(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectThroughput" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getThroughputMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TOPOLOGY_STATS, THROUGHPUT]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectThroughput -->
        <test-method status="PASS" signature="testCollectThroughputMB(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectThroughputMB" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getThroughputMBMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[THROUGHPUT_IN_MB]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectThroughputMB -->
        <test-method status="PASS" signature="testCollectThroughputMB(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectThroughputMB" duration-ms="1" started-at="2020-07-30T21:36:24Z" data-provider="getThroughputMBMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[ALL]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectThroughputMB -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testCollectThroughputMB(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectThroughputMB" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getThroughputMBMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[SUPERVISOR_STATS, THROUGHPUT_IN_MB]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectThroughputMB -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testCollectThroughputMB(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectThroughputMB" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getThroughputMBMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TOPOLOGY_STATS, SPOUT_LATENCY, SUPERVISOR_STATS, SPOUT_THROUGHPUT, THROUGHPUT]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectThroughputMB -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="1" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testCollectTopologyStats(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectTopologyStats" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getTopologyMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[ALL]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectTopologyStats -->
        <test-method status="PASS" signature="testCollectTopologyStats(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectTopologyStats" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getTopologyMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TOPOLOGY_STATS]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectTopologyStats -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testCollectTopologyStats(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectTopologyStats" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getTopologyMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TOPOLOGY_STATS, SPOUT_LATENCY]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectTopologyStats -->
        <test-method status="PASS" signature="testCollectTopologyStats(java.util.Set, boolean)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testCollectTopologyStats" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getTopologyMetrics" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[SPOUT_LATENCY, SUPERVISOR_STATS, THROUGHPUT_IN_MB, SPOUT_THROUGHPUT, THROUGHPUT]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollectTopologyStats -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="1" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testWriteHeaders(java.util.Set, java.util.Set)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testWriteHeaders" duration-ms="13" started-at="2020-07-30T21:36:24Z" data-provider="getMetricsItems" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[SUPERVISOR_STATS]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[total_slots, time(s), used_slots]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteHeaders -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testWriteHeaders(java.util.Set, java.util.Set)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testWriteHeaders" duration-ms="1" started-at="2020-07-30T21:36:24Z" data-provider="getMetricsItems" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TOPOLOGY_STATS]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[executors, workers, tasks, time(s)]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteHeaders -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="1" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="1" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testWriteHeaders(java.util.Set, java.util.Set)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testWriteHeaders" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getMetricsItems" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[THROUGHPUT]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[throughput (messages/s), time(s), transferred (messages)]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteHeaders -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testWriteHeaders(java.util.Set, java.util.Set)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testWriteHeaders" duration-ms="1" started-at="2020-07-30T21:36:24Z" data-provider="getMetricsItems" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[SPOUT_THROUGHPUT]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[spout_transferred (messages), spout_acked (messages), spout_throughput (messages/s), spout_executors, time(s)]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteHeaders -->
        <test-method status="PASS" signature="testWriteHeaders(java.util.Set, java.util.Set)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testWriteHeaders" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getMetricsItems" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[THROUGHPUT_IN_MB]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[throughput (MB/s), spout_throughput (MB/s), time(s)]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteHeaders -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testWriteHeaders(java.util.Set, java.util.Set)[pri:0, instance:storm.benchmark.metrics.BasicMetricsCollectorTest@1373e3ee]" name="testWriteHeaders" duration-ms="1" started-at="2020-07-30T21:36:24Z" data-provider="getMetricsItems" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[SPOUT_LATENCY]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[spout_avg_complete_latency(ms), spout_max_complete_latency(ms), time(s)]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteHeaders -->
      </class> <!-- storm.benchmark.metrics.BasicMetricsCollectorTest -->
      <class name="storm.benchmark.lib.reducer.SetReducerTest">
        <test-method status="PASS" signature="reduceShouldReturnUnionOfTwoSets(java.util.Set, java.util.Set, java.util.Set)[pri:0, instance:storm.benchmark.lib.reducer.SetReducerTest@32ab408e]" name="reduceShouldReturnUnionOfTwoSets" duration-ms="6" started-at="2020-07-30T21:36:24Z" data-provider="getSets" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[1, 2, 3]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[1, 2, 3]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reduceShouldReturnUnionOfTwoSets -->
        <test-method status="PASS" signature="isZeroShouldReturnTrueOnEmptySet()[pri:0, instance:storm.benchmark.lib.reducer.SetReducerTest@32ab408e]" name="isZeroShouldReturnTrueOnEmptySet" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- isZeroShouldReturnTrueOnEmptySet -->
        <test-method status="PASS" signature="reduceShouldReturnUnionOfTwoSets(java.util.Set, java.util.Set, java.util.Set)[pri:0, instance:storm.benchmark.lib.reducer.SetReducerTest@32ab408e]" name="reduceShouldReturnUnionOfTwoSets" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getSets" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[1, 2, 3]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[1, 2, 3]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reduceShouldReturnUnionOfTwoSets -->
        <test-method status="PASS" signature="reduceShouldReturnUnionOfTwoSets(java.util.Set, java.util.Set, java.util.Set)[pri:0, instance:storm.benchmark.lib.reducer.SetReducerTest@32ab408e]" name="reduceShouldReturnUnionOfTwoSets" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getSets" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[1, 2, 3]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[4, 2, 3]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[1, 2, 3, 4]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reduceShouldReturnUnionOfTwoSets -->
        <test-method status="PASS" signature="zeroShouldReturnEmptySet()[pri:0, instance:storm.benchmark.lib.reducer.SetReducerTest@32ab408e]" name="zeroShouldReturnEmptySet" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- zeroShouldReturnEmptySet -->
        <test-method status="PASS" signature="reduceShouldReturnUnionOfTwoSets(java.util.Set, java.util.Set, java.util.Set)[pri:0, instance:storm.benchmark.lib.reducer.SetReducerTest@32ab408e]" name="reduceShouldReturnUnionOfTwoSets" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getSets" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[1, 2]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[4, 3]]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[1, 2, 3, 4]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reduceShouldReturnUnionOfTwoSets -->
      </class> <!-- storm.benchmark.lib.reducer.SetReducerTest -->
      <class name="storm.benchmark.lib.spout.pageview.PageViewSpoutTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.lib.spout.pageview.PageViewSpoutTest@6650a6c]" name="setUp" is-config="true" duration-ms="26" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldDeclareOutputFields()[pri:0, instance:storm.benchmark.lib.spout.pageview.PageViewSpoutTest@6650a6c]" name="shouldDeclareOutputFields" duration-ms="1" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldDeclareOutputFields -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.lib.spout.pageview.PageViewSpoutTest@6650a6c]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="shouldEmitValueAndIdWhenAckEnabled()[pri:0, instance:storm.benchmark.lib.spout.pageview.PageViewSpoutTest@6650a6c]" name="shouldEmitValueAndIdWhenAckEnabled" duration-ms="1" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitValueAndIdWhenAckEnabled -->
        <test-method status="PASS" signature="shouldEmitValueOnlyWhenAckDisabled()[pri:0, instance:storm.benchmark.lib.spout.pageview.PageViewSpoutTest@6650a6c]" name="shouldEmitValueOnlyWhenAckDisabled" duration-ms="1" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shouldEmitValueOnlyWhenAckDisabled -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:storm.benchmark.lib.spout.pageview.PageViewSpoutTest@6650a6c]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
      </class> <!-- storm.benchmark.lib.spout.pageview.PageViewSpoutTest -->
      <class name="storm.benchmark.lib.reducer.LongSummerTest">
        <test-method status="PASS" signature="testIsZero()[pri:0, instance:storm.benchmark.lib.reducer.LongSummerTest@231df705]" name="testIsZero" duration-ms="2" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsZero -->
        <test-method status="PASS" signature="testReduce(long, long, long)[pri:0, instance:storm.benchmark.lib.reducer.LongSummerTest@231df705]" name="testReduce" duration-ms="2" started-at="2020-07-30T21:36:24Z" data-provider="getLong" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReduce -->
        <test-method status="PASS" signature="testZero()[pri:0, instance:storm.benchmark.lib.reducer.LongSummerTest@231df705]" name="testZero" duration-ms="1" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testZero -->
        <test-method status="PASS" signature="testReduce(long, long, long)[pri:0, instance:storm.benchmark.lib.reducer.LongSummerTest@231df705]" name="testReduce" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getLong" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReduce -->
        <test-method status="PASS" signature="testReduce(long, long, long)[pri:0, instance:storm.benchmark.lib.reducer.LongSummerTest@231df705]" name="testReduce" duration-ms="0" started-at="2020-07-30T21:36:24Z" data-provider="getLong" finished-at="2020-07-30T21:36:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[13]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[21]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[34]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReduce -->
      </class> <!-- storm.benchmark.lib.reducer.LongSummerTest -->
      <class name="storm.benchmark.benchmarks.RollingCountTest">
        <test-method status="PASS" signature="componentParallelismCouldBeSetThroughConfig()[pri:0, instance:storm.benchmark.benchmarks.RollingCountTest@a91119b]" name="componentParallelismCouldBeSetThroughConfig" duration-ms="35" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- componentParallelismCouldBeSetThroughConfig -->
      </class> <!-- storm.benchmark.benchmarks.RollingCountTest -->
      <class name="storm.benchmark.benchmarks.SOLTest">
        <test-method status="PASS" signature="componentParallelismCouldBeSetThroughConfig()[pri:0, instance:storm.benchmark.benchmarks.SOLTest@77083e41]" name="componentParallelismCouldBeSetThroughConfig" duration-ms="3" started-at="2020-07-30T21:36:24Z" finished-at="2020-07-30T21:36:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- componentParallelismCouldBeSetThroughConfig -->
      </class> <!-- storm.benchmark.benchmarks.SOLTest -->
      <class name="storm.benchmark.util.TupleHelpersTest">
        <test-method status="PASS" signature="testIsTickTuple()[pri:0, instance:storm.benchmark.util.TupleHelpersTest@794240e2]" name="testIsTickTuple" duration-ms="0" started-at="2020-07-30T21:36:25Z" finished-at="2020-07-30T21:36:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsTickTuple -->
      </class> <!-- storm.benchmark.util.TupleHelpersTest -->
      <class name="storm.benchmark.util.MetricsUtilsTest">
        <test-method status="PASS" signature="testAddLatency()[pri:0, instance:storm.benchmark.util.MetricsUtilsTest@451e2fa9]" name="testAddLatency" duration-ms="1" started-at="2020-07-30T21:36:25Z" finished-at="2020-07-30T21:36:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAddLatency -->
        <test-method status="PASS" signature="testGetTopologySummary()[pri:0, instance:storm.benchmark.util.MetricsUtilsTest@451e2fa9]" name="testGetTopologySummary" duration-ms="32" started-at="2020-07-30T21:36:25Z" finished-at="2020-07-30T21:36:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetTopologySummary -->
      </class> <!-- storm.benchmark.util.MetricsUtilsTest -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
