<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>net.imagej</groupId>
		<artifactId>pom-imagej</artifactId>
		<version>2.24</version>
		<relativePath />
	</parent>

	<artifactId>imagej</artifactId>
	<version>2.0.0-rc-3-SNAPSHOT</version>

	<name>ImageJ</name>
	<description>ImageJ is an open source Java image processing program inspired by NIH Image for the Macintosh.</description>
	<inceptionYear>1997</inceptionYear>

	<scm>
		<connection>scm:git:git://github.com/imagej/imagej</connection>
		<developerConnection>scm:git:git@github.com:imagej/imagej</developerConnection>
		<tag>HEAD</tag>
		<url>https://github.com/imagej/imagej</url>
	</scm>

	<issueManagement>
		<system>GitHub Issues</system>
		<url>https://github.com/imagej/imagej/issues</url>
	</issueManagement>

	<ciManagement>
		<system>Jenkins</system>
		<url>http://jenkins.imagej.net/job/ImageJ/</url>
	</ciManagement>

	<properties>
		<imagej.main-class>net.imagej.Main</imagej.main-class>
	</properties>

	<repositories>
		<repository>
			<id>imagej.public</id>
			<url>http://maven.imagej.net/content/groups/public</url>
		</repository>
	</repositories>

	<dependencies>
		<!-- ImageJ dependencies -->
		<dependency>
			<groupId>net.imagej</groupId>
			<artifactId>imagej-common</artifactId>
		</dependency>
		<dependency>
			<groupId>net.imagej</groupId>
			<artifactId>imagej-legacy</artifactId>
		</dependency>
		<dependency>
			<groupId>net.imagej</groupId>
			<artifactId>imagej-ops</artifactId>
		</dependency>
		<dependency>
			<groupId>net.imagej</groupId>
			<artifactId>imagej-updater</artifactId>
		</dependency>

		<!-- SciJava dependencies -->
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scijava-common</artifactId>
		</dependency>

		<!-- Runtime ImageJ dependencies -->
		<dependency>
			<groupId>net.imagej</groupId>
			<artifactId>imagej-plugins-commands</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>net.imagej</groupId>
			<artifactId>imagej-plugins-tools</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>net.imagej</groupId>
			<artifactId>imagej-plugins-uploader-ssh</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>net.imagej</groupId>
			<artifactId>imagej-plugins-uploader-webdav</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- Runtime SciJava dependencies -->
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scijava-plugins-commands</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scijava-plugins-platforms</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scijava-plugins-text-markdown</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scijava-plugins-text-plain</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scripting-beanshell</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scripting-clojure</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scripting-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scripting-javascript</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scripting-jruby</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.scijava</groupId>
			<artifactId>scripting-jython</artifactId>
			<scope>runtime</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<configuration>
					<descriptors>
						<descriptor>src/main/assembly/zip.xml</descriptor>
					</descriptors>
					<finalName>imagej-${project.version}</finalName>
				</configuration>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>${project.groupId}</groupId>
									<artifactId>imagej-launcher</artifactId>
									<version>${imagej-launcher.version}</version>
									<type>nar</type>
									<outputDirectory>${project.build.directory}/</outputDirectory>
									<destFileName>imagej-launcher-${imagej-launcher.version}.jar</destFileName>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
					<execution>
						<id>unpack</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>${project.groupId}</groupId>
									<artifactId>imagej-launcher</artifactId>
									<version>${imagej-launcher.version}</version>
									<classifier>amd64-Linux-gcc-executable</classifier>
									<type>nar</type>
									<outputDirectory>${project.build.directory}/</outputDirectory>
								</artifactItem>
								<artifactItem>
									<groupId>${project.groupId}</groupId>
									<artifactId>imagej-launcher</artifactId>
									<version>${imagej-launcher.version}</version>
									<classifier>i386-Linux-gcc-executable</classifier>
									<type>nar</type>
									<outputDirectory>${project.build.directory}/</outputDirectory>
								</artifactItem>
								<artifactItem>
									<groupId>${project.groupId}</groupId>
									<artifactId>imagej-launcher</artifactId>
									<version>${imagej-launcher.version}</version>
									<classifier>amd64-Windows-gcc-executable</classifier>
									<type>nar</type>
									<outputDirectory>${project.build.directory}/</outputDirectory>
								</artifactItem>
								<artifactItem>
									<groupId>${project.groupId}</groupId>
									<artifactId>imagej-launcher</artifactId>
									<version>${imagej-launcher.version}</version>
									<classifier>x86-Windows-gcc-executable</classifier>
									<type>nar</type>
									<outputDirectory>${project.build.directory}/</outputDirectory>
								</artifactItem>
								<artifactItem>
									<groupId>${project.groupId}</groupId>
									<artifactId>imagej-launcher</artifactId>
									<version>${imagej-launcher.version}</version>
									<classifier>i386-MacOSX-gcc-executable</classifier>
									<type>nar</type>
									<outputDirectory>${project.build.directory}/</outputDirectory>
								</artifactItem>
								<artifactItem>
									<groupId>${project.groupId}</groupId>
									<artifactId>imagej-launcher</artifactId>
									<version>${imagej-launcher.version}</version>
									<classifier>x86_64-MacOSX-gcc-executable</classifier>
									<type>nar</type>
									<outputDirectory>${project.build.directory}/</outputDirectory>
								</artifactItem>
							</artifactItems>
							<overWriteSnapshots>true</overWriteSnapshots>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<packageName>net.imagej</packageName>
							<mainClass>${imagej.main-class}</mainClass>
						</manifest>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<configuration>
					<inceptionYear>2009</inceptionYear>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.googlecode.maven-java-formatter-plugin</groupId>
				<artifactId>maven-java-formatter-plugin</artifactId>
				<version>0.3.1</version>
				<configuration>
					<configFile>${basedir}/config/eclipse-code-formatter-profile.xml</configFile>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.fusesource.mvnplugins</groupId>
				<artifactId>maven-graph-plugin</artifactId>
				<configuration>
					<hideTransitive>false</hideTransitive>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<!-- The exec:exec configuration is hidden in the exec profile to
		     avoid interfering with the configuration of the 'deps' profile
		     that wants to use the exec plugin in a different way -->
		<profile>
			<id>exec</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<configuration>
							<executable>java</executable>
							<arguments>
								<argument>-classpath</argument>
								<classpath />
								<argument>${imagej.main-class}</argument>
							</arguments>
						</configuration>
						<executions>
							<execution>
								<phase>test</phase>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- The alt-ui profile adds alternative user interfaces to the
		     runtime classpath if the imagej.ui system property is set.
		     This enables launching ImageJ with an alternative UI; see:
		     http://developer.imagej.net/command-line -->
		<profile>
			<id>alt-ui</id>
			<activation>
				<property>
					<name>imagej.ui</name>
				</property>
			</activation>
			<dependencies>
				<dependency>
					<groupId>net.imagej</groupId>
					<artifactId>imagej-ui-awt</artifactId>
					<scope>runtime</scope>
				</dependency>
				<dependency>
					<groupId>net.imagej</groupId>
					<artifactId>imagej-ui-pivot</artifactId>
					<scope>runtime</scope>
				</dependency>
				<dependency>
					<groupId>net.imagej</groupId>
					<artifactId>imagej-ui-swt</artifactId>
					<scope>runtime</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<configuration>
							<executable>java</executable>
							<arguments>
								<argument>-classpath</argument>
								<classpath />
								<argument>-Dimagej.ui=${imagej.ui}</argument>
								<argument>${imagej.main-class}</argument>
							</arguments>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- The swing profile includes the ImageJ Swing UI.
		     It is always included unless java.awt.headless is set. -->
		<profile>
			<id>swing</id>
			<activation>
				<property>
					<name>!java.awt.headless</name>
				</property>
			</activation>
			<dependencies>
				<dependency>
					<groupId>net.imagej</groupId>
					<artifactId>imagej-ui-swing</artifactId>
					<scope>runtime</scope>
				</dependency>
			</dependencies>
		</profile>

		<!-- The deps profile builds the imagej-x.y.z-all uber-jar, which is
		     a bundle of ImageJ with all dependencies and ImageJ sources.
		     While we do not encourage its use, it can simplify deployment
		     in some environments; see:
		     http://developer.imagej.net/how-can-i-call-imagej-my-software -->
		<profile>
			<id>deps</id>
			<!-- NB: Include source code for all parts of ImageJ.
			     This list of dependencies needs to remain in sync with the
			     main list of dependencies outside the profiles section,
			     but with <classifier>sources</classifier> for each. -->
			<dependencies>
				<dependency>
					<groupId>net.imagej</groupId>
					<artifactId>imagej</artifactId>
					<version>${project.version}</version>
					<classifier>sources</classifier>
				</dependency>

				<!-- ImageJ dependencies -->
				<dependency>
					<groupId>net.imagej</groupId>
					<artifactId>imagej-common</artifactId>
					<version>${imagej-common.version}</version>
					<classifier>sources</classifier>
				</dependency>
				<dependency>
					<groupId>net.imagej</groupId>
					<artifactId>imagej-legacy</artifactId>
					<version>${imagej-legacy.version}</version>
					<classifier>sources</classifier>
				</dependency>
				<dependency>
					<groupId>net.imagej</groupId>
					<artifactId>imagej-ops</artifactId>
					<version>${imagej-ops.version}</version>
					<classifier>sources</classifier>
				</dependency>
				<dependency>
					<groupId>net.imagej</groupId>
					<artifactId>imagej-updater</artifactId>
					<version>${imagej-updater.version}</version>
					<classifier>sources</classifier>
				</dependency>

				<!-- SciJava dependencies -->
				<dependency>
					<groupId>org.scijava</groupId>
					<artifactId>scijava-common</artifactId>
					<version>${scijava-common.version}</version>
					<classifier>sources</classifier>
				</dependency>

				<!-- Runtime ImageJ dependencies -->
				<dependency>
					<groupId>net.imagej</groupId>
					<artifactId>imagej-plugins-commands</artifactId>
					<version>${imagej-plugins-commands.version}</version>
					<classifier>sources</classifier>
				</dependency>
				<dependency>
					<groupId>net.imagej</groupId>
					<artifactId>imagej-plugins-tools</artifactId>
					<version>${imagej-plugins-tools.version}</version>
					<classifier>sources</classifier>
				</dependency>
				<dependency>
					<groupId>net.imagej</groupId>
					<artifactId>imagej-plugins-uploader-ssh</artifactId>
					<version>${imagej-plugins-uploader-ssh.version}</version>
					<classifier>sources</classifier>
				</dependency>
				<dependency>
					<groupId>net.imagej</groupId>
					<artifactId>imagej-plugins-uploader-webdav</artifactId>
					<version>${imagej-plugins-uploader-webdav.version}</version>
					<classifier>sources</classifier>
				</dependency>

				<!-- Runtime SciJava dependencies -->
				<dependency>
					<groupId>org.scijava</groupId>
					<artifactId>scijava-plugins-platforms</artifactId>
					<version>${scijava-plugins-platforms.version}</version>
					<classifier>sources</classifier>
				</dependency>
				<dependency>
					<groupId>org.scijava</groupId>
					<artifactId>scijava-plugins-text-markdown</artifactId>
					<version>${scijava-plugins-text-markdown.version}</version>
					<classifier>sources</classifier>
				</dependency>
				<dependency>
					<groupId>org.scijava</groupId>
					<artifactId>scijava-plugins-text-plain</artifactId>
					<version>${scijava-plugins-text-plain.version}</version>
					<classifier>sources</classifier>
				</dependency>
				<dependency>
					<groupId>org.scijava</groupId>
					<artifactId>scripting-beanshell</artifactId>
					<version>${scripting-beanshell.version}</version>
					<classifier>sources</classifier>
				</dependency>
				<dependency>
					<groupId>org.scijava</groupId>
					<artifactId>scripting-clojure</artifactId>
					<version>${scripting-clojure.version}</version>
					<classifier>sources</classifier>
				</dependency>
				<dependency>
					<groupId>org.scijava</groupId>
					<artifactId>scripting-java</artifactId>
					<version>${scripting-java.version}</version>
					<classifier>sources</classifier>
				</dependency>
				<dependency>
					<groupId>org.scijava</groupId>
					<artifactId>scripting-javascript</artifactId>
					<version>${scripting-javascript.version}</version>
					<classifier>sources</classifier>
				</dependency>
				<dependency>
					<groupId>org.scijava</groupId>
					<artifactId>scripting-jruby</artifactId>
					<version>${scripting-jruby.version}</version>
					<classifier>sources</classifier>
				</dependency>
				<dependency>
					<groupId>org.scijava</groupId>
					<artifactId>scripting-jython</artifactId>
					<version>${scripting-jython.version}</version>
					<classifier>sources</classifier>
				</dependency>

				<dependency>
					<groupId>net.imagej</groupId>
					<artifactId>imagej-ui-swing</artifactId>
					<version>${imagej-ui-swing.version}</version>
					<classifier>sources</classifier>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>copy-dependencies</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>copy-dependencies</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<configuration>
							<mainClass>org.scijava.util.MetaInfCombiner</mainClass>
							<arguments>
								<argument>${basedir}/target/assembly/all/</argument>
							</arguments>
						</configuration>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>java</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<configuration>
							<descriptors>
								<descriptor>src/main/assembly/all.xml</descriptor>
							</descriptors>
							<finalName>imagej-${project.version}</finalName>
							<archive>
								<manifest>
									<mainClass>${imagej.main-class}</mainClass>
								</manifest>
							</archive>
						</configuration>
						<executions>
							<execution>
								<id>make-assembly</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>populate-app</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<configuration>
							<descriptors>
								<descriptor>src/main/assembly/dir.xml</descriptor>
							</descriptors>
							<finalName>ImageJ.app</finalName>
							<outputDirectory>${basedir}</outputDirectory>
							<appendAssemblyId>false</appendAssemblyId>
							<attach>false</attach>
						</configuration>
						<executions>
							<execution>
								<id>make-assembly</id>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- The jdb profile launches ImageJ in the jdb debugger.
		     Launch it using: mvn -P jdb exec:exec -->
		<profile>
			<id>jdb</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<configuration>
							<executable>jdb</executable>
							<arguments>
								<argument>-classpath</argument>
								<classpath />
								<argument>${imagej.main-class}</argument>
							</arguments>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>only-eclipse</id>
			<activation>
				<property>
					<name>m2e.version</name>
				</property>
			</activation>
			<build>
				<pluginManagement>
					<plugins>
						<!-- This plugin's configuration is used to store Eclipse m2e settings
								 only. It has no influence on the Maven build itself. -->
						<plugin>
							<groupId>org.eclipse.m2e</groupId>
							<artifactId>lifecycle-mapping</artifactId>
							<version>1.0.0</version>
							<configuration>
								<lifecycleMappingMetadata>
									<pluginExecutions>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId />
												<artifactId />
												<versionRange>${project.version}</versionRange>
												<goals>
													<goal />
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore />
											</action>
										</pluginExecution>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>org.apache.maven.plugins</groupId>
												<artifactId>maven-dependency-plugin</artifactId>
												<versionRange>[2.0,)</versionRange>
												<goals>
													<goal>copy</goal>
													<goal>unpack</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore />
											</action>
										</pluginExecution>
									</pluginExecutions>
								</lifecycleMappingMetadata>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>

		<!-- The javadoc profile builds the aggregated javadocs.
		     Launch it using: mvn -Pjavadocs javadoc:jar -->
		<profile>
			<id>javadoc</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-javadoc-plugin</artifactId>
						<executions>
							<execution>
								<id>attach-javadocs</id>
							</execution>
						</executions>
						<configuration>
							<includeDependencySources>true</includeDependencySources>
							<dependencySourceExcludes>
								<!-- No need to include the tools -->
								<dependencySourceExclude>com.sun:*</dependencySourceExclude>
							</dependencySourceExcludes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
