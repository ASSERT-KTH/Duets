<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.secureows</groupId>
	<artifactId>deploy</artifactId>
	<version>1.0</version>
	<inceptionYear>2008</inceptionYear>
	<properties>
		<scala.version>2.7.2</scala.version>
	</properties>

	<repositories>
		<repository>
			<id>scala-tools.org</id>
			<name>Scala-Tools Maven2 Repository</name>
			<url>http://scala-tools.org/repo-releases</url>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>scala-tools.org</id>
			<name>Scala-Tools Maven2 Repository</name>
			<url>http://scala-tools.org/repo-releases</url>
		</pluginRepository>
	</pluginRepositories>

	<dependencies>
		<dependency>
			<groupId>org.scala-lang</groupId>
			<artifactId>scala-library</artifactId>
			<version>${scala.version}</version>
		</dependency>
		<dependency>
			<groupId>org.scalaforge</groupId>
			<artifactId>scalax</artifactId>
			<version>0.1</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.4</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.specs</groupId>
			<artifactId>specs</artifactId>
			<version>1.3.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.scala-tools</groupId>
			<artifactId>maven-scala-plugin</artifactId>
			<version>2.8</version>
			<scope>runtime</scope>
		</dependency>
	</dependencies>

	<build>
		<sourceDirectory>src/main/scala</sourceDirectory>
		<testSourceDirectory>src/test/scala</testSourceDirectory>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-eclipse-plugin</artifactId>
				<configuration>
					<downloadSources>true</downloadSources>
					<buildcommands>
						<buildcommand>ch.epfl.lamp.sdt.core.scalabuilder</buildcommand>
					</buildcommands>
					<additionalProjectnatures>
						<projectnature>ch.epfl.lamp.sdt.core.scalanature</projectnature>
					</additionalProjectnatures>
					<classpathContainers>
						<classpathContainer>org.eclipse.jdt.launching.JRE_CONTAINER</classpathContainer>
						<classpathContainer>ch.epfl.lamp.sdt.launching.SCALA_CONTAINER</classpathContainer>
					</classpathContainers>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>compile</id>
			<activation>
				<property>
					<name>!app</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.scala-tools</groupId>
						<artifactId>maven-scala-plugin</artifactId>
						<executions>
							<execution>
								<goals>
									<goal>compile</goal>
									<goal>testCompile</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<args>
								<arg>-target:jvm-1.5</arg>
							</args>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>deploy</id>
			<activation>
				<property>
					<name>app</name>
				</property>
			</activation>

			<build>
				<plugins>
					<plugin>
						<groupId>org.scala-tools</groupId>
						<artifactId>maven-scala-plugin</artifactId>
						<executions>
							<execution>
								<goals>
									<goal>script</goal>
								</goals>
								<phase>install</phase>
							</execution>
						</executions>
						<configuration>
							<args>
								<arg>-target:jvm-1.5</arg>
							</args>

							<script>
<![CDATA[
	import java.io.File
	import scalax.io.Implicits._
	
	def relative( root:File, file:File ):String = {
		file.getPath.drop(root.getPath.length+1)
	}
	
	val none = (file:File)=>true
	
	def copyTree(from:File, to:File, filter:(File)=>Boolean) = {
		from.tree.projection.filter( filter ).foldLeft(0)( (count,f) => {
			val dest = new File(to, relative(from,f))
			if(f.isDirectory) dest.mkdirs
			else if(!dest.exists || f.lastModified() > dest.lastModified() ) f.copyTo(dest)
			
			if( f.canExecute ) dest.setExecutable(true)
			count + 1
		})
	}
	
	val target = new File("${project.build.directory}")
	val workingDir = target / ".tmp"
	val jarDir = target / ".tmp/jar"
	val buildJar = target / "${project.artifactId}-${project.version}.jar"
	val appDir = target / "deploy-${project.version}"
	val deployJar = appDir / "lib/deploy.jar"

	if( appDir.exists ) appDir.deleteRecursively
	jarDir.mkdirs	
	deployJar.getParentFile.mkdirs()
	
	val classes = new File(target,"classes")
	println( copyTree(classes,jarDir,none)+" files copied")
	
	val dependencies = new File(target,"dependency")
	for( f <- dependencies.listFiles ){
		val to = new File(workingDir,f.getName)
		if(to.exists) to.deleteRecursively
		to.mkdirs()
		println("unzipping "+f+" to "+to)
		f.unzipTo(to)
		println(copyTree(to,jarDir,none)+" files copied")
	}
	
	def zipUp(src:File,dest:File, root:File){
		import java.util.zip._
		val zip=new ZipOutputStream(new java.io.FileOutputStream(dest))
		try{		
			for( f <- src.tree; if f.isFile ){
				val entry = new ZipEntry( relative(root,f) )
				
				zip.putNextEntry(entry)
				if( f.isFile ) {
					val bytes = f.inputStream.buffered.slurp
					zip.write( bytes, 0, bytes.length)
				}
				zip.closeEntry()
			}
		}finally{
			zip.close()
		}
	}
	
	zipUp( jarDir, deployJar, jarDir )

	def svnDir(root:File) (file:File):Boolean = {
		if( file.getPath==root.getPath ) 	true
		else if( file.getName == ".svn" ) 	false
		else 								svnDir(root)(file.getParentFile)
	} 
	val bin = new File("${project.basedir}/bin")
	copyTree(bin,appDir / "bin", svnDir(bin)_)
	val config = new File("${project.basedir}/config")
	copyTree(config,appDir / "config", svnDir(config)_)

	def run( command:String ):Seq[String] = {
		println(command)
		val process = Runtime.getRuntime.exec(command)
		scalax.io.InputStreamResource(process.getInputStream).lines.toList
	}

	val cmd = "zip -r "+appDir.getName+".zip "+appDir.getName	
	Runtime.getRuntime.exec(cmd, Array[String](), appDir.getParentFile )

]]>
							</script>

						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<phase>validate</phase>

								<goals>
									<goal>copy-dependencies</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<outputDirectory>${project.target}</outputDirectory>
							<excludeScope>runtime</excludeScope>
							<excludeScope>test</excludeScope>
							<includeScope>compile</includeScope>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	<reporting>
		<plugins>
			<plugin>
				<groupId>org.scala-tools</groupId>
				<artifactId>maven-scala-plugin</artifactId>
			</plugin>
		</plugins>
	</reporting>
</project>
