<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.oxygenxml</groupId>
	<artifactId>git.support</artifactId>
	<version>1.0.0</version>
	
	<properties>
    	<maven.compiler.source>1.8</maven.compiler.source>
    	<maven.compiler.target>1.8</maven.compiler.target>
  	</properties>

	<repositories>
		<repository>
			<id>public</id>
			<name>oXygen public artifacts</name>
			<url>http://www.oxygenxml.com/maven</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

	<dependencies>
	    <dependency>
            <groupId>net.sf.jfcunit</groupId>
            <artifactId>jfcunit</artifactId>
            <version>2.08</version>
            <scope>test</scope>
        </dependency>
		<dependency>
		    <groupId>org.mockito</groupId>
		    <artifactId>mockito-all</artifactId>
		    <version>1.10.19</version>
		    <scope>test</scope>
		</dependency>
		<dependency>
	    	<groupId>org.powermock</groupId>
	        <artifactId>powermock-api-mockito</artifactId>
	        <version>1.6.2</version>
	        <scope>test</scope>
	    </dependency>
	    <dependency>
	    	<groupId>org.powermock</groupId>
	        <artifactId>powermock-module-junit4</artifactId>
	        <version>1.6.2</version>
	        <scope>test</scope>
	    </dependency>
	    <dependency>
		    <groupId>org.eclipse.jgit</groupId>
		    <artifactId>org.eclipse.jgit.ssh.jsch</artifactId>
		    <version>5.9.0.202009080501-r</version>
		</dependency>
		<dependency>
		    <groupId>org.eclipse.jgit</groupId>
		    <artifactId>org.eclipse.jgit.ssh.apache</artifactId>
		    <version>5.9.0.202009080501-r</version>
		</dependency>
		
		<dependency>
		    <groupId>org.eclipse.jgit</groupId>
		    <artifactId>org.eclipse.jgit.junit</artifactId>
		    <version>5.9.0.202009080501-r</version>
		    <scope>test</scope>
		</dependency>
		
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-core</artifactId>
			<version>2.2.8-b01</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-impl</artifactId>
			<version>2.2-promoted-b65</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.oxygenxml</groupId>
			<artifactId>oxygen-sdk</artifactId>
			<version>20.1.0.3</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		<!-- JGIT uses slf4j. We will distribute an implementation to avoid class 
			loader issues. -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.7.25</version>
			<exclusions>
				<exclusion>
					<groupId>log4j</groupId>
					<artifactId>log4j</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>

	<build>
		<finalName>${project.artifactId}-${project.version}</finalName>
			<plugins>
				<!-- Copy the runtime dependencies to the lib folder. -->
				<plugin>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>2.8</version>
					<executions>
						<execution>
							<phase>generate-resources</phase>
							<goals>
								<goal>copy-dependencies</goal>
							</goals>
							<configuration>
								<outputDirectory>${project.build.directory}/lib</outputDirectory>
								<includeScope>runtime</includeScope>
							</configuration>
						</execution>
					</executions>
				</plugin>
	
				<!-- We only want the final JAR package in the target folder so that it's 
					easier for users to identify it. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>2.2</version>
					<configuration>
						<outputDirectory>${project.build.directory}/build</outputDirectory>
					</configuration>
				</plugin>
	
				<plugin>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>2.4</version>
					<executions>
						<execution>
							<id>make-assembly</id>
							<phase>package</phase>
							<goals>
								<goal>single</goal>
							</goals>
							<configuration>
								<archiveBaseDirectory>${project.basedir}</archiveBaseDirectory>
								<descriptors>
									<descriptor>assembly.xml</descriptor>
								</descriptors>
							</configuration>
						</execution>
	
						<!-- Put the images into a separate JAR -->
						<execution>
							<phase>process-classes</phase>
							<goals>
								<goal>single</goal>
							</goals>
							<id>build-images-jar</id>
							<configuration>
								<descriptors>
									<descriptor>assembly-images.xml</descriptor>
								</descriptors>
							</configuration>
						</execution>
	
	
					</executions>
				</plugin>
				
				<!-- Download licenses -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<version>1.14</version>
				<configuration>
					<licensesConfigFile>${project.basedir}/license-config/licenses.xml</licensesConfigFile>
					<includedScopes>compile</includedScopes>
					<sortByGroupIdAndArtifactId>true</sortByGroupIdAndArtifactId>
				</configuration>
				<executions>
					<execution>
						<phase>validate</phase>
						<id>download-licenses</id>
						<goals>
							<goal>download-licenses</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			
				<plugin>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.0.2</version>
					<executions>
						<execution>
							<id>copy-resources</id>
							<!-- here the phase you need -->
							<phase>validate</phase>
							<goals>
								<goal>copy-resources</goal>
							</goals>
							<configuration>
								<outputDirectory>${basedir}/target/</outputDirectory>
								<resources>
									<resource>
										<directory>${project.basedir}</directory>
										<includes>
											<include>addon.xml</include>
										</includes>
										<filtering>true</filtering>
									</resource>
								</resources>
							</configuration>
						</execution>
					</executions>
				</plugin>
				
				
			      <plugin>
			        <groupId>org.apache.maven.plugins</groupId>
			        <artifactId>maven-surefire-plugin</artifactId>
			        <configuration>
			        	<runOrder>alphabetical</runOrder>
			        	<forkMode>always</forkMode>
			        </configuration>
			      </plugin>
			
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>0.8.5</version>
					<executions>
						<execution>
							<id>default-prepare-agent</id>
							<goals>
								<goal>prepare-agent</goal>
							</goals>
						</execution>
						<execution>
							<id>default-prepare-agent-integration</id>
							<goals>
								<goal>prepare-agent-integration</goal>
							</goals>
						</execution>
						<execution>
							<id>default-report</id>
							<goals>
								<goal>report</goal>
							</goals>
						</execution>
						<execution>
							<id>default-report-integration</id>
							<goals>
								<goal>report-integration</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
			</plugins>
			<pluginManagement>
				<plugins>
					<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
					<plugin>
						<groupId>org.eclipse.m2e</groupId>
						<artifactId>lifecycle-mapping</artifactId>
						<version>1.0.0</version>
						<configuration>
							<lifecycleMappingMetadata>
								<pluginExecutions>
									<pluginExecution>
										<pluginExecutionFilter>
											<groupId>
												org.apache.maven.plugins
											</groupId>
											<artifactId>
												maven-assembly-plugin
											</artifactId>
											<versionRange>
												[2.4,)
											</versionRange>
											<goals>
												<goal>single</goal>
											</goals>
										</pluginExecutionFilter>
										<action>
											<ignore></ignore>
										</action>
									</pluginExecution>
								</pluginExecutions>
							</lifecycleMappingMetadata>
						</configuration>
					</plugin>
				</plugins>
			</pluginManagement>
	</build>
</project>