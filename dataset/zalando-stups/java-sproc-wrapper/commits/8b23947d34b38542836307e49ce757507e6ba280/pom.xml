<?xml version='1.0' encoding='UTF-8'?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.zalando.stups.build</groupId>
        <artifactId>stups-parent</artifactId>
        <version>7</version>
        <relativePath />
    </parent>
    <groupId>de.zalando</groupId>
    <artifactId>zalando-sprocwrapper</artifactId>
    <version>1.5.2-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>Stored Procedure Wrapper</name>
    <description>Library to make PostgreSQL stored procedures available through simple Java "*SProcService" interfaces including automatic object serialization and deserialization (using typemapper and convention-over-configuration). Supports sharding, advisory locking, statement timeouts and PostgreSQL types such as enums and hstore.</description>
    <url>https://github.com/zalando/java-sproc-wrapper</url>

    <organization>
        <name>Zalando/Technology/Platform</name>
        <url>http://tech.zalando.com/</url>
    </organization>

    <scm>
        <connection>scm:git:git://github.com/zalando/java-sproc-wrapper.git</connection>
        <developerConnection>scm:git:git@github.com:zalando/java-sproc-wrapper.git</developerConnection>
        <url>https://github.com/zalando/java-sproc-wrapper.git</url>
      <tag>HEAD</tag>
  </scm>

    <issueManagement>
        <system>GitHub</system>
        <url>https://github.com/zalando/java-sproc-wrapper/issues</url>
    </issueManagement>

    <licenses>
        <license>
            <name>Apache License</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0</url>
        </license>
    </licenses>

    <developers>
        <developer>
            <name>Jan Mu√üler</name>
            <email>jan.mussler@zalando.de</email>
            <organization>Zalando SE</organization>
            <organizationUrl>http://tech.zalando.com/</organizationUrl>
        </developer>
        <developer>
            <name>Henning Jacobs</name>
            <email>henning.jacobs@zalando.de</email>
            <organization>Zalando SE</organization>
            <organizationUrl>http://tech.zalando.com/</organizationUrl>
        </developer>
    </developers>

    <prerequisites>
        <maven>2.2.1</maven>
    </prerequisites>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <spring.version>3.2.3.RELEASE</spring.version>
        <postgresql.version>9.3-1102-jdbc41</postgresql.version>

    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.5.1</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.0.1</version>
            </plugin>
            <plugin>
                <groupId>org.eluder.coveralls</groupId>
                <artifactId>coveralls-maven-plugin</artifactId>
                <version>3.0.1</version>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.7.7.201606060606</version>
                <executions>
                    <execution>
                        <id>prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
            <version>4.12</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <version>${spring.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.cthul</groupId>
            <artifactId>cthul-matchers</artifactId>
            <version>1.1.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
            <version>2.4.7</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>${postgresql.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.9</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.7.9</version>
        </dependency>
        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
            <version>2.6</version>
        </dependency>
        <dependency>
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
            <version>1.9.2</version>
        </dependency>
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>1.0.0.GA</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>4.3.0.Final</version>
        </dependency>
        <dependency>
            <groupId>org.reflections</groupId>
            <artifactId>reflections</artifactId>
            <version>0.9.10</version>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>14.0.1</version>
        </dependency>
        <dependency>
            <groupId>javax.persistence</groupId>
            <artifactId>persistence-api</artifactId>
            <version>1.0.2</version>
        </dependency>
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>2.6</version>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>2.0.31-beta</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <profiles>
        <profile>
            <id>integration-test</id>
            <properties>
                <test.db.username>postgres</test.db.username>
                <test.db.password>postgres</test.db.password>
                <test.db.name1>local_test_db1</test.db.name1>
                <test.db.name2>local_test_db2</test.db.name2>
                <test.db.host>localhost</test.db.host>
                <test.db.port>5432</test.db.port>
                <unit.test.skip>false</unit.test.skip>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>2.15</version>
                        <configuration>
                            <skipTests>${unit.test.skip}</skipTests>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>2.12</version>
                        <configuration>
                            <reportsDirectory>${project.basedir}/target/failsafe-reports</reportsDirectory>
                            <systemPropertyVariables>
                                <frontend.sproc.datasource.username>${test.db.username}</frontend.sproc.datasource.username>
                                <frontend.sproc.datasource.password>${test.db.password}</frontend.sproc.datasource.password>
                                <frontend.sproc.datasource.url1>jdbc:postgresql://${test.db.host}:${test.db.port}/${test.db.name1}</frontend.sproc.datasource.url1>
                                <frontend.sproc.datasource.url2>jdbc:postgresql://${test.db.host}:${test.db.port}/${test.db.name2}</frontend.sproc.datasource.url2>
                            </systemPropertyVariables>
                            <argLine>${failsafe.argLine}</argLine>
                        </configuration>
                        <executions>
                            <execution>
                                <id>integration-test</id>
                                <goals>
                                    <goal>integration-test</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>verify</id>
                                <goals>
                                    <goal>verify</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>sql-maven-plugin</artifactId>
                        <version>1.4</version>
                        <dependencies>
                            <dependency>
                                <groupId>org.postgresql</groupId>
                                <artifactId>postgresql</artifactId>
                                <version>${postgresql.version}</version>
                            </dependency>
                        </dependencies>
                        <configuration>
                            <username>${test.db.username}</username>
                            <password>${test.db.password}</password>
                            <skip>${maven.test.skip}</skip>
                        </configuration>
                        <executions>
                            <execution>
                                <id>create-db</id>
                                <phase>process-test-resources</phase>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                                <configuration>
                                    <driver>org.postgresql.Driver</driver>
                                    <url>jdbc:postgresql://${test.db.host}:${test.db.port}/postgres</url>
                                    <autocommit>true</autocommit>
                                    <sqlCommand>
                                        CREATE DATABASE ${test.db.name1} TEMPLATE template1;
                                        CREATE DATABASE ${test.db.name2} TEMPLATE template1;
                                        CREATE ROLE zalando_api_owner;
                                        CREATE ROLE zalando_api_executor;
                                        CREATE ROLE zalando_api_usage;
                                    </sqlCommand>
                                    <onError>continue</onError>
                                </configuration>
                            </execution>

                            <!-- execution against database 1 -->
                            <execution>
                                <id>drop-schemas-database1</id>
                                <phase>process-test-resources</phase>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                                <configuration>
                                    <driver>org.postgresql.Driver</driver>
                                    <url>jdbc:postgresql://${test.db.host}:${test.db.port}/${test.db.name1}</url>
                                    <sqlCommand>
                                        DROP EXTENSION IF EXISTS hstore CASCADE;
                                        CREATE EXTENSION hstore;
                                        DROP SCHEMA IF EXISTS ztest_schema1 CASCADE;
                                        DROP SCHEMA IF EXISTS ztest_schema2 CASCADE;
                                    </sqlCommand>
                                    <onError>continue</onError>
                                </configuration>
                            </execution>
                            <execution>
                                <id>create-data-database1</id>
                                <phase>process-test-resources</phase>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                                <configuration>
                                    <driver>org.postgresql.Driver</driver>
                                    <url>jdbc:postgresql://${test.db.host}:${test.db.port}/${test.db.name1}</url>
                                    <delimiterType>row</delimiterType>
                                    <keepFormat>true</keepFormat>
                                    <orderFile>ascending</orderFile>
                                    <fileset>
                                        <basedir>${basedir}</basedir>
                                        <includes>
                                            <include>database/test/21_shard1/**/*.sql</include>
                                        </includes>
                                    </fileset>
                                </configuration>
                            </execution>

                            <!-- execution against database 2 -->
                            <execution>
                                <id>drop-schemas-database2</id>
                                <phase>process-test-resources</phase>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                                <configuration>
                                    <driver>org.postgresql.Driver</driver>
                                    <url>jdbc:postgresql://${test.db.host}:${test.db.port}/${test.db.name2}</url>
                                    <sqlCommand>
                                        DROP EXTENSION IF EXISTS hstore CASCADE;
                                        CREATE EXTENSION hstore;
                                        DROP SCHEMA IF EXISTS ztest_schema1 CASCADE;
                                    </sqlCommand>
                                    <onError>continue</onError>
                                </configuration>
                            </execution>
                            <execution>
                                <id>create-data-database2</id>
                                <phase>process-test-resources</phase>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                                <configuration>
                                    <driver>org.postgresql.Driver</driver>
                                    <url>jdbc:postgresql://${test.db.host}:${test.db.port}/${test.db.name2}</url>
                                    <delimiterType>row</delimiterType>
                                    <keepFormat>true</keepFormat>
                                    <orderFile>ascending</orderFile>
                                    <fileset>
                                        <basedir>${basedir}</basedir>
                                        <includes>
                                            <include>database/test/22_shard2/**/*.sql</include>
                                        </includes>
                                    </fileset>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
