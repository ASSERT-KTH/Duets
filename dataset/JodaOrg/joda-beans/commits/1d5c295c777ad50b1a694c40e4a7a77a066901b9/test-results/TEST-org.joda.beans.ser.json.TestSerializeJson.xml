<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" name="org.joda.beans.ser.json.TestSerializeJson" time="0.734" tests="65" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="sun.boot.library.path" value="/usr/local/openjdk-8/jre/lib/amd64"/>
    <property name="java.vm.version" value="25.262-b10"/>
    <property name="animal.sniffer.skip" value="true"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="maven.multiModuleProjectDirectory" value="/tmp/tmp0hjbmbcv/joda-beans"/>
    <property name="maven.javadoc.skip" value="true"/>
    <property name="java.vendor.url" value="http://java.oracle.com/"/>
    <property name="path.separator" value=":"/>
    <property name="guice.disable.misplaced.annotation.check" value="true"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="file.encoding.pkg" value="sun.io"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.os.patch.level" value="unknown"/>
    <property name="source.skip" value="true"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="user.dir" value="/tmp/tmp0hjbmbcv/joda-beans"/>
    <property name="java.runtime.version" value="1.8.0_262-b10"/>
    <property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
    <property name="java.endorsed.dirs" value="/usr/local/openjdk-8/jre/lib/endorsed"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="os.name" value="Linux"/>
    <property name="classworlds.conf" value="/usr/share/maven/bin/m2.conf"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib"/>
    <property name="license.skip" value="true"/>
    <property name="maven.conf" value="/usr/share/maven/conf"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.class.version" value="52.0"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="maven.test.failure.ignore" value="true"/>
    <property name="os.version" value="4.15.0-109-generic"/>
    <property name="library.jansi.path" value="/usr/share/maven/lib/jansi-native"/>
    <property name="user.home" value="/home/jdbl"/>
    <property name="user.timezone" value="Etc/UTC"/>
    <property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
    <property name="java.specification.version" value="1.8"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="user.name" value="jdbl"/>
    <property name="java.class.path" value="/usr/share/maven/boot/plexus-classworlds-2.6.0.jar"/>
    <property name="java.vm.specification.version" value="1.8"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.home" value="/usr/local/openjdk-8/jre"/>
    <property name="sun.java.command" value="org.codehaus.plexus.classworlds.launcher.Launcher test -e --fail-never -ntp -Dmaven.test.failure.ignore=true -B -Dmaven.javadoc.skip=true -Drat.skip=true -Danimal.sniffer.skip=true -Dmaven.javadoc.skip=true -Dlicense.skip=true -Dsource.skip=true"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="user.language" value="en"/>
    <property name="awt.toolkit" value="sun.awt.X11.XToolkit"/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.version" value="1.8.0_262"/>
    <property name="java.ext.dirs" value="/usr/local/openjdk-8/jre/lib/ext:/usr/java/packages/lib/ext"/>
    <property name="securerandom.source" value="file:/dev/./urandom"/>
    <property name="sun.boot.class.path" value="/usr/local/openjdk-8/jre/lib/resources.jar:/usr/local/openjdk-8/jre/lib/rt.jar:/usr/local/openjdk-8/jre/lib/sunrsasign.jar:/usr/local/openjdk-8/jre/lib/jsse.jar:/usr/local/openjdk-8/jre/lib/jce.jar:/usr/local/openjdk-8/jre/lib/charsets.jar:/usr/local/openjdk-8/jre/lib/jfr.jar:/usr/local/openjdk-8/jre/classes"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="rat.skip" value="true"/>
    <property name="maven.home" value="/usr/share/maven"/>
    <property name="file.separator" value="/"/>
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="sun.cpu.isalist" value=""/>
  </properties>
  <testcase name="test_reader_readString_null" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_read_double_fromIntegerTooBig" classname="org.joda.beans.ser.json.TestSerializeJson" time="0.012"/>
  <testcase name="test_readWrite_float_NaN_asNull" classname="org.joda.beans.ser.json.TestSerializeJson" time="0.002"/>
  <testcase name="test_read_primitiveTypeChanged" classname="org.joda.beans.ser.json.TestSerializeJson" time="0.003"/>
  <testcase name="test_writeJodaConvertInterface" classname="org.joda.beans.ser.json.TestSerializeJson" time="0.167"/>
  <testcase name="test_reader_readReaderType_nullReader" classname="org.joda.beans.ser.json.TestSerializeJson" time="0.005"/>
  <testcase name="test_reader_readReaderType_nullType" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_readWrite_byte" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_readWrite_long" classname="org.joda.beans.ser.json.TestSerializeJson" time="0.001"/>
  <testcase name="test_read_double_fromInteger" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_read_noTypeAttributeAtRootButTypeSpecified" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_writeImmOptional" classname="org.joda.beans.ser.json.TestSerializeJson" time="0.138"/>
  <testcase name="test_readWrite_float_NaN" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_readWrite_double" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_reader_readStringType_nullString" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_read_double_integer_flexiWithTypeAnnotation" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_read_float_fromIntegerTooBig" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_readWrite_boolean_false" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_writer_nullSettings" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_write_nullKeyInMap" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_writeCollections" classname="org.joda.beans.ser.json.TestSerializeJson" time="0.203"/>
  <testcase name="test_readWriteBeanEmptyChild_pretty" classname="org.joda.beans.ser.json.TestSerializeJson" time="0.003"/>
  <testcase name="test_reader_readReader_null" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_readWrite_float" classname="org.joda.beans.ser.json.TestSerializeJson" time="0.001"/>
  <testcase name="test_readWrite_short" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_read_float_fromInteger" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_read_noTypeAttributeAtRoot" classname="org.joda.beans.ser.json.TestSerializeJson" time="0.001"/>
  <testcase name="test_read_rootTypeAttributeNotBean" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_writer_write2_nullBean" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_readWrite_double_alternateFormat" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_writer_write2_nullAppendable" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_readWrite_double_Infinity" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_read_double_NaN_asNull" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_writer_write1_nullBean" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_reader_readStringType_nullType" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_readWrite_boolean_true" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_writeAddress" classname="org.joda.beans.ser.json.TestSerializeJson" time="0.014"/>
  <testcase name="test_read_nonStandard_JodaConvertBean_flattened" classname="org.joda.beans.ser.json.TestSerializeJson" time="0.004"/>
  <testcase name="test_read_rootTypeInvalid" classname="org.joda.beans.ser.json.TestSerializeJson" time="0.004"/>
  <testcase name="test_readWriteJodaConvertWrapper" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_read_badTypeInMap" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_readWriteBeanEmptyChild_compact" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_writeImmAddress" classname="org.joda.beans.ser.json.TestSerializeJson" time="0.162"/>
  <testcase name="test_reader_nullSettings" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_read_rootTypeArgumentInvalid" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_read_ignoreProperty" classname="org.joda.beans.ser.json.TestSerializeJson" time="0.001"/>
  <testcase name="test_read_nonStandard_JodaConvertWrapper_expanded" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_badFormat[0: {,}]" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_badFormat[1: {1,2}]" classname="org.joda.beans.ser.json.TestSerializeJson" time="0.005"/>
  <testcase name="test_badFormat[2: {&quot;a&quot;,6}]" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_badFormat[3: {&quot;a&quot;:[}}]" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_badFormat[4: {&quot;a&quot;:{&quot;@type&quot;:&quot;Integer&quot;,&quot;notvalue&quot;:6}}]" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_badFormat[5: {&quot;a&quot;:{&quot;@type&quot;:&quot;Integer&quot;,&quot;value&quot;:[]}}]" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_badFormat[6: {&quot;a&quot;:{&quot;@type&quot;:&quot;Integer&quot;,&quot;value&quot;:2147483648}}]" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_badFormat[7: {&quot;a&quot;:{&quot;@type&quot;:&quot;Integer&quot;,&quot;value&quot;:-2147483649}}]" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_badFormat[8: {&quot;a&quot;:{&quot;@type&quot;:&quot;Short&quot;,&quot;value&quot;:32768}}]" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_badFormat[9: {&quot;a&quot;:{&quot;@type&quot;:&quot;Short&quot;,&quot;value&quot;:-32769}}]" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_badFormat[10: {&quot;a&quot;:{&quot;@type&quot;:&quot;Byte&quot;,&quot;value&quot;:128}}]" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_badFormat[11: {&quot;a&quot;:{&quot;@type&quot;:&quot;Byte&quot;,&quot;value&quot;:-129}}]" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_badFormat[12: {&quot;a&quot;:{&quot;@meta&quot;:&quot;List&quot;,&quot;notvalue&quot;:[]}}]" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_badFormat[13: {&quot;a&quot;:{&quot;@meta&quot;:&quot;List&quot;,&quot;value&quot;:{}}}]" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_badFormat[14: {&quot;a&quot;:{&quot;@meta&quot;:&quot;Map&quot;,&quot;value&quot;:6}}]" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
  <testcase name="test_readWriteJodaConvertBean" classname="org.joda.beans.ser.json.TestSerializeJson" time="0.001"/>
  <testcase name="test_readWriteInterfaceKeyMap" classname="org.joda.beans.ser.json.TestSerializeJson" time="0.004"/>
  <testcase name="test_readWrite_double_NaN" classname="org.joda.beans.ser.json.TestSerializeJson" time="0"/>
</testsuite>