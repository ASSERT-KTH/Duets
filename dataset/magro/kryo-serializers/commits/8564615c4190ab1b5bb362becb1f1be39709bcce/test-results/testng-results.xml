<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="330" passed="330">
  <reporter-output>
  </reporter-output>
  <suite name="Surefire suite" duration-ms="670" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:53Z">
    <groups>
    </groups>
    <test name="Surefire test" duration-ms="670" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:53Z">
      <class name="de.javakaffee.kryoserializers.cglib.CGLibProxySerializerTest">
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:de.javakaffee.kryoserializers.cglib.CGLibProxySerializerTest@1794d431]" name="beforeTest" is-config="true" duration-ms="69" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:de.javakaffee.kryoserializers.EnumMapSerializerTest@e25b2fe]" name="beforeTest" is-config="true" duration-ms="1" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@204f30ec]" name="setUp" is-config="true" duration-ms="18" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest@343f4d3d]" name="setUp" is-config="true" duration-ms="2" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@4667ae56]" name="setUp" is-config="true" duration-ms="11" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedMapSerializerTest@77cd7a0]" name="setUp" is-config="true" duration-ms="8" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSetSerializerTest@598067a5]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedSetSerializerTest@3c0ecd4b]" name="setUp" is-config="true" duration-ms="1" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaDateTimeSerializerTest@3abbfa04]" name="beforeTest" is-config="true" duration-ms="1" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaIntervalSerializerTest@1a968a59]" name="beforeTest" is-config="true" duration-ms="0" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaLocalDateSerializerTest@31ef45e3]" name="beforeTest" is-config="true" duration-ms="1" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaLocalDateTimeSerializerTest@e45f292]" name="beforeTest" is-config="true" duration-ms="1" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaLocalTimeSerializerTest@7d9d1a19]" name="beforeTest" is-config="true" duration-ms="0" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="beforeTest" is-config="true" duration-ms="9" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.dexx.ListSerializerTest@6eebc39e]" name="setUp" is-config="true" duration-ms="6" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.dexx.MapSerializerTest@4dfa3a9d]" name="setUp" is-config="true" duration-ms="4" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:de.javakaffee.kryoserializers.wicket.MiniMapSerializerTest@27efef64]" name="beforeTest" is-config="true" duration-ms="1" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.protobuf.ProtobufSerializerTest@5bcab519]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5442a311]" name="setUp" is-config="true" duration-ms="1" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.dexx.SetSerializerTest@57baeedf]" name="setUp" is-config="true" duration-ms="1" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:de.javakaffee.kryoserializers.UnicodeBlockSerializerTest@754ba872]" name="beforeTest" is-config="true" duration-ms="4" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.guava.UnmodifiableNavigableSetSerializerTest@57fffcd7]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:de.javakaffee.kryoserializers.wicket.WicketTest@f6c48ac]" name="beforeTest" is-config="true" duration-ms="77" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="testCGLibProxy()[pri:0, instance:de.javakaffee.kryoserializers.cglib.CGLibProxySerializerTest@1794d431]" name="testCGLibProxy" duration-ms="33" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCGLibProxy -->
        <test-method status="PASS" signature="testCGLibProxyForExistingFormat()[pri:0, instance:de.javakaffee.kryoserializers.cglib.CGLibProxySerializerTest@1794d431]" name="testCGLibProxyForExistingFormat" duration-ms="14" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCGLibProxyForExistingFormat -->
        <test-method status="PASS" signature="testContainerWithCGLibProxy()[pri:0, instance:de.javakaffee.kryoserializers.cglib.CGLibProxySerializerTest@1794d431]" name="testContainerWithCGLibProxy" duration-ms="7" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testContainerWithCGLibProxy -->
        <test-method status="PASS" signature="testProxiesFromFileRead()[pri:0, instance:de.javakaffee.kryoserializers.cglib.CGLibProxySerializerTest@1794d431]" name="testProxiesFromFileRead" duration-ms="2" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProxiesFromFileRead -->
      </class> <!-- de.javakaffee.kryoserializers.cglib.CGLibProxySerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest">
        <test-method status="PASS" signature="testCopyImmutableListMultimap()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@4667ae56]" name="testCopyImmutableListMultimap" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyImmutableListMultimap -->
        <test-method status="PASS" signature="testCopyEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@4667ae56]" name="testCopyEmpty" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmpty -->
        <test-method status="PASS" signature="testCopyImmutableSetMultimapEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@4667ae56]" name="testCopyImmutableSetMultimapEmpty" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyImmutableSetMultimapEmpty -->
        <test-method status="PASS" signature="testCopyImmutableSetMultimap()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@4667ae56]" name="testCopyImmutableSetMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyImmutableSetMultimap -->
        <test-method status="PASS" signature="testCopyRegular()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@4667ae56]" name="testCopyRegular" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRegular -->
        <test-method status="PASS" signature="testCopyImmutableListMultimapEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@4667ae56]" name="testCopyImmutableListMultimapEmpty" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyImmutableListMultimapEmpty -->
        <test-method status="PASS" signature="testImmutableListMultimap()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@4667ae56]" name="testImmutableListMultimap" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableListMultimap -->
        <test-method status="PASS" signature="testCopySingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@4667ae56]" name="testCopySingleton" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySingleton -->
        <test-method status="PASS" signature="testImmutableListMultimapSingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@4667ae56]" name="testImmutableListMultimapSingleton" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableListMultimapSingleton -->
        <test-method status="PASS" signature="testImmutableListSerializerAlreadyRegistered()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@4667ae56]" name="testImmutableListSerializerAlreadyRegistered" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableListSerializerAlreadyRegistered -->
        <test-method status="PASS" signature="testImmutableListMultimapEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@4667ae56]" name="testImmutableListMultimapEmpty" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableListMultimapEmpty -->
        <test-method status="PASS" signature="testImmutableListMultimapMultipleElementsPerKey()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@4667ae56]" name="testImmutableListMultimapMultipleElementsPerKey" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableListMultimapMultipleElementsPerKey -->
        <test-method status="PASS" signature="testImmutableMapSerializerAlreadyRegistered()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@4667ae56]" name="testImmutableMapSerializerAlreadyRegistered" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableMapSerializerAlreadyRegistered -->
        <test-method status="PASS" signature="testImmutableSetMultimapMultipleElementsPerKey()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@4667ae56]" name="testImmutableSetMultimapMultipleElementsPerKey" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableSetMultimapMultipleElementsPerKey -->
        <test-method status="PASS" signature="testImmutableSetMultimap()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@4667ae56]" name="testImmutableSetMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableSetMultimap -->
        <test-method status="PASS" signature="testImmutableSetMultimapEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@4667ae56]" name="testImmutableSetMultimapEmpty" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableSetMultimapEmpty -->
        <test-method status="PASS" signature="testImmutableSetMultimapSingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@4667ae56]" name="testImmutableSetMultimapSingleton" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableSetMultimapSingleton -->
        <test-method status="PASS" signature="testRegular()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@4667ae56]" name="testRegular" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegular -->
        <test-method status="PASS" signature="testImmutableSetSerializerAlreadyRegistered()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@4667ae56]" name="testImmutableSetSerializerAlreadyRegistered" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableSetSerializerAlreadyRegistered -->
        <test-method status="PASS" signature="testRegularMultipleElementsPerKey()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@4667ae56]" name="testRegularMultipleElementsPerKey" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegularMultipleElementsPerKey -->
        <test-method status="PASS" signature="testRegularEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@4667ae56]" name="testRegularEmpty" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegularEmpty -->
        <test-method status="PASS" signature="testRegularSingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@4667ae56]" name="testRegularSingleton" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegularSingleton -->
      </class> <!-- de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest">
        <test-method status="PASS" signature="initializeKyroWithSerializer()[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@548e7350]" name="initializeKyroWithSerializer" is-config="true" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializeKyroWithSerializer -->
        <test-method status="PASS" signature="testDifferentKeyComparator()[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@548e7350]" name="testDifferentKeyComparator" duration-ms="8" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDifferentKeyComparator -->
        <test-method status="PASS" signature="testDifferentValueComparator()[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@548e7350]" name="testDifferentValueComparator" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDifferentValueComparator -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@548e7350]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps (no nulls)" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@55de24cc]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@548e7350]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps (no nulls)" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@69c81773]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@548e7350]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps (no nulls)" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@c05fddc]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@548e7350]" name="testMultimap" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps (no nulls)" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@7b4c50bc]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@548e7350]" name="testMultimapCopy" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps (no nulls)" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@3932c79a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@548e7350]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps (no nulls)" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@16150369]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@548e7350]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps (no nulls)" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@1a4927d6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@548e7350]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps (no nulls)" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@60f00693]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@548e7350]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps (no nulls)" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@97e93f1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@548e7350]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps (no nulls)" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@34bde49d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
      </class> <!-- de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest -->
      <class name="de.javakaffee.kryoserializers.protobuf.ProtobufSerializerTest">
        <test-method status="PASS" signature="testGetAcceptsNull()[pri:0, instance:de.javakaffee.kryoserializers.protobuf.ProtobufSerializerTest@5bcab519]" name="testGetAcceptsNull" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAcceptsNull -->
        <test-method status="PASS" signature="testNull()[pri:0, instance:de.javakaffee.kryoserializers.protobuf.ProtobufSerializerTest@5bcab519]" name="testNull" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNull -->
        <test-method status="PASS" signature="testSerializerWithMultipleInstances()[pri:0, instance:de.javakaffee.kryoserializers.protobuf.ProtobufSerializerTest@5bcab519]" name="testSerializerWithMultipleInstances" duration-ms="28" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSerializerWithMultipleInstances -->
        <test-method status="PASS" signature="testSerializerWithMultipleInstancesDifferentTypes()[pri:0, instance:de.javakaffee.kryoserializers.protobuf.ProtobufSerializerTest@5bcab519]" name="testSerializerWithMultipleInstancesDifferentTypes" duration-ms="2" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSerializerWithMultipleInstancesDifferentTypes -->
        <test-method status="PASS" signature="testSerializerWithProtoA()[pri:0, instance:de.javakaffee.kryoserializers.protobuf.ProtobufSerializerTest@5bcab519]" name="testSerializerWithProtoA" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSerializerWithProtoA -->
      </class> <!-- de.javakaffee.kryoserializers.protobuf.ProtobufSerializerTest -->
      <class name="de.javakaffee.kryoserializers.jodatime.JodaIntervalSerializerTest">
        <test-method status="PASS" signature="testCopyJodaDateTime()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaIntervalSerializerTest@1a968a59]" name="testCopyJodaDateTime" duration-ms="31" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJodaDateTime -->
        <test-method status="PASS" signature="testJodaInterval()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaIntervalSerializerTest@1a968a59]" name="testJodaInterval" duration-ms="7" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJodaInterval -->
      </class> <!-- de.javakaffee.kryoserializers.jodatime.JodaIntervalSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest">
        <test-method status="PASS" signature="testCopyEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@204f30ec]" name="testCopyEmpty" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmpty -->
        <test-method status="PASS" signature="testCopySingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@204f30ec]" name="testCopySingleton" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySingleton -->
        <test-method status="PASS" signature="testCopyReverse()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@204f30ec]" name="testCopyReverse" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyReverse -->
        <test-method status="PASS" signature="testCopyRegular()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@204f30ec]" name="testCopyRegular" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRegular -->
        <test-method status="PASS" signature="testEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@204f30ec]" name="testEmpty" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method status="PASS" signature="testCopyValues()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@204f30ec]" name="testCopyValues" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyValues -->
        <test-method status="PASS" signature="testCopySubList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@204f30ec]" name="testCopySubList" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySubList -->
        <test-method status="PASS" signature="testCopyStringAsImmutableList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@204f30ec]" name="testCopyStringAsImmutableList" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyStringAsImmutableList -->
        <test-method status="PASS" signature="testStringAsImmutableList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@204f30ec]" name="testStringAsImmutableList" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringAsImmutableList -->
        <test-method status="PASS" signature="testRegular()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@204f30ec]" name="testRegular" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegular -->
        <test-method status="PASS" signature="testSingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@204f30ec]" name="testSingleton" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSingleton -->
        <test-method status="PASS" signature="testReverse()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@204f30ec]" name="testReverse" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReverse -->
        <test-method status="PASS" signature="testValues()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@204f30ec]" name="testValues" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValues -->
        <test-method status="PASS" signature="testSubList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@204f30ec]" name="testSubList" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubList -->
      </class> <!-- de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.ImmutableSortedSetSerializerTest">
        <test-method status="PASS" signature="testCopyEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedSetSerializerTest@3c0ecd4b]" name="testCopyEmpty" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmpty -->
        <test-method status="PASS" signature="testCopyRegular()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedSetSerializerTest@3c0ecd4b]" name="testCopyRegular" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRegular -->
        <test-method status="PASS" signature="testCopyDescending()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedSetSerializerTest@3c0ecd4b]" name="testCopyDescending" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyDescending -->
        <test-method status="PASS" signature="testDescending()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedSetSerializerTest@3c0ecd4b]" name="testDescending" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDescending -->
        <test-method status="PASS" signature="testCopySingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedSetSerializerTest@3c0ecd4b]" name="testCopySingleton" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySingleton -->
        <test-method status="PASS" signature="testEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedSetSerializerTest@3c0ecd4b]" name="testEmpty" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method status="PASS" signature="testStringAsImmutableSortedSet()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedSetSerializerTest@3c0ecd4b]" name="testStringAsImmutableSortedSet" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringAsImmutableSortedSet -->
        <test-method status="PASS" signature="testRegular()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedSetSerializerTest@3c0ecd4b]" name="testRegular" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegular -->
        <test-method status="PASS" signature="testSingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedSetSerializerTest@3c0ecd4b]" name="testSingleton" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSingleton -->
      </class> <!-- de.javakaffee.kryoserializers.guava.ImmutableSortedSetSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest">
        <test-method status="PASS" signature="initializeKyroWithSerializer()[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@4883b407]" name="initializeKyroWithSerializer" is-config="true" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializeKyroWithSerializer -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@4883b407]" name="testMultimap" duration-ms="2" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@53fdffa1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@4883b407]" name="testMultimap" duration-ms="2" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@7fee8714]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@4883b407]" name="testMultimap" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@1a18644]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@4883b407]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@3f6b0be5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@4883b407]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@48f278eb]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@4883b407]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@6cd28fa7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@4883b407]" name="testMultimap" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@58695725]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@4883b407]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@25fb8912]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@4883b407]" name="testMultimap" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@7bd4937b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@4883b407]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@306e95ec]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@4883b407]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@58d75e99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@4883b407]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@2ed2d9cb]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@4883b407]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@4f2b503c]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@4883b407]" name="testMultimapCopy" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@342c38f8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@4883b407]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@e15b7e8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@4883b407]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@485966cc]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@4883b407]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@57cf54e1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@4883b407]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@17497425]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
      </class> <!-- de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.ImmutableSetSerializerTest">
        <test-method status="PASS" signature="testCopyEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSetSerializerTest@598067a5]" name="testCopyEmpty" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmpty -->
        <test-method status="PASS" signature="testCopyRegular()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSetSerializerTest@598067a5]" name="testCopyRegular" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRegular -->
        <test-method status="PASS" signature="testEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSetSerializerTest@598067a5]" name="testEmpty" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method status="PASS" signature="testCopySingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSetSerializerTest@598067a5]" name="testCopySingleton" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySingleton -->
        <test-method status="PASS" signature="testRegular()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSetSerializerTest@598067a5]" name="testRegular" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegular -->
        <test-method status="PASS" signature="testSingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSetSerializerTest@598067a5]" name="testSingleton" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSingleton -->
        <test-method status="PASS" signature="testStringAsImmutableSet()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSetSerializerTest@598067a5]" name="testStringAsImmutableSet" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringAsImmutableSet -->
      </class> <!-- de.javakaffee.kryoserializers.guava.ImmutableSetSerializerTest -->
      <class name="de.javakaffee.kryoserializers.EnumMapSerializerTest">
        <test-method status="PASS" signature="testCopyEmpty()[pri:0, instance:de.javakaffee.kryoserializers.EnumMapSerializerTest@e25b2fe]" name="testCopyEmpty" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <exception class="java.lang.ClassCastException">
            <message>
              <![CDATA[class de.javakaffee.kryoserializers.EnumMapSerializerTest$Colors != class de.javakaffee.kryoserializers.EnumMapSerializerTest$Vipers]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.ClassCastException: class de.javakaffee.kryoserializers.EnumMapSerializerTest$Colors != class de.javakaffee.kryoserializers.EnumMapSerializerTest$Vipers
	at java.util.EnumMap.typeCheck(EnumMap.java:745)
	at java.util.EnumMap.put(EnumMap.java:267)
	at de.javakaffee.kryoserializers.EnumMapSerializerTest.testCopyEmpty(EnumMapSerializerTest.java:42)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:136)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:145)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.ClassCastException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmpty -->
        <test-method status="PASS" signature="testDeepCopy()[pri:0, instance:de.javakaffee.kryoserializers.EnumMapSerializerTest@e25b2fe]" name="testDeepCopy" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeepCopy -->
      </class> <!-- de.javakaffee.kryoserializers.EnumMapSerializerTest -->
      <class name="de.javakaffee.kryoserializers.UnicodeBlockSerializerTest">
        <test-method status="PASS" signature="testBasicRoundTrip()[pri:0, instance:de.javakaffee.kryoserializers.UnicodeBlockSerializerTest@754ba872]" name="testBasicRoundTrip" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBasicRoundTrip -->
        <test-method status="PASS" signature="testCopyContainingObject()[pri:0, instance:de.javakaffee.kryoserializers.UnicodeBlockSerializerTest@754ba872]" name="testCopyContainingObject" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyContainingObject -->
        <test-method status="PASS" signature="testDeserializingUnknownInstanceReturnsNull()[pri:0, instance:de.javakaffee.kryoserializers.UnicodeBlockSerializerTest@754ba872]" name="testDeserializingUnknownInstanceReturnsNull" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeserializingUnknownInstanceReturnsNull -->
      </class> <!-- de.javakaffee.kryoserializers.UnicodeBlockSerializerTest -->
      <class name="de.javakaffee.kryoserializers.jodatime.JodaLocalDateSerializerTest">
        <test-method status="PASS" signature="testCopyJodaLocalDate()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaLocalDateSerializerTest@31ef45e3]" name="testCopyJodaLocalDate" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJodaLocalDate -->
        <test-method status="PASS" signature="testJodaLocalDate()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaLocalDateSerializerTest@31ef45e3]" name="testJodaLocalDate" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJodaLocalDate -->
      </class> <!-- de.javakaffee.kryoserializers.jodatime.JodaLocalDateSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.ImmutableSortedMapSerializerTest">
        <test-method status="PASS" signature="testCopyEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedMapSerializerTest@77cd7a0]" name="testCopyEmpty" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmpty -->
        <test-method status="PASS" signature="testCopyRegular()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedMapSerializerTest@77cd7a0]" name="testCopyRegular" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRegular -->
        <test-method status="PASS" signature="testCopySingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedMapSerializerTest@77cd7a0]" name="testCopySingleton" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySingleton -->
        <test-method status="PASS" signature="testDescending()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedMapSerializerTest@77cd7a0]" name="testDescending" duration-ms="7" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDescending -->
        <test-method status="PASS" signature="testEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedMapSerializerTest@77cd7a0]" name="testEmpty" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method status="PASS" signature="testEnum()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedMapSerializerTest@77cd7a0]" name="testEnum" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnum -->
        <test-method status="PASS" signature="testSingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedMapSerializerTest@77cd7a0]" name="testSingleton" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSingleton -->
        <test-method status="PASS" signature="testRegular()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedMapSerializerTest@77cd7a0]" name="testRegular" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegular -->
      </class> <!-- de.javakaffee.kryoserializers.guava.ImmutableSortedMapSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest">
        <test-method status="PASS" signature="initializeKyroWithSerializer()[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@14bf9759]" name="initializeKyroWithSerializer" is-config="true" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializeKyroWithSerializer -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@14bf9759]" name="testMultimap" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@4a883b15]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@14bf9759]" name="testMultimap" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@4d154ccd]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@14bf9759]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@5677323c]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@14bf9759]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@1e0b4072]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@14bf9759]" name="testMultimap" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@45099dd3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@14bf9759]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@41a0aa7d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@14bf9759]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@4b45a2f5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@14bf9759]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@60099951]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@14bf9759]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@368247b9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@14bf9759]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@6574a52c]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@14bf9759]" name="testMultimapCopy" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@2a7f1f10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@14bf9759]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@3646a422]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@14bf9759]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@d86a6f]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@14bf9759]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@3c77d488]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@14bf9759]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@55a147cc]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@14bf9759]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@2e385cce]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@14bf9759]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@7526515b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@14bf9759]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@26d9b808]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
      </class> <!-- de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest -->
      <class name="de.javakaffee.kryoserializers.dexx.SetSerializerTest">
        <test-method status="PASS" signature="testCopyEmpty()[pri:0, instance:de.javakaffee.kryoserializers.dexx.SetSerializerTest@57baeedf]" name="testCopyEmpty" duration-ms="2" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmpty -->
        <test-method status="PASS" signature="testEmpty()[pri:0, instance:de.javakaffee.kryoserializers.dexx.SetSerializerTest@57baeedf]" name="testEmpty" duration-ms="2" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method status="PASS" signature="testCopyRegular()[pri:0, instance:de.javakaffee.kryoserializers.dexx.SetSerializerTest@57baeedf]" name="testCopyRegular" duration-ms="0" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRegular -->
        <test-method status="PASS" signature="testRegular()[pri:0, instance:de.javakaffee.kryoserializers.dexx.SetSerializerTest@57baeedf]" name="testRegular" duration-ms="0" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegular -->
      </class> <!-- de.javakaffee.kryoserializers.dexx.SetSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.UnmodifiableNavigableSetSerializerTest">
        <test-method status="PASS" signature="testCopyEmptySkipList()[pri:0, instance:de.javakaffee.kryoserializers.guava.UnmodifiableNavigableSetSerializerTest@57fffcd7]" name="testCopyEmptySkipList" duration-ms="3" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmptySkipList -->
        <test-method status="PASS" signature="testCopyEmptyTreeSet()[pri:0, instance:de.javakaffee.kryoserializers.guava.UnmodifiableNavigableSetSerializerTest@57fffcd7]" name="testCopyEmptyTreeSet" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmptyTreeSet -->
        <test-method status="PASS" signature="testCopyPopulatedSkipList()[pri:0, instance:de.javakaffee.kryoserializers.guava.UnmodifiableNavigableSetSerializerTest@57fffcd7]" name="testCopyPopulatedSkipList" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyPopulatedSkipList -->
        <test-method status="PASS" signature="testCopyPopulatedTreeSet()[pri:0, instance:de.javakaffee.kryoserializers.guava.UnmodifiableNavigableSetSerializerTest@57fffcd7]" name="testCopyPopulatedTreeSet" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyPopulatedTreeSet -->
        <test-method status="PASS" signature="testEmptySkipList()[pri:0, instance:de.javakaffee.kryoserializers.guava.UnmodifiableNavigableSetSerializerTest@57fffcd7]" name="testEmptySkipList" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmptySkipList -->
        <test-method status="PASS" signature="testPopulatedTreeSet()[pri:0, instance:de.javakaffee.kryoserializers.guava.UnmodifiableNavigableSetSerializerTest@57fffcd7]" name="testPopulatedTreeSet" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPopulatedTreeSet -->
        <test-method status="PASS" signature="testEmptyTreeSet()[pri:0, instance:de.javakaffee.kryoserializers.guava.UnmodifiableNavigableSetSerializerTest@57fffcd7]" name="testEmptyTreeSet" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmptyTreeSet -->
        <test-method status="PASS" signature="testPopulatedSkipList()[pri:0, instance:de.javakaffee.kryoserializers.guava.UnmodifiableNavigableSetSerializerTest@57fffcd7]" name="testPopulatedSkipList" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPopulatedSkipList -->
      </class> <!-- de.javakaffee.kryoserializers.guava.UnmodifiableNavigableSetSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest">
        <test-method status="PASS" signature="initializeKryoWithSerializer()[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@146ba0ac]" name="initializeKryoWithSerializer" is-config="true" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializeKryoWithSerializer -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@146ba0ac]" name="testMultimap" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@13526e59]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@146ba0ac]" name="testMultimap" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@10289886]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@146ba0ac]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@3e78b6a5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@146ba0ac]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@5167f57d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@146ba0ac]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@7975d1d8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@146ba0ac]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@50f6ac94]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@146ba0ac]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@7f2cfe3f]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@146ba0ac]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@3e2055d6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@146ba0ac]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@61710c6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@146ba0ac]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@7d9f158f]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@146ba0ac]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@32115b28]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@146ba0ac]" name="testMultimapCopy" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@2bdd8394]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@146ba0ac]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@4a07d605]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@146ba0ac]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@7fd7a283]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@146ba0ac]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@a8ef162]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@146ba0ac]" name="testMultimapCopy" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@54e041a4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@146ba0ac]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@2f01783a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@146ba0ac]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@18317edc]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
      </class> <!-- de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest">
        <test-method status="PASS" signature="testCopyRegular()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest@343f4d3d]" name="testCopyRegular" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRegular -->
        <test-method status="PASS" signature="testCopyEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest@343f4d3d]" name="testCopyEmpty" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmpty -->
        <test-method status="PASS" signature="testCopySingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest@343f4d3d]" name="testCopySingleton" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySingleton -->
        <test-method status="PASS" signature="testEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest@343f4d3d]" name="testEmpty" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method status="PASS" signature="testEnum()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest@343f4d3d]" name="testEnum" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnum -->
        <test-method status="PASS" signature="testSingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest@343f4d3d]" name="testSingleton" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSingleton -->
        <test-method status="PASS" signature="testRegular()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest@343f4d3d]" name="testRegular" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegular -->
      </class> <!-- de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.ReverseListSerializerTest">
        <test-method status="PASS" signature="testCopyEmptyRandomAccessReverseList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5442a311]" name="testCopyEmptyRandomAccessReverseList" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmptyRandomAccessReverseList -->
        <test-method status="PASS" signature="testCopyEmptyReverseList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5442a311]" name="testCopyEmptyReverseList" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmptyReverseList -->
        <test-method status="PASS" signature="testCopyRegularRandomAccessReverseList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5442a311]" name="testCopyRegularRandomAccessReverseList" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRegularRandomAccessReverseList -->
        <test-method status="PASS" signature="testCopyRegularReverseList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5442a311]" name="testCopyRegularReverseList" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRegularReverseList -->
        <test-method status="PASS" signature="testCopySingletonReverseList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5442a311]" name="testCopySingletonReverseList" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySingletonReverseList -->
        <test-method status="PASS" signature="testRegularRandomAccessReverseList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5442a311]" name="testRegularRandomAccessReverseList" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegularRandomAccessReverseList -->
        <test-method status="PASS" signature="testCopySingletonRandomAccessReverseList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5442a311]" name="testCopySingletonRandomAccessReverseList" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySingletonRandomAccessReverseList -->
        <test-method status="PASS" signature="testEmptyRandomAccessReverseList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5442a311]" name="testEmptyRandomAccessReverseList" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmptyRandomAccessReverseList -->
        <test-method status="PASS" signature="testEmptyReverseList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5442a311]" name="testEmptyReverseList" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmptyReverseList -->
        <test-method status="PASS" signature="testSingletonReverseList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5442a311]" name="testSingletonReverseList" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSingletonReverseList -->
        <test-method status="PASS" signature="testRegularReverseList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5442a311]" name="testRegularReverseList" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegularReverseList -->
        <test-method status="PASS" signature="testSingletonRandomAccessReverseList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5442a311]" name="testSingletonRandomAccessReverseList" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSingletonRandomAccessReverseList -->
      </class> <!-- de.javakaffee.kryoserializers.guava.ReverseListSerializerTest -->
      <class name="de.javakaffee.kryoserializers.SubListSerializersTest">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:de.javakaffee.kryoserializers.SubListSerializersTest@13deb50e]" name="beforeClass" is-config="true" duration-ms="1" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="testArrayListSubList()[pri:0, instance:de.javakaffee.kryoserializers.SubListSerializersTest@13deb50e]" name="testArrayListSubList" duration-ms="1" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testArrayListSubList -->
        <test-method status="PASS" signature="testCopyArrayListSubList()[pri:0, instance:de.javakaffee.kryoserializers.SubListSerializersTest@13deb50e]" name="testCopyArrayListSubList" duration-ms="3" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyArrayListSubList -->
        <test-method status="PASS" signature="testArrayListSubListWithSharedItems()[pri:0, instance:de.javakaffee.kryoserializers.SubListSerializersTest@13deb50e]" name="testArrayListSubListWithSharedItems" duration-ms="0" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testArrayListSubListWithSharedItems -->
        <test-method status="PASS" signature="testArrayListSubListSubList()[pri:0, instance:de.javakaffee.kryoserializers.SubListSerializersTest@13deb50e]" name="testArrayListSubListSubList" duration-ms="0" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testArrayListSubListSubList -->
        <test-method status="PASS" signature="testCopySubList()[pri:0, instance:de.javakaffee.kryoserializers.SubListSerializersTest@13deb50e]" name="testCopySubList" duration-ms="1" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySubList -->
        <test-method status="PASS" signature="testCopyArrayListSubListSubList()[pri:0, instance:de.javakaffee.kryoserializers.SubListSerializersTest@13deb50e]" name="testCopyArrayListSubListSubList" duration-ms="0" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyArrayListSubListSubList -->
        <test-method status="PASS" signature="testCopySubListSubList()[pri:0, instance:de.javakaffee.kryoserializers.SubListSerializersTest@13deb50e]" name="testCopySubListSubList" duration-ms="0" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySubListSubList -->
        <test-method status="PASS" signature="testNestedArrayListSubListWithSharedItems_2()[pri:0, instance:de.javakaffee.kryoserializers.SubListSerializersTest@13deb50e]" name="testNestedArrayListSubListWithSharedItems_2" duration-ms="1" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedArrayListSubListWithSharedItems_2 -->
        <test-method status="PASS" signature="testNestedArrayListSubListWithSharedItems_1()[pri:0, instance:de.javakaffee.kryoserializers.SubListSerializersTest@13deb50e]" name="testNestedArrayListSubListWithSharedItems_1" duration-ms="0" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedArrayListSubListWithSharedItems_1 -->
        <test-method status="PASS" signature="testSubListSubList()[pri:0, instance:de.javakaffee.kryoserializers.SubListSerializersTest@13deb50e]" name="testSubListSubList" duration-ms="1" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubListSubList -->
        <test-method status="PASS" signature="testSubList()[pri:0, instance:de.javakaffee.kryoserializers.SubListSerializersTest@13deb50e]" name="testSubList" duration-ms="0" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubList -->
      </class> <!-- de.javakaffee.kryoserializers.SubListSerializersTest -->
      <class name="de.javakaffee.kryoserializers.dexx.MapSerializerTest">
        <test-method status="PASS" signature="testCopyEmpty()[pri:0, instance:de.javakaffee.kryoserializers.dexx.MapSerializerTest@4dfa3a9d]" name="testCopyEmpty" duration-ms="0" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmpty -->
        <test-method status="PASS" signature="testCopyRegular()[pri:0, instance:de.javakaffee.kryoserializers.dexx.MapSerializerTest@4dfa3a9d]" name="testCopyRegular" duration-ms="1" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRegular -->
        <test-method status="PASS" signature="testEmpty()[pri:0, instance:de.javakaffee.kryoserializers.dexx.MapSerializerTest@4dfa3a9d]" name="testEmpty" duration-ms="12" started-at="2020-07-30T18:53:52Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method status="PASS" signature="testRegular()[pri:0, instance:de.javakaffee.kryoserializers.dexx.MapSerializerTest@4dfa3a9d]" name="testRegular" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegular -->
      </class> <!-- de.javakaffee.kryoserializers.dexx.MapSerializerTest -->
      <class name="de.javakaffee.kryoserializers.wicket.MiniMapSerializerTest">
        <test-method status="PASS" signature="testMiniMapAddEntriesAfterDeserialization()[pri:0, instance:de.javakaffee.kryoserializers.wicket.MiniMapSerializerTest@27efef64]" name="testMiniMapAddEntriesAfterDeserialization" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMiniMapAddEntriesAfterDeserialization -->
        <test-method status="PASS" signature="testMiniMapLessThanMaxEntries()[pri:0, instance:de.javakaffee.kryoserializers.wicket.MiniMapSerializerTest@27efef64]" name="testMiniMapLessThanMaxEntries" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMiniMapLessThanMaxEntries -->
        <test-method status="PASS" signature="testMiniMapExactNumberOfEntries()[pri:0, instance:de.javakaffee.kryoserializers.wicket.MiniMapSerializerTest@27efef64]" name="testMiniMapExactNumberOfEntries" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMiniMapExactNumberOfEntries -->
        <test-method status="PASS" signature="testMiniMapEmpty()[pri:0, instance:de.javakaffee.kryoserializers.wicket.MiniMapSerializerTest@27efef64]" name="testMiniMapEmpty" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMiniMapEmpty -->
      </class> <!-- de.javakaffee.kryoserializers.wicket.MiniMapSerializerTest -->
      <class name="de.javakaffee.kryoserializers.jodatime.JodaLocalTimeSerializerTest">
        <test-method status="PASS" signature="testCopyJodaLocalTime()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaLocalTimeSerializerTest@7d9d1a19]" name="testCopyJodaLocalTime" duration-ms="10" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJodaLocalTime -->
        <test-method status="PASS" signature="testJodaLocalTime()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaLocalTimeSerializerTest@7d9d1a19]" name="testJodaLocalTime" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJodaLocalTime -->
      </class> <!-- de.javakaffee.kryoserializers.jodatime.JodaLocalTimeSerializerTest -->
      <class name="de.javakaffee.kryoserializers.FieldAnnotationAwareSerializerTest">
        <test-method status="PASS" signature="testExcludeFields()[pri:0, instance:de.javakaffee.kryoserializers.FieldAnnotationAwareSerializerTest@39c0f4a]" name="testExcludeFields" duration-ms="2" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExcludeFields -->
        <test-method status="PASS" signature="testIncludeFields()[pri:0, instance:de.javakaffee.kryoserializers.FieldAnnotationAwareSerializerTest@39c0f4a]" name="testIncludeFields" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIncludeFields -->
      </class> <!-- de.javakaffee.kryoserializers.FieldAnnotationAwareSerializerTest -->
      <class name="de.javakaffee.kryoserializers.jodatime.JodaDateTimeSerializerTest">
        <test-method status="PASS" signature="testJodaDateTime()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaDateTimeSerializerTest@3abbfa04]" name="testJodaDateTime" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJodaDateTime -->
        <test-method status="PASS" signature="testCopyJodaDateTime()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaDateTimeSerializerTest@3abbfa04]" name="testCopyJodaDateTime" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJodaDateTime -->
      </class> <!-- de.javakaffee.kryoserializers.jodatime.JodaDateTimeSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest">
        <test-method status="PASS" signature="initializeKyroWithSerializer()[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@239963d8]" name="initializeKyroWithSerializer" is-config="true" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializeKyroWithSerializer -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@239963d8]" name="testMultimap" duration-ms="2" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@290222c1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@239963d8]" name="testMultimap" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@4b8ee4de]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@239963d8]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@54a7079e]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@239963d8]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@428640fa]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@239963d8]" name="testMultimap" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@29215f06]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@239963d8]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@1151e434]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@239963d8]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@55634720]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@239963d8]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@6bd61f98]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@239963d8]" name="testMultimap" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@b9b00e0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@239963d8]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@52b1beb6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@239963d8]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@771a660]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@239963d8]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@783a467b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@239963d8]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@72e5a8e]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@239963d8]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@3f6f6701]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@239963d8]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@5e600dd5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@239963d8]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@4f80542f]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@239963d8]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@1ed6388a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@239963d8]" name="testMultimapCopy" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@2e3967ea]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
      </class> <!-- de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest -->
      <class name="de.javakaffee.kryoserializers.wicket.WicketTest">
        <test-method status="PASS" signature="testFeedbackPanel()[pri:0, instance:de.javakaffee.kryoserializers.wicket.WicketTest@f6c48ac]" name="testFeedbackPanel" duration-ms="12" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFeedbackPanel -->
        <test-method status="PASS" signature="testMarkupContainerChildList()[pri:0, instance:de.javakaffee.kryoserializers.wicket.WicketTest@f6c48ac]" name="testMarkupContainerChildList" duration-ms="3" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMarkupContainerChildList -->
        <test-method status="PASS" signature="afterTest()[pri:0, instance:de.javakaffee.kryoserializers.wicket.WicketTest@f6c48ac]" name="afterTest" is-config="true" duration-ms="107" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
      </class> <!-- de.javakaffee.kryoserializers.wicket.WicketTest -->
      <class name="de.javakaffee.kryoserializers.dexx.ListSerializerTest">
        <test-method status="PASS" signature="testCopyCopyOfIterable()[pri:0, instance:de.javakaffee.kryoserializers.dexx.ListSerializerTest@6eebc39e]" name="testCopyCopyOfIterable" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyCopyOfIterable -->
        <test-method status="PASS" signature="testCopyEmpty()[pri:0, instance:de.javakaffee.kryoserializers.dexx.ListSerializerTest@6eebc39e]" name="testCopyEmpty" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmpty -->
        <test-method status="PASS" signature="testCopyOfIterable()[pri:0, instance:de.javakaffee.kryoserializers.dexx.ListSerializerTest@6eebc39e]" name="testCopyOfIterable" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyOfIterable -->
        <test-method status="PASS" signature="testCopyRegular()[pri:0, instance:de.javakaffee.kryoserializers.dexx.ListSerializerTest@6eebc39e]" name="testCopyRegular" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRegular -->
        <test-method status="PASS" signature="testRegular()[pri:0, instance:de.javakaffee.kryoserializers.dexx.ListSerializerTest@6eebc39e]" name="testRegular" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegular -->
        <test-method status="PASS" signature="testEmpty()[pri:0, instance:de.javakaffee.kryoserializers.dexx.ListSerializerTest@6eebc39e]" name="testEmpty" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
      </class> <!-- de.javakaffee.kryoserializers.dexx.ListSerializerTest -->
      <class name="de.javakaffee.kryoserializers.jodatime.JodaLocalDateTimeSerializerTest">
        <test-method status="PASS" signature="testCopyJodaLocalDateTime()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaLocalDateTimeSerializerTest@e45f292]" name="testCopyJodaLocalDateTime" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJodaLocalDateTime -->
        <test-method status="PASS" signature="testJodaLocalDateTime()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaLocalDateTimeSerializerTest@e45f292]" name="testJodaLocalDateTime" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJodaLocalDateTime -->
      </class> <!-- de.javakaffee.kryoserializers.jodatime.JodaLocalDateTimeSerializerTest -->
      <class name="de.javakaffee.kryoserializers.KryoTest">
        <test-method status="PASS" signature="testBitSet()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testBitSet" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitSet -->
        <test-method status="PASS" signature="testClassWithoutDefaultConstructor()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testClassWithoutDefaultConstructor" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClassWithoutDefaultConstructor -->
        <test-method status="PASS" signature="testClassSerializer()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testClassSerializer" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClassSerializer -->
        <test-method status="PASS" signature="testCollections()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCollections" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollections -->
        <test-method status="PASS" signature="testCopyBitSet()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopyBitSet" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyBitSet -->
        <test-method status="PASS" signature="testCopyEnumMap()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopyEnumMap" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEnumMap -->
        <test-method status="PASS" signature="testCopyEnumSet()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopyEnumSet" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEnumSet -->
        <test-method status="PASS" signature="testCopyForIterateMapSerializer()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopyForIterateMapSerializer" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyForIterateMapSerializer -->
        <test-method status="PASS" signature="testCopyGregorianCalendar()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopyGregorianCalendar" duration-ms="8" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyGregorianCalendar -->
        <test-method status="PASS" signature="testCopyJavaSqlDate()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopyJavaSqlDate" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJavaSqlDate -->
        <test-method status="PASS" signature="testCopyJavaSqlTimestamp()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopyJavaSqlTimestamp" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJavaSqlTimestamp -->
        <test-method status="PASS" signature="testCopyJavaSqlTime()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopyJavaSqlTime" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJavaSqlTime -->
        <test-method status="PASS" signature="testCopyJavaUtilCollectionsEmptyList()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopyJavaUtilCollectionsEmptyList" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJavaUtilCollectionsEmptyList -->
        <test-method status="PASS" signature="testCopyJavaUtilArraysAsList()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopyJavaUtilArraysAsList" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJavaUtilArraysAsList -->
        <test-method status="PASS" signature="testCopyJavaUtilCollectionsEmptySet()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopyJavaUtilCollectionsEmptySet" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJavaUtilCollectionsEmptySet -->
        <test-method status="PASS" signature="testCopyJavaUtilCollectionsEmptyMap()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopyJavaUtilCollectionsEmptyMap" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJavaUtilCollectionsEmptyMap -->
        <test-method status="PASS" signature="testCopyJdkProxy()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopyJdkProxy" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJdkProxy -->
        <test-method status="PASS" signature="testCopyJavaUtilDate()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopyJavaUtilDate" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJavaUtilDate -->
        <test-method status="PASS" signature="testCopyRegex()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopyRegex" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRegex -->
        <test-method status="PASS" signature="testCopySynchronizedCollections(java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopySynchronizedCollections" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="synchronizedCollections" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo, bar]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySynchronizedCollections -->
        <test-method status="PASS" signature="testCopySingletonList()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopySingletonList" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySingletonList -->
        <test-method status="PASS" signature="testCopySingletonMap()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopySingletonMap" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySingletonMap -->
        <test-method status="PASS" signature="testCopySingletonSet()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopySingletonSet" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySingletonSet -->
        <test-method status="PASS" signature="testCopySynchronizedCollections(java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopySynchronizedCollections" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="synchronizedCollections" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[bar, foo]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySynchronizedCollections -->
        <test-method status="PASS" signature="testCopySynchronizedCollections(java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopySynchronizedCollections" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="synchronizedCollections" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{foo=bar}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySynchronizedCollections -->
        <test-method status="PASS" signature="testCopyUUID()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopyUUID" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyUUID -->
        <test-method status="PASS" signature="testCopyURI()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopyURI" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyURI -->
        <test-method status="PASS" signature="testCopyUnmodifiableCollections(java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopyUnmodifiableCollections" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="unmodifiableCollections" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[bar, foo]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyUnmodifiableCollections -->
        <test-method status="PASS" signature="testCopyUnmodifiableCollections(java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopyUnmodifiableCollections" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="unmodifiableCollections" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{foo=bar}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyUnmodifiableCollections -->
        <test-method status="PASS" signature="testCopyUnmodifiableCollections(java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCopyUnmodifiableCollections" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="unmodifiableCollections" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo, bar]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyUnmodifiableCollections -->
        <test-method status="PASS" signature="testCurrency()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCurrency" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCurrency -->
        <test-method status="PASS" signature="testCyclicDependencies()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testCyclicDependencies" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCyclicDependencies -->
        <test-method status="PASS" signature="testEnumMap()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testEnumMap" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumMap -->
        <test-method status="PASS" signature="testEnumSet()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testEnumSet" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumSet -->
        <test-method status="PASS" signature="testGregorianCalendar()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testGregorianCalendar" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGregorianCalendar -->
        <test-method status="PASS" signature="testInnerClass()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testInnerClass" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInnerClass -->
        <test-method status="PASS" signature="testJavaSqlTime()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testJavaSqlTime" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaSqlTime -->
        <test-method status="PASS" signature="testJavaSqlTimestamp()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testJavaSqlTimestamp" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaSqlTimestamp -->
        <test-method status="PASS" signature="testJavaUtilArraysAsListBoxedPrimitives()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testJavaUtilArraysAsListBoxedPrimitives" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaUtilArraysAsListBoxedPrimitives -->
        <test-method status="PASS" signature="testJavaSqlDate()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testJavaSqlDate" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaSqlDate -->
        <test-method status="PASS" signature="testJavaUtilArraysAsListPrimitiveArrayElement()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testJavaUtilArraysAsListPrimitiveArrayElement" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaUtilArraysAsListPrimitiveArrayElement -->
        <test-method status="PASS" signature="testJavaUtilArraysAsListEmail()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testJavaUtilArraysAsListEmail" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaUtilArraysAsListEmail -->
        <test-method status="PASS" signature="testJavaUtilArraysAsListEmpty()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testJavaUtilArraysAsListEmpty" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaUtilArraysAsListEmpty -->
        <test-method status="PASS" signature="testJavaUtilCollectionsEmptyMap()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testJavaUtilCollectionsEmptyMap" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaUtilCollectionsEmptyMap -->
        <test-method status="PASS" signature="testJavaUtilArraysAsListString()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testJavaUtilArraysAsListString" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaUtilArraysAsListString -->
        <test-method status="PASS" signature="testJavaUtilCollectionsEmptyList()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testJavaUtilCollectionsEmptyList" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaUtilCollectionsEmptyList -->
        <test-method status="PASS" signature="testJavaUtilCollectionsEmptySet()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testJavaUtilCollectionsEmptySet" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaUtilCollectionsEmptySet -->
        <test-method status="PASS" signature="testJdkProxy()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testJdkProxy" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJdkProxy -->
        <test-method status="PASS" signature="testJavaUtilDate()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testJavaUtilDate" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaUtilDate -->
        <test-method status="PASS" signature="testPrivateClass()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testPrivateClass" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPrivateClass -->
        <test-method status="PASS" signature="testMapWithIntConstructorOnly()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testMapWithIntConstructorOnly" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMapWithIntConstructorOnly -->
        <test-method status="PASS" signature="testRegex()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testRegex" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegex -->
        <test-method status="PASS" signature="testSharedObjectIdentity(java.lang.String, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testSharedObjectIdentity" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="sharedObjectIdentityProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[AtomicInteger]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSharedObjectIdentity -->
        <test-method status="PASS" signature="testSharedObjectIdentity(java.lang.String, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testSharedObjectIdentity" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="sharedObjectIdentityProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Email]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Email [_email=foo.bar@example.com, _name=foo bar]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSharedObjectIdentity -->
        <test-method status="PASS" signature="testSharedObjectIdentityWithArray(java.lang.String, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testSharedObjectIdentityWithArray" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="sharedObjectIdentityProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[AtomicInteger]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSharedObjectIdentityWithArray -->
        <test-method status="PASS" signature="testSharedObjectIdentityWithArray(java.lang.String, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testSharedObjectIdentityWithArray" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="sharedObjectIdentityProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Email]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Email [_email=foo.bar@example.com, _name=foo bar]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSharedObjectIdentityWithArray -->
        <test-method status="PASS" signature="testSingletonList()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testSingletonList" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSingletonList -->
        <test-method status="PASS" signature="testSingletonMap()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testSingletonMap" duration-ms="1" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSingletonMap -->
        <test-method status="PASS" signature="testSharedObjectIdentity_CounterHolder()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testSharedObjectIdentity_CounterHolder" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSharedObjectIdentity_CounterHolder -->
        <test-method status="PASS" signature="testStringBuilder()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testStringBuilder" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringBuilder -->
        <test-method status="PASS" signature="testSynchronizedCollections(java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testSynchronizedCollections" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="synchronizedCollections" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo, bar]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSynchronizedCollections -->
        <test-method status="PASS" signature="testStringBuffer()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testStringBuffer" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringBuffer -->
        <test-method status="PASS" signature="testSingletonSet()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testSingletonSet" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSingletonSet -->
        <test-method status="PASS" signature="testSynchronizedCollections(java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testSynchronizedCollections" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="synchronizedCollections" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{foo=bar}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSynchronizedCollections -->
        <test-method status="PASS" signature="testSynchronizedCollections(java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testSynchronizedCollections" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="synchronizedCollections" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[bar, foo]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSynchronizedCollections -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.StringBuffer]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.StringBuilder]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Boolean]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.String]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Long]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Class]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class java.lang.String]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Integer]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="3" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Character]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[c]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Byte]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[98]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.math.BigDecimal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class org.apache.commons.lang.mutable.MutableInt]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Float]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Short]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.util.concurrent.atomic.AtomicInteger]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.util.concurrent.atomic.AtomicLong]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Double]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="2" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.util.Date]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Thu Jul 30 18:53:43 UTC 2020]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class [Ljava.lang.Integer;]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Integer;@52d239ba]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.util.Calendar]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[java.util.GregorianCalendar[time=1596135233198,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id="Etc/UTC",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2020,MONTH=6,WEEK_OF_YEAR=31,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=212,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=53,SECOND=53,MILLISECOND=198,ZONE_OFFSET=0,DST_OFFSET=0]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.util.Currency]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[EUR]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="1" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class [D]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[D@75b25825]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class [J]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[J@1c6804cd]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class [I]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@5bd82fed]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.util.ArrayList]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class [F]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[F@39ad977d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class [S]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[S@4b3a45f1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class [Lde.javakaffee.kryoserializers.TestClasses$Person;]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Lde.javakaffee.kryoserializers.TestClasses$Person;@488eb7f2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class [B]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[B@77a98a6a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class [C]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[C@45e37a7e]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesInContainerClass()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesInContainerClass" duration-ms="2" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesInContainerClass -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class [I]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@5d2a4eed]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class [Ljava.lang.String;]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.String;@5a7005d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testUUID()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testUUID" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUUID -->
        <test-method status="PASS" signature="testUnmodifiableCollections(java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testUnmodifiableCollections" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="unmodifiableCollections" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo, bar]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUnmodifiableCollections -->
        <test-method status="PASS" signature="testURI()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testURI" duration-ms="0" started-at="2020-07-30T18:53:53Z" finished-at="2020-07-30T18:53:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testURI -->
        <test-method status="PASS" signature="testUnmodifiableCollections(java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testUnmodifiableCollections" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="unmodifiableCollections" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[bar, foo]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUnmodifiableCollections -->
        <test-method status="PASS" signature="testUnmodifiableCollections(java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@53b32d7]" name="testUnmodifiableCollections" duration-ms="0" started-at="2020-07-30T18:53:53Z" data-provider="unmodifiableCollections" finished-at="2020-07-30T18:53:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{foo=bar}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUnmodifiableCollections -->
      </class> <!-- de.javakaffee.kryoserializers.KryoTest -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
