<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="381" passed="381">
  <reporter-output>
  </reporter-output>
  <suite name="Surefire suite" duration-ms="666" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
    <groups>
    </groups>
    <test name="Surefire test" duration-ms="666" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
      <class name="de.javakaffee.kryoserializers.cglib.CGLibProxySerializerTest">
        <test-method status="PASS" signature="testCGLibProxy()[pri:0, instance:de.javakaffee.kryoserializers.cglib.CGLibProxySerializerTest@5f341870]" name="testCGLibProxy" duration-ms="36" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCGLibProxy -->
        <test-method status="PASS" signature="testCGLibProxyForExistingFormat()[pri:0, instance:de.javakaffee.kryoserializers.cglib.CGLibProxySerializerTest@5f341870]" name="testCGLibProxyForExistingFormat" duration-ms="14" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCGLibProxyForExistingFormat -->
        <test-method status="PASS" signature="testContainerWithCGLibProxy()[pri:0, instance:de.javakaffee.kryoserializers.cglib.CGLibProxySerializerTest@5f341870]" name="testContainerWithCGLibProxy" duration-ms="4" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testContainerWithCGLibProxy -->
        <test-method status="PASS" signature="testProxiesFromFileRead()[pri:0, instance:de.javakaffee.kryoserializers.cglib.CGLibProxySerializerTest@5f341870]" name="testProxiesFromFileRead" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProxiesFromFileRead -->
        <test-method status="PASS" signature="testProxiesFromFileWrite()[pri:0, instance:de.javakaffee.kryoserializers.cglib.CGLibProxySerializerTest@5f341870]" name="testProxiesFromFileWrite" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProxiesFromFileWrite -->
      </class> <!-- de.javakaffee.kryoserializers.cglib.CGLibProxySerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest">
        <test-method status="PASS" signature="testCopyEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@56ac3a89]" name="testCopyEmpty" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmpty -->
        <test-method status="PASS" signature="testCopyImmutableListMultimap()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@56ac3a89]" name="testCopyImmutableListMultimap" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyImmutableListMultimap -->
        <test-method status="PASS" signature="testCopyImmutableListMultimapEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@56ac3a89]" name="testCopyImmutableListMultimapEmpty" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyImmutableListMultimapEmpty -->
        <test-method status="PASS" signature="testCopyImmutableSetMultimap()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@56ac3a89]" name="testCopyImmutableSetMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyImmutableSetMultimap -->
        <test-method status="PASS" signature="testCopyImmutableSetMultimapEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@56ac3a89]" name="testCopyImmutableSetMultimapEmpty" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyImmutableSetMultimapEmpty -->
        <test-method status="PASS" signature="testCopyRegular()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@56ac3a89]" name="testCopyRegular" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRegular -->
        <test-method status="PASS" signature="testCopySingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@56ac3a89]" name="testCopySingleton" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySingleton -->
        <test-method status="PASS" signature="testImmutableListMultimap()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@56ac3a89]" name="testImmutableListMultimap" duration-ms="2" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableListMultimap -->
        <test-method status="PASS" signature="testImmutableListMultimapEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@56ac3a89]" name="testImmutableListMultimapEmpty" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableListMultimapEmpty -->
        <test-method status="PASS" signature="testImmutableListMultimapMultipleElementsPerKey()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@56ac3a89]" name="testImmutableListMultimapMultipleElementsPerKey" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableListMultimapMultipleElementsPerKey -->
        <test-method status="PASS" signature="testImmutableListSerializerAlreadyRegistered()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@56ac3a89]" name="testImmutableListSerializerAlreadyRegistered" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableListSerializerAlreadyRegistered -->
        <test-method status="PASS" signature="testImmutableMapSerializerAlreadyRegistered()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@56ac3a89]" name="testImmutableMapSerializerAlreadyRegistered" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableMapSerializerAlreadyRegistered -->
        <test-method status="PASS" signature="testImmutableListMultimapSingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@56ac3a89]" name="testImmutableListMultimapSingleton" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableListMultimapSingleton -->
        <test-method status="PASS" signature="testImmutableSetMultimap()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@56ac3a89]" name="testImmutableSetMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableSetMultimap -->
        <test-method status="PASS" signature="testImmutableSetMultimapMultipleElementsPerKey()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@56ac3a89]" name="testImmutableSetMultimapMultipleElementsPerKey" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableSetMultimapMultipleElementsPerKey -->
        <test-method status="PASS" signature="testImmutableSetMultimapEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@56ac3a89]" name="testImmutableSetMultimapEmpty" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableSetMultimapEmpty -->
        <test-method status="PASS" signature="testRegular()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@56ac3a89]" name="testRegular" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegular -->
        <test-method status="PASS" signature="testImmutableSetSerializerAlreadyRegistered()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@56ac3a89]" name="testImmutableSetSerializerAlreadyRegistered" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableSetSerializerAlreadyRegistered -->
        <test-method status="PASS" signature="testImmutableSetMultimapSingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@56ac3a89]" name="testImmutableSetMultimapSingleton" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableSetMultimapSingleton -->
        <test-method status="PASS" signature="testRegularMultipleElementsPerKey()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@56ac3a89]" name="testRegularMultipleElementsPerKey" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegularMultipleElementsPerKey -->
        <test-method status="PASS" signature="testRegularEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@56ac3a89]" name="testRegularEmpty" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegularEmpty -->
        <test-method status="PASS" signature="testRegularSingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@56ac3a89]" name="testRegularSingleton" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegularSingleton -->
      </class> <!-- de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest">
        <test-method status="PASS" signature="initializeKyroWithSerializer()[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@1ce92674]" name="initializeKyroWithSerializer" is-config="true" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializeKyroWithSerializer -->
        <test-method status="PASS" signature="testDifferentKeyComparatorCopy()[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@1ce92674]" name="testDifferentKeyComparatorCopy" duration-ms="4" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDifferentKeyComparatorCopy -->
        <test-method status="PASS" signature="testDifferentKeyComparatorSerialize()[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@1ce92674]" name="testDifferentKeyComparatorSerialize" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDifferentKeyComparatorSerialize -->
        <test-method status="PASS" signature="testDifferentValueComparatorCopy()[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@1ce92674]" name="testDifferentValueComparatorCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDifferentValueComparatorCopy -->
        <test-method status="PASS" signature="testDifferentValueComparatorSerialize()[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@1ce92674]" name="testDifferentValueComparatorSerialize" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDifferentValueComparatorSerialize -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@1ce92674]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps (no nulls)" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@69ee81fc]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@1ce92674]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps (no nulls)" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@45385f75]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@1ce92674]" name="testMultimap" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps (no nulls)" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@f58853c]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@1ce92674]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps (no nulls)" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@5efa40fe]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@1ce92674]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps (no nulls)" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@7dc3712]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@1ce92674]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps (no nulls)" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@700fb871]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@1ce92674]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps (no nulls)" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@1e16c0aa]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@1ce92674]" name="testMultimapCopy" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps (no nulls)" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@2fb0623e]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@1ce92674]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps (no nulls)" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@415b0b49]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest@1ce92674]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps (no nulls)" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@642a7222]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
      </class> <!-- de.javakaffee.kryoserializers.guava.TreeMultimapSerializerTest -->
      <class name="de.javakaffee.kryoserializers.protobuf.ProtobufSerializerTest">
        <test-method status="PASS" signature="testSerializerWithMultipleInstances()[pri:0, instance:de.javakaffee.kryoserializers.protobuf.ProtobufSerializerTest@343f4d3d]" name="testSerializerWithMultipleInstances" duration-ms="30" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSerializerWithMultipleInstances -->
        <test-method status="PASS" signature="testNull()[pri:0, instance:de.javakaffee.kryoserializers.protobuf.ProtobufSerializerTest@343f4d3d]" name="testNull" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNull -->
        <test-method status="PASS" signature="testGetAcceptsNull()[pri:0, instance:de.javakaffee.kryoserializers.protobuf.ProtobufSerializerTest@343f4d3d]" name="testGetAcceptsNull" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAcceptsNull -->
        <test-method status="PASS" signature="testSerializerWithMultipleInstancesDifferentTypes()[pri:0, instance:de.javakaffee.kryoserializers.protobuf.ProtobufSerializerTest@343f4d3d]" name="testSerializerWithMultipleInstancesDifferentTypes" duration-ms="2" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSerializerWithMultipleInstancesDifferentTypes -->
        <test-method status="PASS" signature="testSerializerWithProtoA()[pri:0, instance:de.javakaffee.kryoserializers.protobuf.ProtobufSerializerTest@343f4d3d]" name="testSerializerWithProtoA" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSerializerWithProtoA -->
      </class> <!-- de.javakaffee.kryoserializers.protobuf.ProtobufSerializerTest -->
      <class name="de.javakaffee.kryoserializers.jodatime.JodaIntervalSerializerTest">
        <test-method status="PASS" signature="testCopyJodaDateTime()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaIntervalSerializerTest@14bf9759]" name="testCopyJodaDateTime" duration-ms="26" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJodaDateTime -->
        <test-method status="PASS" signature="testJodaInterval()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaIntervalSerializerTest@14bf9759]" name="testJodaInterval" duration-ms="7" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJodaInterval -->
      </class> <!-- de.javakaffee.kryoserializers.jodatime.JodaIntervalSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest">
        <test-method status="PASS" signature="testCopyReverse()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@59494225]" name="testCopyReverse" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyReverse -->
        <test-method status="PASS" signature="testCopySingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@59494225]" name="testCopySingleton" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySingleton -->
        <test-method status="PASS" signature="testCopyRegular()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@59494225]" name="testCopyRegular" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRegular -->
        <test-method status="PASS" signature="testCopyEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@59494225]" name="testCopyEmpty" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmpty -->
        <test-method status="PASS" signature="testRegular()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@59494225]" name="testRegular" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegular -->
        <test-method status="PASS" signature="testReverse()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@59494225]" name="testReverse" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReverse -->
        <test-method status="PASS" signature="testEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@59494225]" name="testEmpty" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method status="PASS" signature="testCopySubList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@59494225]" name="testCopySubList" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySubList -->
        <test-method status="PASS" signature="testCopyValues()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@59494225]" name="testCopyValues" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyValues -->
        <test-method status="PASS" signature="testCopyStringAsImmutableList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@59494225]" name="testCopyStringAsImmutableList" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyStringAsImmutableList -->
        <test-method status="PASS" signature="testValues()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@59494225]" name="testValues" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValues -->
        <test-method status="PASS" signature="testStringAsImmutableList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@59494225]" name="testStringAsImmutableList" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringAsImmutableList -->
        <test-method status="PASS" signature="testSingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@59494225]" name="testSingleton" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSingleton -->
        <test-method status="PASS" signature="testSubList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@59494225]" name="testSubList" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubList -->
      </class> <!-- de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.TreeBasedTableSerializerTest">
        <test-method status="PASS" signature="testDifferentColumnComparatorCopy()[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeBasedTableSerializerTest@6fd02e5]" name="testDifferentColumnComparatorCopy" duration-ms="2" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDifferentColumnComparatorCopy -->
        <test-method status="PASS" signature="testDifferentColumnComparatorSerialize()[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeBasedTableSerializerTest@6fd02e5]" name="testDifferentColumnComparatorSerialize" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDifferentColumnComparatorSerialize -->
        <test-method status="PASS" signature="testDifferentRowComparatorSerialize()[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeBasedTableSerializerTest@6fd02e5]" name="testDifferentRowComparatorSerialize" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDifferentRowComparatorSerialize -->
        <test-method status="PASS" signature="testDifferentRowComparatorCopy()[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeBasedTableSerializerTest@6fd02e5]" name="testDifferentRowComparatorCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDifferentRowComparatorCopy -->
        <test-method status="PASS" signature="testTable([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeBasedTableSerializerTest@6fd02e5]" name="testTable" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@4ef782af]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTable -->
        <test-method status="PASS" signature="testTable([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeBasedTableSerializerTest@6fd02e5]" name="testTable" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@59e2d8e3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTable -->
        <test-method status="PASS" signature="testTable([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeBasedTableSerializerTest@6fd02e5]" name="testTable" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@4bf48f6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTable -->
        <test-method status="PASS" signature="testTable([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeBasedTableSerializerTest@6fd02e5]" name="testTable" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@5d43661b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTable -->
        <test-method status="PASS" signature="testTable([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeBasedTableSerializerTest@6fd02e5]" name="testTable" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@62833051]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTable -->
        <test-method status="PASS" signature="testTableCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeBasedTableSerializerTest@6fd02e5]" name="testTableCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@7b7fdc8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTableCopy -->
        <test-method status="PASS" signature="testTableCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeBasedTableSerializerTest@6fd02e5]" name="testTableCopy" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@766653e6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTableCopy -->
        <test-method status="PASS" signature="testTableCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeBasedTableSerializerTest@6fd02e5]" name="testTableCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@5d99c6b5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTableCopy -->
        <test-method status="PASS" signature="testTableCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeBasedTableSerializerTest@6fd02e5]" name="testTableCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@24c4ddae]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTableCopy -->
        <test-method status="PASS" signature="testTableCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeBasedTableSerializerTest@6fd02e5]" name="testTableCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@7fc4780b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTableCopy -->
      </class> <!-- de.javakaffee.kryoserializers.guava.TreeBasedTableSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.ImmutableSortedSetSerializerTest">
        <test-method status="PASS" signature="testCopySingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedSetSerializerTest@553f17c]" name="testCopySingleton" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySingleton -->
        <test-method status="PASS" signature="testCopyDescending()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedSetSerializerTest@553f17c]" name="testCopyDescending" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyDescending -->
        <test-method status="PASS" signature="testCopyEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedSetSerializerTest@553f17c]" name="testCopyEmpty" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmpty -->
        <test-method status="PASS" signature="testCopyRegular()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedSetSerializerTest@553f17c]" name="testCopyRegular" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRegular -->
        <test-method status="PASS" signature="testDescending()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedSetSerializerTest@553f17c]" name="testDescending" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDescending -->
        <test-method status="PASS" signature="testSingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedSetSerializerTest@553f17c]" name="testSingleton" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSingleton -->
        <test-method status="PASS" signature="testEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedSetSerializerTest@553f17c]" name="testEmpty" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method status="PASS" signature="testRegular()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedSetSerializerTest@553f17c]" name="testRegular" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegular -->
        <test-method status="PASS" signature="testStringAsImmutableSortedSet()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedSetSerializerTest@553f17c]" name="testStringAsImmutableSortedSet" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringAsImmutableSortedSet -->
      </class> <!-- de.javakaffee.kryoserializers.guava.ImmutableSortedSetSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest">
        <test-method status="PASS" signature="initializeKyroWithSerializer()[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@3c0ecd4b]" name="initializeKyroWithSerializer" is-config="true" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializeKyroWithSerializer -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@3c0ecd4b]" name="testMultimap" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@6253c26]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@3c0ecd4b]" name="testMultimap" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@54a7079e]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@3c0ecd4b]" name="testMultimap" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@d9345cd]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@3c0ecd4b]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@506ae4d4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@3c0ecd4b]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@59505b48]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@3c0ecd4b]" name="testMultimap" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@273e7444]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@3c0ecd4b]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@48aca48b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@3c0ecd4b]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@771a660]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@3c0ecd4b]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@3f6f6701]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@3c0ecd4b]" name="testMultimapCopy" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@4d5650ae]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@3c0ecd4b]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@5d534f5d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@3c0ecd4b]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@1ed6388a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@3c0ecd4b]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@130c12b7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@3c0ecd4b]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@4f80542f]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@3c0ecd4b]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@4a883b15]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@3c0ecd4b]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@51c668e3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@3c0ecd4b]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@18df8434]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest@3c0ecd4b]" name="testMultimapCopy" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@41a0aa7d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
      </class> <!-- de.javakaffee.kryoserializers.guava.LinkedListMultimapSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.ImmutableSetSerializerTest">
        <test-method status="PASS" signature="testEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSetSerializerTest@1e397ed7]" name="testEmpty" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method status="PASS" signature="testCopySingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSetSerializerTest@1e397ed7]" name="testCopySingleton" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySingleton -->
        <test-method status="PASS" signature="testCopyEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSetSerializerTest@1e397ed7]" name="testCopyEmpty" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmpty -->
        <test-method status="PASS" signature="testCopyRegular()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSetSerializerTest@1e397ed7]" name="testCopyRegular" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRegular -->
        <test-method status="PASS" signature="testRegular()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSetSerializerTest@1e397ed7]" name="testRegular" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegular -->
        <test-method status="PASS" signature="testSingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSetSerializerTest@1e397ed7]" name="testSingleton" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSingleton -->
        <test-method status="PASS" signature="testStringAsImmutableSet()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSetSerializerTest@1e397ed7]" name="testStringAsImmutableSet" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringAsImmutableSet -->
      </class> <!-- de.javakaffee.kryoserializers.guava.ImmutableSetSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.ImmutableTableSerializerTest">
        <test-method status="PASS" signature="testCopyEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableTableSerializerTest@6e06451e]" name="testCopyEmpty" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmpty -->
        <test-method status="PASS" signature="testCopyDense()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableTableSerializerTest@6e06451e]" name="testCopyDense" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyDense -->
        <test-method status="PASS" signature="testDense()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableTableSerializerTest@6e06451e]" name="testDense" duration-ms="2" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDense -->
        <test-method status="PASS" signature="testCopySparse()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableTableSerializerTest@6e06451e]" name="testCopySparse" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySparse -->
        <test-method status="PASS" signature="testCopySingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableTableSerializerTest@6e06451e]" name="testCopySingleton" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySingleton -->
        <test-method status="PASS" signature="testSingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableTableSerializerTest@6e06451e]" name="testSingleton" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSingleton -->
        <test-method status="PASS" signature="testEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableTableSerializerTest@6e06451e]" name="testEmpty" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method status="PASS" signature="testSparse()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableTableSerializerTest@6e06451e]" name="testSparse" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSparse -->
      </class> <!-- de.javakaffee.kryoserializers.guava.ImmutableTableSerializerTest -->
      <class name="de.javakaffee.kryoserializers.EnumMapSerializerTest">
        <test-method status="PASS" signature="testCopyEmpty()[pri:0, instance:de.javakaffee.kryoserializers.EnumMapSerializerTest@5700d6b1]" name="testCopyEmpty" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <exception class="java.lang.ClassCastException">
            <message>
              <![CDATA[class de.javakaffee.kryoserializers.EnumMapSerializerTest$Colors != class de.javakaffee.kryoserializers.EnumMapSerializerTest$Vipers]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.ClassCastException: class de.javakaffee.kryoserializers.EnumMapSerializerTest$Colors != class de.javakaffee.kryoserializers.EnumMapSerializerTest$Vipers
	at java.util.EnumMap.typeCheck(EnumMap.java:745)
	at java.util.EnumMap.put(EnumMap.java:267)
	at de.javakaffee.kryoserializers.EnumMapSerializerTest.testCopyEmpty(EnumMapSerializerTest.java:42)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:696)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:882)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1189)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:136)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:145)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.ClassCastException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmpty -->
        <test-method status="PASS" signature="testDeepCopy()[pri:0, instance:de.javakaffee.kryoserializers.EnumMapSerializerTest@5700d6b1]" name="testDeepCopy" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeepCopy -->
      </class> <!-- de.javakaffee.kryoserializers.EnumMapSerializerTest -->
      <class name="de.javakaffee.kryoserializers.UnicodeBlockSerializerTest">
        <test-method status="PASS" signature="testBasicRoundTrip()[pri:0, instance:de.javakaffee.kryoserializers.UnicodeBlockSerializerTest@2f686d1f]" name="testBasicRoundTrip" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBasicRoundTrip -->
        <test-method status="PASS" signature="testCopyContainingObject()[pri:0, instance:de.javakaffee.kryoserializers.UnicodeBlockSerializerTest@2f686d1f]" name="testCopyContainingObject" duration-ms="2" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyContainingObject -->
        <test-method status="PASS" signature="testDeserializingUnknownInstanceReturnsNull()[pri:0, instance:de.javakaffee.kryoserializers.UnicodeBlockSerializerTest@2f686d1f]" name="testDeserializingUnknownInstanceReturnsNull" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeserializingUnknownInstanceReturnsNull -->
      </class> <!-- de.javakaffee.kryoserializers.UnicodeBlockSerializerTest -->
      <class name="de.javakaffee.kryoserializers.jodatime.JodaLocalDateSerializerTest">
        <test-method status="PASS" signature="testCopyJodaLocalDate()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaLocalDateSerializerTest@4f7d0008]" name="testCopyJodaLocalDate" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJodaLocalDate -->
        <test-method status="PASS" signature="testJodaLocalDate()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaLocalDateSerializerTest@4f7d0008]" name="testJodaLocalDate" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJodaLocalDate -->
      </class> <!-- de.javakaffee.kryoserializers.jodatime.JodaLocalDateSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.ArrayTableSerializerTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayTableSerializerTest@42dafa95]" name="setUp" is-config="true" duration-ms="83" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:de.javakaffee.kryoserializers.cglib.CGLibProxySerializerTest@5f341870]" name="beforeTest" is-config="true" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:de.javakaffee.kryoserializers.EnumMapSerializerTest@5700d6b1]" name="beforeTest" is-config="true" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest@4566e5bd]" name="setUp" is-config="true" duration-ms="4" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableListSerializerTest@59494225]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.guava.HashBasedTableSerializerTest@59ec2012]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMultimapSerializerTest@56ac3a89]" name="setUp" is-config="true" duration-ms="13" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedMapSerializerTest@3fee9989]" name="setUp" is-config="true" duration-ms="8" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSetSerializerTest@1e397ed7]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedSetSerializerTest@553f17c]" name="setUp" is-config="true" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaDateTimeSerializerTest@589838eb]" name="beforeTest" is-config="true" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableTableSerializerTest@6e06451e]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaIntervalSerializerTest@14bf9759]" name="beforeTest" is-config="true" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaLocalDateSerializerTest@4f7d0008]" name="beforeTest" is-config="true" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaLocalDateTimeSerializerTest@7085bdee]" name="beforeTest" is-config="true" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="beforeTest" is-config="true" duration-ms="5" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaLocalTimeSerializerTest@6500df86]" name="beforeTest" is-config="true" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.dexx.ListSerializerTest@5f2108b5]" name="setUp" is-config="true" duration-ms="4" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.dexx.MapSerializerTest@e45f292]" name="setUp" is-config="true" duration-ms="2" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:de.javakaffee.kryoserializers.wicket.MiniMapSerializerTest@1ed4004b]" name="beforeTest" is-config="true" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.protobuf.ProtobufSerializerTest@343f4d3d]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5bcab519]" name="setUp" is-config="true" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.dexx.SetSerializerTest@271053e1]" name="setUp" is-config="true" duration-ms="2" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.guava.TreeBasedTableSerializerTest@6fd02e5]" name="setUp" is-config="true" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:de.javakaffee.kryoserializers.UnicodeBlockSerializerTest@2f686d1f]" name="beforeTest" is-config="true" duration-ms="9" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:de.javakaffee.kryoserializers.wicket.WicketTest@72d818d1]" name="beforeTest" is-config="true" duration-ms="72" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:de.javakaffee.kryoserializers.guava.UnmodifiableNavigableSetSerializerTest@4cf777e8]" name="setUp" is-config="true" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testTable([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayTableSerializerTest@42dafa95]" name="testTable" duration-ms="2" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables (non empty)" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@2bdd8394]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTable -->
        <test-method status="PASS" signature="testTable([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayTableSerializerTest@42dafa95]" name="testTable" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables (non empty)" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@4e0ae11f]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTable -->
        <test-method status="PASS" signature="testTable([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayTableSerializerTest@42dafa95]" name="testTable" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables (non empty)" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@9cb8225]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTable -->
        <test-method status="PASS" signature="testTable([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayTableSerializerTest@42dafa95]" name="testTable" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables (non empty)" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@17d919b6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTable -->
        <test-method status="PASS" signature="testTableCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayTableSerializerTest@42dafa95]" name="testTableCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables (non empty)" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@4ef74c30]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTableCopy -->
        <test-method status="PASS" signature="testTableCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayTableSerializerTest@42dafa95]" name="testTableCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables (non empty)" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@47c81abf]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTableCopy -->
        <test-method status="PASS" signature="testTableCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayTableSerializerTest@42dafa95]" name="testTableCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables (non empty)" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@6c7a164b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTableCopy -->
        <test-method status="PASS" signature="testTableCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayTableSerializerTest@42dafa95]" name="testTableCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables (non empty)" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@4bff7da0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTableCopy -->
      </class> <!-- de.javakaffee.kryoserializers.guava.ArrayTableSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.ImmutableSortedMapSerializerTest">
        <test-method status="PASS" signature="testCopyEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedMapSerializerTest@3fee9989]" name="testCopyEmpty" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmpty -->
        <test-method status="PASS" signature="testCopyRegular()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedMapSerializerTest@3fee9989]" name="testCopyRegular" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRegular -->
        <test-method status="PASS" signature="testCopySingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedMapSerializerTest@3fee9989]" name="testCopySingleton" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySingleton -->
        <test-method status="PASS" signature="testDescending()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedMapSerializerTest@3fee9989]" name="testDescending" duration-ms="4" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDescending -->
        <test-method status="PASS" signature="testEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedMapSerializerTest@3fee9989]" name="testEmpty" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method status="PASS" signature="testEnum()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedMapSerializerTest@3fee9989]" name="testEnum" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnum -->
        <test-method status="PASS" signature="testRegular()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedMapSerializerTest@3fee9989]" name="testRegular" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegular -->
        <test-method status="PASS" signature="testSingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableSortedMapSerializerTest@3fee9989]" name="testSingleton" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSingleton -->
      </class> <!-- de.javakaffee.kryoserializers.guava.ImmutableSortedMapSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.HashBasedTableSerializerTest">
        <test-method status="PASS" signature="testTable([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashBasedTableSerializerTest@59ec2012]" name="testTable" duration-ms="2" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@4f49f6af]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTable -->
        <test-method status="PASS" signature="testTable([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashBasedTableSerializerTest@59ec2012]" name="testTable" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@10289886]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTable -->
        <test-method status="PASS" signature="testTable([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashBasedTableSerializerTest@59ec2012]" name="testTable" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@5167f57d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTable -->
        <test-method status="PASS" signature="testTableCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashBasedTableSerializerTest@59ec2012]" name="testTableCopy" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@61710c6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTableCopy -->
        <test-method status="PASS" signature="testTableCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashBasedTableSerializerTest@59ec2012]" name="testTableCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@7f2cfe3f]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTableCopy -->
        <test-method status="PASS" signature="testTable([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashBasedTableSerializerTest@59ec2012]" name="testTable" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@3e2055d6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTable -->
        <test-method status="PASS" signature="testTable([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashBasedTableSerializerTest@59ec2012]" name="testTable" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@50f6ac94]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTable -->
        <test-method status="PASS" signature="testTableCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashBasedTableSerializerTest@59ec2012]" name="testTableCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@7d9f158f]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTableCopy -->
        <test-method status="PASS" signature="testTableCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashBasedTableSerializerTest@59ec2012]" name="testTableCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@32115b28]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTableCopy -->
        <test-method status="PASS" signature="testTableCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashBasedTableSerializerTest@59ec2012]" name="testTableCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava tables" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@4a07d605]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTableCopy -->
      </class> <!-- de.javakaffee.kryoserializers.guava.HashBasedTableSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest">
        <test-method status="PASS" signature="initializeKyroWithSerializer()[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@73ad2d6]" name="initializeKyroWithSerializer" is-config="true" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializeKyroWithSerializer -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@73ad2d6]" name="testMultimap" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@8519cb4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@73ad2d6]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@72035809]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@73ad2d6]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@606e4010]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@73ad2d6]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@5f049ea1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@73ad2d6]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@68c9133c]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@73ad2d6]" name="testMultimap" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@16eb3ea3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@73ad2d6]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@645aa696]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@73ad2d6]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@2cb4893b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@73ad2d6]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@1a75e76a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@73ad2d6]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@57a78e3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@73ad2d6]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@48bb62]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@73ad2d6]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@5b247367]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@73ad2d6]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@7ce026d3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@73ad2d6]" name="testMultimapCopy" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@7e057f43]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@73ad2d6]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@2767e23c]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@73ad2d6]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@14028087]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@73ad2d6]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@183ec003]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest@73ad2d6]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@31ea9581]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
      </class> <!-- de.javakaffee.kryoserializers.guava.HashMultimapSerializerTest -->
      <class name="de.javakaffee.kryoserializers.dexx.SetSerializerTest">
        <test-method status="PASS" signature="testCopyEmpty()[pri:0, instance:de.javakaffee.kryoserializers.dexx.SetSerializerTest@271053e1]" name="testCopyEmpty" duration-ms="3" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmpty -->
        <test-method status="PASS" signature="testCopyRegular()[pri:0, instance:de.javakaffee.kryoserializers.dexx.SetSerializerTest@271053e1]" name="testCopyRegular" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRegular -->
        <test-method status="PASS" signature="testEmpty()[pri:0, instance:de.javakaffee.kryoserializers.dexx.SetSerializerTest@271053e1]" name="testEmpty" duration-ms="4" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method status="PASS" signature="testRegular()[pri:0, instance:de.javakaffee.kryoserializers.dexx.SetSerializerTest@271053e1]" name="testRegular" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegular -->
      </class> <!-- de.javakaffee.kryoserializers.dexx.SetSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.UnmodifiableNavigableSetSerializerTest">
        <test-method status="PASS" signature="testCopyEmptySkipList()[pri:0, instance:de.javakaffee.kryoserializers.guava.UnmodifiableNavigableSetSerializerTest@4cf777e8]" name="testCopyEmptySkipList" duration-ms="2" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmptySkipList -->
        <test-method status="PASS" signature="testCopyEmptyTreeSet()[pri:0, instance:de.javakaffee.kryoserializers.guava.UnmodifiableNavigableSetSerializerTest@4cf777e8]" name="testCopyEmptyTreeSet" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmptyTreeSet -->
        <test-method status="PASS" signature="testCopyPopulatedTreeSet()[pri:0, instance:de.javakaffee.kryoserializers.guava.UnmodifiableNavigableSetSerializerTest@4cf777e8]" name="testCopyPopulatedTreeSet" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyPopulatedTreeSet -->
        <test-method status="PASS" signature="testCopyPopulatedSkipList()[pri:0, instance:de.javakaffee.kryoserializers.guava.UnmodifiableNavigableSetSerializerTest@4cf777e8]" name="testCopyPopulatedSkipList" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyPopulatedSkipList -->
        <test-method status="PASS" signature="testEmptySkipList()[pri:0, instance:de.javakaffee.kryoserializers.guava.UnmodifiableNavigableSetSerializerTest@4cf777e8]" name="testEmptySkipList" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmptySkipList -->
        <test-method status="PASS" signature="testEmptyTreeSet()[pri:0, instance:de.javakaffee.kryoserializers.guava.UnmodifiableNavigableSetSerializerTest@4cf777e8]" name="testEmptyTreeSet" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmptyTreeSet -->
        <test-method status="PASS" signature="testPopulatedSkipList()[pri:0, instance:de.javakaffee.kryoserializers.guava.UnmodifiableNavigableSetSerializerTest@4cf777e8]" name="testPopulatedSkipList" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPopulatedSkipList -->
        <test-method status="PASS" signature="testPopulatedTreeSet()[pri:0, instance:de.javakaffee.kryoserializers.guava.UnmodifiableNavigableSetSerializerTest@4cf777e8]" name="testPopulatedTreeSet" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPopulatedTreeSet -->
      </class> <!-- de.javakaffee.kryoserializers.guava.UnmodifiableNavigableSetSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest">
        <test-method status="PASS" signature="testColumn()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest@4566e5bd]" name="testColumn" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testColumn -->
        <test-method status="PASS" signature="testColumnMap()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest@4566e5bd]" name="testColumnMap" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testColumnMap -->
        <test-method status="PASS" signature="testCopyColumnMap()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest@4566e5bd]" name="testCopyColumnMap" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyColumnMap -->
        <test-method status="PASS" signature="testCopyColumn()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest@4566e5bd]" name="testCopyColumn" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyColumn -->
        <test-method status="PASS" signature="testCopyEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest@4566e5bd]" name="testCopyEmpty" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmpty -->
        <test-method status="PASS" signature="testEmpty()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest@4566e5bd]" name="testEmpty" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method status="PASS" signature="testCopySingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest@4566e5bd]" name="testCopySingleton" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySingleton -->
        <test-method status="PASS" signature="testCopyRegular()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest@4566e5bd]" name="testCopyRegular" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRegular -->
        <test-method status="PASS" signature="testCopyRow()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest@4566e5bd]" name="testCopyRow" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRow -->
        <test-method status="PASS" signature="testCopyRowMap()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest@4566e5bd]" name="testCopyRowMap" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRowMap -->
        <test-method status="PASS" signature="testEnum()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest@4566e5bd]" name="testEnum" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnum -->
        <test-method status="PASS" signature="testRegular()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest@4566e5bd]" name="testRegular" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegular -->
        <test-method status="PASS" signature="testSingleton()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest@4566e5bd]" name="testSingleton" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSingleton -->
        <test-method status="PASS" signature="testRowMap()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest@4566e5bd]" name="testRowMap" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRowMap -->
        <test-method status="PASS" signature="testRow()[pri:0, instance:de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest@4566e5bd]" name="testRow" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRow -->
      </class> <!-- de.javakaffee.kryoserializers.guava.ImmutableMapSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest">
        <test-method status="PASS" signature="initializeKryoWithSerializer()[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@31a5c39e]" name="initializeKryoWithSerializer" is-config="true" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializeKryoWithSerializer -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@31a5c39e]" name="testMultimap" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@544d57e]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@31a5c39e]" name="testMultimap" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@52e7a6b2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@31a5c39e]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@4b5189ac]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@31a5c39e]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@704deff2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@31a5c39e]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@6f6745d6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@31a5c39e]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@1e81f160]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@31a5c39e]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@2b9ed6da]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@31a5c39e]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@1bab8268]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@31a5c39e]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@3fc79729]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@31a5c39e]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@78a773fd]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@31a5c39e]" name="testMultimapCopy" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@6d7fc27]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@31a5c39e]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@1187c9e8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@31a5c39e]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@421e361]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@31a5c39e]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@4167d97b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@31a5c39e]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@1722011b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@31a5c39e]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@6c372fe6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@31a5c39e]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@518caac3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest@31a5c39e]" name="testMultimapCopy" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@3e2059ae]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
      </class> <!-- de.javakaffee.kryoserializers.guava.LinkedHashMultimapSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.ReverseListSerializerTest">
        <test-method status="PASS" signature="testCopyEmptyReverseList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5bcab519]" name="testCopyEmptyReverseList" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmptyReverseList -->
        <test-method status="PASS" signature="testCopyEmptyRandomAccessReverseList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5bcab519]" name="testCopyEmptyRandomAccessReverseList" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmptyRandomAccessReverseList -->
        <test-method status="PASS" signature="testCopyRegularReverseList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5bcab519]" name="testCopyRegularReverseList" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRegularReverseList -->
        <test-method status="PASS" signature="testCopyRegularRandomAccessReverseList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5bcab519]" name="testCopyRegularRandomAccessReverseList" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRegularRandomAccessReverseList -->
        <test-method status="PASS" signature="testCopySingletonRandomAccessReverseList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5bcab519]" name="testCopySingletonRandomAccessReverseList" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySingletonRandomAccessReverseList -->
        <test-method status="PASS" signature="testRegularRandomAccessReverseList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5bcab519]" name="testRegularRandomAccessReverseList" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegularRandomAccessReverseList -->
        <test-method status="PASS" signature="testEmptyReverseList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5bcab519]" name="testEmptyReverseList" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmptyReverseList -->
        <test-method status="PASS" signature="testEmptyRandomAccessReverseList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5bcab519]" name="testEmptyRandomAccessReverseList" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmptyRandomAccessReverseList -->
        <test-method status="PASS" signature="testCopySingletonReverseList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5bcab519]" name="testCopySingletonReverseList" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySingletonReverseList -->
        <test-method status="PASS" signature="testRegularReverseList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5bcab519]" name="testRegularReverseList" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegularReverseList -->
        <test-method status="PASS" signature="testSingletonRandomAccessReverseList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5bcab519]" name="testSingletonRandomAccessReverseList" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSingletonRandomAccessReverseList -->
        <test-method status="PASS" signature="testSingletonReverseList()[pri:0, instance:de.javakaffee.kryoserializers.guava.ReverseListSerializerTest@5bcab519]" name="testSingletonReverseList" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSingletonReverseList -->
      </class> <!-- de.javakaffee.kryoserializers.guava.ReverseListSerializerTest -->
      <class name="de.javakaffee.kryoserializers.SubListSerializersTest">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:de.javakaffee.kryoserializers.SubListSerializersTest@3f49dace]" name="beforeClass" is-config="true" duration-ms="5" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="testArrayListSubList()[pri:0, instance:de.javakaffee.kryoserializers.SubListSerializersTest@3f49dace]" name="testArrayListSubList" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testArrayListSubList -->
        <test-method status="PASS" signature="testArrayListSubListSubList()[pri:0, instance:de.javakaffee.kryoserializers.SubListSerializersTest@3f49dace]" name="testArrayListSubListSubList" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testArrayListSubListSubList -->
        <test-method status="PASS" signature="testArrayListSubListWithSharedItems()[pri:0, instance:de.javakaffee.kryoserializers.SubListSerializersTest@3f49dace]" name="testArrayListSubListWithSharedItems" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testArrayListSubListWithSharedItems -->
        <test-method status="PASS" signature="testCopyArrayListSubList()[pri:0, instance:de.javakaffee.kryoserializers.SubListSerializersTest@3f49dace]" name="testCopyArrayListSubList" duration-ms="7" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyArrayListSubList -->
        <test-method status="PASS" signature="testCopyArrayListSubListSubList()[pri:0, instance:de.javakaffee.kryoserializers.SubListSerializersTest@3f49dace]" name="testCopyArrayListSubListSubList" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyArrayListSubListSubList -->
        <test-method status="PASS" signature="testCopySubList()[pri:0, instance:de.javakaffee.kryoserializers.SubListSerializersTest@3f49dace]" name="testCopySubList" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySubList -->
        <test-method status="PASS" signature="testCopySubListSubList()[pri:0, instance:de.javakaffee.kryoserializers.SubListSerializersTest@3f49dace]" name="testCopySubListSubList" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySubListSubList -->
        <test-method status="PASS" signature="testSubList()[pri:0, instance:de.javakaffee.kryoserializers.SubListSerializersTest@3f49dace]" name="testSubList" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubList -->
        <test-method status="PASS" signature="testNestedArrayListSubListWithSharedItems_2()[pri:0, instance:de.javakaffee.kryoserializers.SubListSerializersTest@3f49dace]" name="testNestedArrayListSubListWithSharedItems_2" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedArrayListSubListWithSharedItems_2 -->
        <test-method status="PASS" signature="testNestedArrayListSubListWithSharedItems_1()[pri:0, instance:de.javakaffee.kryoserializers.SubListSerializersTest@3f49dace]" name="testNestedArrayListSubListWithSharedItems_1" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedArrayListSubListWithSharedItems_1 -->
        <test-method status="PASS" signature="testSubListSubList()[pri:0, instance:de.javakaffee.kryoserializers.SubListSerializersTest@3f49dace]" name="testSubListSubList" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubListSubList -->
      </class> <!-- de.javakaffee.kryoserializers.SubListSerializersTest -->
      <class name="de.javakaffee.kryoserializers.dexx.MapSerializerTest">
        <test-method status="PASS" signature="testEmpty()[pri:0, instance:de.javakaffee.kryoserializers.dexx.MapSerializerTest@e45f292]" name="testEmpty" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method status="PASS" signature="testCopyRegular()[pri:0, instance:de.javakaffee.kryoserializers.dexx.MapSerializerTest@e45f292]" name="testCopyRegular" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRegular -->
        <test-method status="PASS" signature="testCopyEmpty()[pri:0, instance:de.javakaffee.kryoserializers.dexx.MapSerializerTest@e45f292]" name="testCopyEmpty" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmpty -->
        <test-method status="PASS" signature="testRegular()[pri:0, instance:de.javakaffee.kryoserializers.dexx.MapSerializerTest@e45f292]" name="testRegular" duration-ms="2" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegular -->
      </class> <!-- de.javakaffee.kryoserializers.dexx.MapSerializerTest -->
      <class name="de.javakaffee.kryoserializers.jodatime.JodaLocalTimeSerializerTest">
        <test-method status="PASS" signature="testCopyJodaLocalTime()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaLocalTimeSerializerTest@6500df86]" name="testCopyJodaLocalTime" duration-ms="10" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJodaLocalTime -->
        <test-method status="PASS" signature="testJodaLocalTime()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaLocalTimeSerializerTest@6500df86]" name="testJodaLocalTime" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJodaLocalTime -->
      </class> <!-- de.javakaffee.kryoserializers.jodatime.JodaLocalTimeSerializerTest -->
      <class name="de.javakaffee.kryoserializers.wicket.MiniMapSerializerTest">
        <test-method status="PASS" signature="testMiniMapAddEntriesAfterDeserialization()[pri:0, instance:de.javakaffee.kryoserializers.wicket.MiniMapSerializerTest@1ed4004b]" name="testMiniMapAddEntriesAfterDeserialization" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMiniMapAddEntriesAfterDeserialization -->
        <test-method status="PASS" signature="testMiniMapEmpty()[pri:0, instance:de.javakaffee.kryoserializers.wicket.MiniMapSerializerTest@1ed4004b]" name="testMiniMapEmpty" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMiniMapEmpty -->
        <test-method status="PASS" signature="testMiniMapLessThanMaxEntries()[pri:0, instance:de.javakaffee.kryoserializers.wicket.MiniMapSerializerTest@1ed4004b]" name="testMiniMapLessThanMaxEntries" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMiniMapLessThanMaxEntries -->
        <test-method status="PASS" signature="testMiniMapExactNumberOfEntries()[pri:0, instance:de.javakaffee.kryoserializers.wicket.MiniMapSerializerTest@1ed4004b]" name="testMiniMapExactNumberOfEntries" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMiniMapExactNumberOfEntries -->
      </class> <!-- de.javakaffee.kryoserializers.wicket.MiniMapSerializerTest -->
      <class name="de.javakaffee.kryoserializers.jodatime.JodaDateTimeSerializerTest">
        <test-method status="PASS" signature="testCopyJodaDateTime()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaDateTimeSerializerTest@589838eb]" name="testCopyJodaDateTime" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJodaDateTime -->
        <test-method status="PASS" signature="testJodaDateTime()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaDateTimeSerializerTest@589838eb]" name="testJodaDateTime" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJodaDateTime -->
      </class> <!-- de.javakaffee.kryoserializers.jodatime.JodaDateTimeSerializerTest -->
      <class name="de.javakaffee.kryoserializers.FieldAnnotationAwareSerializerTest">
        <test-method status="PASS" signature="testExcludeFields()[pri:0, instance:de.javakaffee.kryoserializers.FieldAnnotationAwareSerializerTest@402a079c]" name="testExcludeFields" duration-ms="2" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExcludeFields -->
        <test-method status="PASS" signature="testIncludeFields()[pri:0, instance:de.javakaffee.kryoserializers.FieldAnnotationAwareSerializerTest@402a079c]" name="testIncludeFields" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIncludeFields -->
      </class> <!-- de.javakaffee.kryoserializers.FieldAnnotationAwareSerializerTest -->
      <class name="de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest">
        <test-method status="PASS" signature="initializeKyroWithSerializer()[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@6e1567f1]" name="initializeKyroWithSerializer" is-config="true" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initializeKyroWithSerializer -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@6e1567f1]" name="testMultimap" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@449a4f23]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@6e1567f1]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@69e153c5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@6e1567f1]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@5d0bf09b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@6e1567f1]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@27406a17]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@6e1567f1]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@563f38c4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@6e1567f1]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@74ea2410]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@6e1567f1]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@117159c0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@6e1567f1]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@1ca3b418]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimap([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@6e1567f1]" name="testMultimap" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@3b0fe47a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimap -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@6e1567f1]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@74e28667]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@6e1567f1]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@5149d738]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@6e1567f1]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@75d3a5e0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@6e1567f1]" name="testMultimapCopy" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@53fb3dab]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@6e1567f1]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@19e4653c]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@6e1567f1]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@4be29ed9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@6e1567f1]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@79e4c792]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@6e1567f1]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@712625fd]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
        <test-method status="PASS" signature="testMultimapCopy([Ljava.lang.Object;)[pri:0, instance:de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest@6e1567f1]" name="testMultimapCopy" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="Google Guava multimaps" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@350aac89]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultimapCopy -->
      </class> <!-- de.javakaffee.kryoserializers.guava.ArrayListMultimapSerializerTest -->
      <class name="de.javakaffee.kryoserializers.wicket.WicketTest">
        <test-method status="PASS" signature="testFeedbackPanel()[pri:0, instance:de.javakaffee.kryoserializers.wicket.WicketTest@72d818d1]" name="testFeedbackPanel" duration-ms="17" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFeedbackPanel -->
        <test-method status="PASS" signature="testMarkupContainerChildList()[pri:0, instance:de.javakaffee.kryoserializers.wicket.WicketTest@72d818d1]" name="testMarkupContainerChildList" duration-ms="2" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMarkupContainerChildList -->
        <test-method status="PASS" signature="afterTest()[pri:0, instance:de.javakaffee.kryoserializers.wicket.WicketTest@72d818d1]" name="afterTest" is-config="true" duration-ms="105" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
      </class> <!-- de.javakaffee.kryoserializers.wicket.WicketTest -->
      <class name="de.javakaffee.kryoserializers.dexx.ListSerializerTest">
        <test-method status="PASS" signature="testCopyCopyOfIterable()[pri:0, instance:de.javakaffee.kryoserializers.dexx.ListSerializerTest@5f2108b5]" name="testCopyCopyOfIterable" duration-ms="2" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyCopyOfIterable -->
        <test-method status="PASS" signature="testCopyOfIterable()[pri:0, instance:de.javakaffee.kryoserializers.dexx.ListSerializerTest@5f2108b5]" name="testCopyOfIterable" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyOfIterable -->
        <test-method status="PASS" signature="testCopyEmpty()[pri:0, instance:de.javakaffee.kryoserializers.dexx.ListSerializerTest@5f2108b5]" name="testCopyEmpty" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEmpty -->
        <test-method status="PASS" signature="testCopyRegular()[pri:0, instance:de.javakaffee.kryoserializers.dexx.ListSerializerTest@5f2108b5]" name="testCopyRegular" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRegular -->
        <test-method status="PASS" signature="testEmpty()[pri:0, instance:de.javakaffee.kryoserializers.dexx.ListSerializerTest@5f2108b5]" name="testEmpty" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmpty -->
        <test-method status="PASS" signature="testRegular()[pri:0, instance:de.javakaffee.kryoserializers.dexx.ListSerializerTest@5f2108b5]" name="testRegular" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegular -->
      </class> <!-- de.javakaffee.kryoserializers.dexx.ListSerializerTest -->
      <class name="de.javakaffee.kryoserializers.jodatime.JodaLocalDateTimeSerializerTest">
        <test-method status="PASS" signature="testCopyJodaLocalDateTime()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaLocalDateTimeSerializerTest@7085bdee]" name="testCopyJodaLocalDateTime" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJodaLocalDateTime -->
        <test-method status="PASS" signature="testJodaLocalDateTime()[pri:0, instance:de.javakaffee.kryoserializers.jodatime.JodaLocalDateTimeSerializerTest@7085bdee]" name="testJodaLocalDateTime" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJodaLocalDateTime -->
      </class> <!-- de.javakaffee.kryoserializers.jodatime.JodaLocalDateTimeSerializerTest -->
      <class name="de.javakaffee.kryoserializers.KryoTest">
        <test-method status="PASS" signature="testBitSet()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testBitSet" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBitSet -->
        <test-method status="PASS" signature="testClassSerializer()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testClassSerializer" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClassSerializer -->
        <test-method status="PASS" signature="testClassWithoutDefaultConstructor()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testClassWithoutDefaultConstructor" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClassWithoutDefaultConstructor -->
        <test-method status="PASS" signature="testCollections()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCollections" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCollections -->
        <test-method status="PASS" signature="testCopyEnumMap()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopyEnumMap" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEnumMap -->
        <test-method status="PASS" signature="testCopyEnumSet()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopyEnumSet" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyEnumSet -->
        <test-method status="PASS" signature="testCopyBitSet()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopyBitSet" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyBitSet -->
        <test-method status="PASS" signature="testCopyForIterateMapSerializer()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopyForIterateMapSerializer" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyForIterateMapSerializer -->
        <test-method status="PASS" signature="testCopyGregorianCalendar()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopyGregorianCalendar" duration-ms="7" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyGregorianCalendar -->
        <test-method status="PASS" signature="testCopyJavaSqlDate()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopyJavaSqlDate" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJavaSqlDate -->
        <test-method status="PASS" signature="testCopyJavaUtilCollectionsEmptyMap()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopyJavaUtilCollectionsEmptyMap" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJavaUtilCollectionsEmptyMap -->
        <test-method status="PASS" signature="testCopyJavaUtilArraysAsList()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopyJavaUtilArraysAsList" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJavaUtilArraysAsList -->
        <test-method status="PASS" signature="testCopyJdkProxy()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopyJdkProxy" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJdkProxy -->
        <test-method status="PASS" signature="testCopyJavaUtilCollectionsEmptySet()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopyJavaUtilCollectionsEmptySet" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJavaUtilCollectionsEmptySet -->
        <test-method status="PASS" signature="testCopyJavaUtilCollectionsEmptyList()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopyJavaUtilCollectionsEmptyList" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJavaUtilCollectionsEmptyList -->
        <test-method status="PASS" signature="testCopyJavaSqlTimestamp()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopyJavaSqlTimestamp" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJavaSqlTimestamp -->
        <test-method status="PASS" signature="testCopyJavaSqlTime()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopyJavaSqlTime" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJavaSqlTime -->
        <test-method status="PASS" signature="testCopyJavaUtilDate()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopyJavaUtilDate" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyJavaUtilDate -->
        <test-method status="PASS" signature="testCopySingletonList()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopySingletonList" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySingletonList -->
        <test-method status="PASS" signature="testCopySingletonSet()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopySingletonSet" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySingletonSet -->
        <test-method status="PASS" signature="testCopySingletonMap()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopySingletonMap" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySingletonMap -->
        <test-method status="PASS" signature="testCopyRegex()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopyRegex" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyRegex -->
        <test-method status="PASS" signature="testCopyUUID()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopyUUID" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyUUID -->
        <test-method status="PASS" signature="testCopyURI()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopyURI" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyURI -->
        <test-method status="PASS" signature="testCopySynchronizedCollections(java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopySynchronizedCollections" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="synchronizedCollections" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{foo=bar}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySynchronizedCollections -->
        <test-method status="PASS" signature="testCopySynchronizedCollections(java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopySynchronizedCollections" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="synchronizedCollections" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[bar, foo]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySynchronizedCollections -->
        <test-method status="PASS" signature="testCopySynchronizedCollections(java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopySynchronizedCollections" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="synchronizedCollections" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo, bar]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopySynchronizedCollections -->
        <test-method status="PASS" signature="testCopyUnmodifiableCollections(java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopyUnmodifiableCollections" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="unmodifiableCollections" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[bar, foo]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyUnmodifiableCollections -->
        <test-method status="PASS" signature="testCurrency()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCurrency" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCurrency -->
        <test-method status="PASS" signature="testCopyUnmodifiableCollections(java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopyUnmodifiableCollections" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="unmodifiableCollections" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo, bar]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyUnmodifiableCollections -->
        <test-method status="PASS" signature="testCopyUnmodifiableCollections(java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCopyUnmodifiableCollections" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="unmodifiableCollections" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{foo=bar}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyUnmodifiableCollections -->
        <test-method status="PASS" signature="testCyclicDependencies()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testCyclicDependencies" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCyclicDependencies -->
        <test-method status="PASS" signature="testGregorianCalendar()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testGregorianCalendar" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGregorianCalendar -->
        <test-method status="PASS" signature="testInnerClass()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testInnerClass" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInnerClass -->
        <test-method status="PASS" signature="testEnumMap()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testEnumMap" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumMap -->
        <test-method status="PASS" signature="testEnumSet()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testEnumSet" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnumSet -->
        <test-method status="PASS" signature="testJavaSqlTimestamp()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testJavaSqlTimestamp" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaSqlTimestamp -->
        <test-method status="PASS" signature="testJavaUtilArraysAsListEmpty()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testJavaUtilArraysAsListEmpty" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaUtilArraysAsListEmpty -->
        <test-method status="PASS" signature="testJavaUtilArraysAsListEmail()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testJavaUtilArraysAsListEmail" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaUtilArraysAsListEmail -->
        <test-method status="PASS" signature="testJavaSqlTime()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testJavaSqlTime" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaSqlTime -->
        <test-method status="PASS" signature="testJavaUtilArraysAsListBoxedPrimitives()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testJavaUtilArraysAsListBoxedPrimitives" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaUtilArraysAsListBoxedPrimitives -->
        <test-method status="PASS" signature="testJavaUtilArraysAsListPrimitiveArrayElement()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testJavaUtilArraysAsListPrimitiveArrayElement" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaUtilArraysAsListPrimitiveArrayElement -->
        <test-method status="PASS" signature="testJavaSqlDate()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testJavaSqlDate" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaSqlDate -->
        <test-method status="PASS" signature="testJavaUtilArraysAsListString()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testJavaUtilArraysAsListString" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaUtilArraysAsListString -->
        <test-method status="PASS" signature="testJdkProxy()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testJdkProxy" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJdkProxy -->
        <test-method status="PASS" signature="testJavaUtilCollectionsEmptySet()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testJavaUtilCollectionsEmptySet" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaUtilCollectionsEmptySet -->
        <test-method status="PASS" signature="testJavaUtilCollectionsEmptyList()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testJavaUtilCollectionsEmptyList" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaUtilCollectionsEmptyList -->
        <test-method status="PASS" signature="testJavaUtilDate()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testJavaUtilDate" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaUtilDate -->
        <test-method status="PASS" signature="testJavaUtilCollectionsEmptyMap()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testJavaUtilCollectionsEmptyMap" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaUtilCollectionsEmptyMap -->
        <test-method status="PASS" signature="testPrivateClass()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testPrivateClass" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPrivateClass -->
        <test-method status="PASS" signature="testMapWithIntConstructorOnly()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testMapWithIntConstructorOnly" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMapWithIntConstructorOnly -->
        <test-method status="PASS" signature="testSharedObjectIdentity(java.lang.String, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testSharedObjectIdentity" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="sharedObjectIdentityProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[AtomicInteger]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSharedObjectIdentity -->
        <test-method status="PASS" signature="testRegex()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testRegex" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRegex -->
        <test-method status="PASS" signature="testSharedObjectIdentityWithArray(java.lang.String, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testSharedObjectIdentityWithArray" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="sharedObjectIdentityProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Email]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Email [_email=foo.bar@example.com, _name=foo bar]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSharedObjectIdentityWithArray -->
        <test-method status="PASS" signature="testSharedObjectIdentityWithArray(java.lang.String, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testSharedObjectIdentityWithArray" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="sharedObjectIdentityProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[AtomicInteger]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSharedObjectIdentityWithArray -->
        <test-method status="PASS" signature="testSharedObjectIdentity(java.lang.String, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testSharedObjectIdentity" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="sharedObjectIdentityProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Email]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Email [_email=foo.bar@example.com, _name=foo bar]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSharedObjectIdentity -->
        <test-method status="PASS" signature="testSingletonSet()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testSingletonSet" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSingletonSet -->
        <test-method status="PASS" signature="testSharedObjectIdentity_CounterHolder()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testSharedObjectIdentity_CounterHolder" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSharedObjectIdentity_CounterHolder -->
        <test-method status="PASS" signature="testSingletonMap()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testSingletonMap" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSingletonMap -->
        <test-method status="PASS" signature="testStringBuffer()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testStringBuffer" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringBuffer -->
        <test-method status="PASS" signature="testSingletonList()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testSingletonList" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSingletonList -->
        <test-method status="PASS" signature="testStringBuilder()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testStringBuilder" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStringBuilder -->
        <test-method status="PASS" signature="testSynchronizedCollections(java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testSynchronizedCollections" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="synchronizedCollections" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{foo=bar}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSynchronizedCollections -->
        <test-method status="PASS" signature="testSynchronizedCollections(java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testSynchronizedCollections" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="synchronizedCollections" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo, bar]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSynchronizedCollections -->
        <test-method status="PASS" signature="testSynchronizedCollections(java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testSynchronizedCollections" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="synchronizedCollections" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[bar, foo]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSynchronizedCollections -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Byte]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[98]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Class]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class java.lang.String]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.util.concurrent.atomic.AtomicLong]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Float]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Short]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.StringBuilder]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.math.BigDecimal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Long]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.util.concurrent.atomic.AtomicInteger]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.String]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Boolean]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Character]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[c]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.StringBuffer]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Double]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Integer]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class org.apache.commons.lang.mutable.MutableInt]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class [Ljava.lang.Integer;]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Integer;@5dd91bca]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="2" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.util.Date]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Thu Jul 30 19:23:15 UTC 2020]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="1" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.util.ArrayList]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[foo]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.util.Calendar]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[java.util.GregorianCalendar[time=1596137005506,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id="Etc/UTC",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2020,MONTH=6,WEEK_OF_YEAR=31,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=212,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=23,SECOND=25,MILLISECOND=506,ZONE_OFFSET=0,DST_OFFSET=0]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.util.Currency]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[EUR]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class [I]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@40f1be1b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class [F]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[F@609640d5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class [J]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[J@14c01636]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class [S]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[S@61884cb1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class [Ljava.lang.String;]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.String;@3dddefd8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class [D]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[D@4bef0fe3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class [Lde.javakaffee.kryoserializers.TestClasses$Person;]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Lde.javakaffee.kryoserializers.TestClasses$Person;@13e3c1c7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class [I]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@66ce957f]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class [C]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[C@3b220bcb]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesAsSessionAttributes(java.lang.Class, java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesAsSessionAttributes" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="typesAsSessionAttributesProvider" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[class [B]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[B@666b83a4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesAsSessionAttributes -->
        <test-method status="PASS" signature="testTypesInContainerClass()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testTypesInContainerClass" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypesInContainerClass -->
        <test-method status="PASS" signature="testURI()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testURI" duration-ms="1" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testURI -->
        <test-method status="PASS" signature="testUnmodifiableCollections(java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testUnmodifiableCollections" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="unmodifiableCollections" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[bar, foo]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUnmodifiableCollections -->
        <test-method status="PASS" signature="testUnmodifiableCollections(java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testUnmodifiableCollections" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="unmodifiableCollections" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[foo, bar]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUnmodifiableCollections -->
        <test-method status="PASS" signature="testUUID()[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testUUID" duration-ms="0" started-at="2020-07-30T19:23:25Z" finished-at="2020-07-30T19:23:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUUID -->
        <test-method status="PASS" signature="testUnmodifiableCollections(java.lang.Object)[pri:0, instance:de.javakaffee.kryoserializers.KryoTest@490ab905]" name="testUnmodifiableCollections" duration-ms="0" started-at="2020-07-30T19:23:25Z" data-provider="unmodifiableCollections" finished-at="2020-07-30T19:23:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{foo=bar}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUnmodifiableCollections -->
      </class> <!-- de.javakaffee.kryoserializers.KryoTest -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
