<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.mitre</groupId>
	<artifactId>neoprofiler</artifactId>
	<version>0.13</version>
	<name>Neo4J Database Profiler</name>
	<description>Software which can examine Neo4J databases and build descriptions of their contents.</description>
	<dependencies>
		<dependency>
			<groupId>org.neo4j</groupId>
			<artifactId>neo4j</artifactId>
			<version>${neo4j-version}</version>
		</dependency>
		<dependency>
			<groupId>org.neo4j</groupId>
			<artifactId>neo4j-cypher</artifactId>
			<version>${neo4j-version}</version>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.2.4</version>
		</dependency>
		<dependency>
			<groupId>commons-cli</groupId>
			<artifactId>commons-cli</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.velocity</groupId>
			<artifactId>velocity</artifactId>
			<version>1.7</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- Onejar plugin: this generates a "fatjar" with all dependencies in a single JAR. 
				 Generating these JARs is really useful for environments where it's not easy to lug around 100 JARs with
				 you and create massive classpaths (e.g. embedding in other systems like HDFS).
				 
				 In general, using these fatjars is not preferred; it's better to just use the packaged jar and then the
				 classpath generated by dependency:build-classpath, but sometimes this is easier. 
			   -->
			<plugin>
				<groupId>org.dstovall</groupId>
				<artifactId>onejar-maven-plugin</artifactId>
				<version>1.4.4</version>
				<executions>
					<execution>
						<configuration>
							<!-- Optional, default is false -->
							<attachToBuild>true</attachToBuild>
		                	<mainClass>org.mitre.neoprofiler.NeoProfiler</mainClass>
							<!-- Optional, default is "onejar" -->
							<classifier>onejar</classifier>
						</configuration>
						<goals>
							<goal>one-jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
				
			<!-- Appsembler plugin: see http://mojo.codehaus.org/appassembler/appassembler-maven-plugin/usage-program.html -->
			<!-- This plugin generates scripts that permit main methods in various 
				java programs to be run as stand-alone programs -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>appassembler-maven-plugin</artifactId>
				<version>1.7</version>
				<configuration>
					<programs>
						<program>
							<mainClass>org.mitre.neoprofiler.NeoProfiler</mainClass>
							<id>NeoProfiler</id>
						</program>
					</programs>
				</configuration>
			</plugin>
			

		      <plugin>
		        <groupId>org.apache.maven.plugins</groupId>
		        <artifactId>maven-compiler-plugin</artifactId>
		        <version>3.1</version>
		        <configuration>
		          <source>1.7</source>
		          <target>1.7</target>
		        </configuration>
		      </plugin>			
		</plugins>
	</build>
	
	<pluginRepositories>
		<pluginRepository>
			<id>onejar-maven-plugin.googlecode.com</id>
			<url>http://onejar-maven-plugin.googlecode.com/svn/mavenrepo</url>
		</pluginRepository>
	</pluginRepositories>	
	<scm>
		<url>https://github.com/moxious/neoprofiler</url>
	</scm>
	<url>https://github.com/moxious/neoprofiler</url>
	<issueManagement>
		<url>https://github.com/moxious/neoprofiler/issues</url>
	</issueManagement>
	<properties>
		<neo4j-version>2.1.2</neo4j-version>
	</properties>
</project>
