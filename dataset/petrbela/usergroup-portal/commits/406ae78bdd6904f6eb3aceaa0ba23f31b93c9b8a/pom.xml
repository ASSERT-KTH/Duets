<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.appengine.usergroup-portal</groupId>
	<artifactId>usergroup-portal</artifactId>

	<packaging>war</packaging>
	<name>usergroup-portal</name>

	<!-- Specify hard-coded project properties here -->
	<properties>

		<!-- Sets the project's default encoding. http://docs.codehaus.org/display/MAVENUSER/POM+Element+for+Source+File+Encoding -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- This is just for "eclipse:eclipse" goal to always attempt downloading sources -->
		<downloadSources>true</downloadSources>

		<!-- Specify AppEngine version for your project. It should match SDK version pointed to by ${gae.home} property (Typically, 
			one used by your Eclipse plug-in) -->
		<gae.version>1.5.1</gae.version>

		<!-- GWT version -->
		<gwt.version>2.0.0</gwt.version>

		<!-- Upload to http://test.latest.<applicationName>.appspot.com by default -->
		<gae.application.version>test</gae.application.version>

		<!-- port defaults to 8080 -->
		<gae.port>8080</gae.port>

		<!-- Produce detailed JS during GWT compilation for development environment -->
		<gwt.style>DETAILED</gwt.style>

		<gae.home>${settings.localRepository}/com/google/appengine/appengine-java-sdk/${gae.version}/appengine-java-sdk-${gae.version}</gae.home>
		<rebel.home>${env.REBEL_HOME}</rebel.home>
		<maven.gae.plugin.version>0.8.4</maven.gae.plugin.version>
		<objectify.version>3.0</objectify.version>

	</properties>

	<dependencies>
		<!-- Google API Client -->
		<!-- <dependency> -->
		<!-- <groupId>com.google.api.client</groupId> -->
		<!-- <artifactId></artifactId> -->
		<!-- <version>1.4.1-beta</version> -->
		<!-- </dependency> -->
		<dependency>
			<groupId>com.google.gdata</groupId>
			<artifactId>gdata-blogger-2.0</artifactId>
			<version>1.41.5</version>
		</dependency>

		<!-- Google App Engine meta-package -->
		<dependency>
			<groupId>net.kindleit</groupId>
			<artifactId>gae-runtime</artifactId>
			<version>${gae.version}</version>
			<type>pom</type>
		</dependency>

		<dependency>
			<groupId>javax.transaction</groupId>
			<artifactId>jta</artifactId>
			<version>1.1</version>
		</dependency>

		<!-- Needed for compiling POJOs with JPA annotations. -->
		<dependency>
			<groupId>javax.persistence</groupId>
			<artifactId>persistence-api</artifactId>
			<version>1.0</version>
		</dependency>

		<!-- Vaadin -->
		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin</artifactId>
			<version>6.6.2</version>
		</dependency>

		<!-- J2EE Servlet API. We need it to compile IndexServlet class. You can probably remove it, if you don't explicitly use 
			Servlets -->
		<dependency>
			<groupId>org.apache.geronimo.specs</groupId>
			<artifactId>geronimo-servlet_2.5_spec</artifactId>
			<version>1.2</version>
			<scope>provided</scope>
		</dependency>

		<!-- Make use of JSP tags. Remove, if you don't use JSPs -->
		<dependency>
			<artifactId>standard</artifactId>
			<groupId>taglibs</groupId>
			<version>1.1.2</version>
			<type>jar</type>
			<scope>runtime</scope>
		</dependency>

		<!-- These dependencies are here just for enabling logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.6.1</version>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>0.9.24</version>
		</dependency>

		<!-- Test scope -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.5</version>
			<scope>test</scope>
		</dependency>

		<!-- GAE libraries for local testing as described here: http://code.google.com/appengine/docs/java/howto/unittesting.html -->
		<dependency>
			<groupId>com.google.appengine</groupId>
			<artifactId>appengine-api-labs</artifactId>
			<version>${gae.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>com.google.appengine</groupId>
			<artifactId>appengine-api-stubs</artifactId>
			<version>${gae.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>com.google.appengine</groupId>
			<artifactId>appengine-testing</artifactId>
			<version>${gae.version}</version>
			<scope>test</scope>
		</dependency>


		<!-- Objectify -->
		<dependency>
			<groupId>com.googlecode.objectify</groupId>
			<artifactId>objectify</artifactId>
			<version>3.0</version>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.8.5</version>
		</dependency>
	</dependencies>


	<repositories>
		<!-- Objectify repo -->
		<repository>
			<id>objectify-appengine</id>
			<url>http://objectify-appengine.googlecode.com/svn/maven</url>
		</repository>
		<!-- http://code.google.com/p/mandubian-mvn/wiki/HowTo -->
		<repository>
			<id>mandubian-mvn</id>
			<url>http://mandubian-mvn.googlecode.com/svn/trunk/mandubian-mvn/repository</url>
		</repository>
	</repositories>

	<version>0.1-SNAPSHOT</version>
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.1-beta-1</version>
				<configuration>
					<webResources>
						<resource>
							<directory>src/main/webapp</directory>
							<filtering>true</filtering>
							<includes>
								<include>**/appengine-web.xml</include>
							</includes>
						</resource>
					</webResources>
				</configuration>
			</plugin>


			<!-- The actual maven-gae-plugin. Type "mvn gae:run" to run project, "mvn gae:deploy" to upload to GAE. -->
			<plugin>
				<groupId>net.kindleit</groupId>
				<artifactId>maven-gae-plugin</artifactId>
				<version>0.8.4</version>
				<dependencies>
					<dependency>
						<groupId>net.kindleit</groupId>
						<artifactId>gae-runtime</artifactId>
						<version>${gae.version}</version>
						<type>pom</type>
					</dependency>
				</dependencies>
			</plugin>

			<!-- Upload application to the appspot automatically, during release:perform -->
			<plugin>
				<artifactId>maven-release-plugin</artifactId>
				<configuration>
					<goals>gae:deploy</goals>
				</configuration>
			</plugin>

			<!-- Java compiler version -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.0</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>

		<!-- We can configure our integration server to activate this profile and perform gae:deploy, thus uploading latest snapshot 
			to the http://1.latest.<applicationName>.appspot.com automatically -->
		<profile>
			<id>integration-build</id>
			<properties>
				<gae.application.version>stage</gae.application.version>

				<!-- Produce pretty JS during GWT compilation for test environment -->
				<gwt.style>PRETTY</gwt.style>
			</properties>
		</profile>

		<!-- This profile will activate automatically during release and upload application to the http://2.latest.<applicationName>.appspot.com 
			(We might want to set the 2nd version as our applications Default version to be accessible at http://<applicationName>.appspot.com) -->
		<profile>
			<id>release-build</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>

			<properties>
				<!-- During release, set application version in appengine-web.xml to 2 -->
				<gae.application.version>release</gae.application.version>

				<!-- Produce compressed JS during GWT compilation for production environment -->
				<gwt.style>OBFUSCATED</gwt.style>
			</properties>
		</profile>

		<profile>
			<id>local-jrebel</id>
			<properties>
				<mode>local</mode>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>net.kindleit</groupId>
						<artifactId>maven-gae-plugin</artifactId>
						<version>${maven.gae.plugin.version}</version>
						<configuration>
							<jvmFlags>
								<jvmFlag>-Xdebug</jvmFlag>
								<jvmFlag>-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000</jvmFlag>
								<jvmFlag>-Dmail.log_mail_level=WARNING</jvmFlag>
								<jvmFlag>-Dmail.log_mail_body=true</jvmFlag>
								<jvmFlag>-javaagent:${rebel.home}/jrebel.jar</jvmFlag>
								<jvmFlag>-noverify</jvmFlag>
							</jvmFlags>
							<severity>0</severity>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>unpack</goal>
								</goals>
							</execution>
						</executions>
						<dependencies>
							<dependency>
								<groupId>net.kindleit</groupId>
								<artifactId>gae-runtime</artifactId>
								<version>${gae.version}</version>
								<type>pom</type>
							</dependency>
						</dependencies>
					</plugin>
					<plugin>
						<groupId>org.zeroturnaround</groupId>
						<artifactId>jrebel-maven-plugin</artifactId>
						<version>1.0.7</version>
						<executions>
							<execution>
								<id>generate-rebel-xml</id>
								<phase>process-resources</phase>
								<goals>
									<goal>generate</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
