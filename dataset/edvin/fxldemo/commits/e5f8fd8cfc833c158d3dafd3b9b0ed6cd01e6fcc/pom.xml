<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>no.tornado</groupId>
    <artifactId>fxldemo</artifactId>
    <version>2.0</version>
    <name>FxlDemo</name>

    <!--
        This deployment descriptor features a complete example for building an auto updating JavaFX application
        with FXLauncher, including native installers. ControlsFX is included just to have some additional dependencies :)
    -->

    <dependencies>
        <dependency>
            <groupId>no.tornado</groupId>
            <artifactId>fxlauncher</artifactId>
            <version>1.0.2</version>
        </dependency>
        <dependency>
            <groupId>org.controlsfx</groupId>
            <artifactId>controlsfx</artifactId>
            <version>8.40.10</version>
        </dependency>
    </dependencies>

    <!-- Everything you normally need to configure is done in this section -->

    <properties>
        <!-- Installer Filename without suffix -->
        <app.filename>FxlDemo</app.filename>

        <!-- The JavaFX Application class name -->
        <app.mainClass>no.tornado.FxlDemo</app.mainClass>

        <!-- The Application version used by javapackager -->
        <app.version>2.0</app.version>

        <!-- The app and launcher will be assembled in this folder -->
        <app.dir>${project.build.directory}/app</app.dir>

        <!-- Native installers will be build in this folder -->
        <app.installerdir>${project.build.directory}/installer</app.installerdir>

        <!-- Base URL where you will host the application artifacts -->
        <app.url>http://fxldemo.tornado.no/</app.url>

        <!-- Optional scp target for application artifacts hosted at the above url -->
        <app.deploy.target>w48839@fxldemo.tornado.no:fxldemo</app.deploy.target>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <!-- The build plugins below perform the following steps:

        1. Compile project jar to app.dir
        2. Copy dependencies to app.dir
        3. Generate app.xml manifest
        4. Create native installer
        5. Upload application artifacts

        Usage:

        Generate a working app into app.dir (target/app by default):

            mvn clean package

            (You can now launch the app with java -jar fxlauncher.jar from target/app)

        Deploy the application artifacts via scp

            mvn exec:exec@deploy-app

            (Auto update is now available. You can also run java -jar fxlauncher.jar http://app.url/app.xml)

        Build a native installer for the platform you are on (only needed once)

            mvn exec:exec@installer

            (Look in target/installer/bundles for your native installer)
    -->
    <build>
        <plugins>
            <!-- Compile project jar to appdir -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.6</version>
                <configuration>
                    <outputDirectory>${app.dir}</outputDirectory>
                </configuration>
            </plugin>
            <!-- Copy dependencies to appdir -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>2.10</version>
                <configuration>
                    <excludeScope>provided</excludeScope>
                    <outputDirectory>${app.dir}</outputDirectory>
                    <stripVersion>true</stripVersion>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.4.0</version>
                <!-- Generate app.xml manifest -->
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>fxlauncher.CreateManifest</mainClass>
                            <arguments>
                                <argument>${app.url}</argument>
                                <argument>${app.mainClass}</argument>
                                <argument>${app.dir}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <!-- Create native installer. Feel free to add more arguments as needed.
                     https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javapackager.html
                     -->
                    <execution>
                        <id>installer</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>javapackager</executable>

                            <arguments>
                                <argument>-deploy</argument>
                                <argument>-native</argument>
                                <argument>-outdir</argument>
                                <argument>${app.installerdir}</argument>
                                <argument>-outfile</argument>
                                <argument>${app.filename}</argument>
                                <argument>-srcdir</argument>
                                <argument>${app.dir}</argument>
                                <argument>-srcfiles</argument>
                                <argument>fxlauncher.jar</argument>
                                <argument>-argument</argument>
                                <argument>${app.url}/app.xml</argument>
                                <argument>-appclass</argument>
                                <argument>fxlauncher.Launcher</argument>
                                <argument>-name</argument>
                                <argument>${project.name}</argument>
                                <argument>-title</argument>
                                <argument>${project.name}</argument>
                                <argument>-BappVersion=${app.version}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <!-- Copy application artifacts to remote site using scp (optional) -->
                    <execution>
                        <id>deploy-app</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>scp</executable>
                            <arguments>
                                <argument>-r</argument>
                                <argument>${app.dir}/.</argument>
                                <argument>${app.deploy.target}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.3</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>