<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.easyJsonApi</groupId>
	<artifactId>easyJsonApi</artifactId>
	<version>1.0.0-BUILD-SNAPSHOT</version>

	<packaging>jar</packaging>

	<name>EasyJsonApi</name>

	<description></description>

	<inceptionYear>2016</inceptionYear>

	<organization>
		<name>EasyJsonApi</name>
		<url>https://github.com/easyJsonApi/easyJsonApi/wiki</url>
	</organization>

	<licenses>
		<license>
			<name>Apache License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<developers>
		<developer>
			<name>Nuno Bento</name>
			<email>nbento.neves@gmail.com</email>
			<roles>
				<role>Lead Developer</role>
			</roles>
		</developer>
	</developers>

	<distributionManagement>
		<site>
			<id>github</id>
			<name>EasyJsonApi</name>
			<url>https://github.com/easyJsonApi/easyJsonApi.git</url>
		</site>
	</distributionManagement>

	<properties>

		<!-- Generic properties -->
		<java.version>1.7</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!-- Spring -->
		<spring-framework.version>4.2.0.RELEASE</spring-framework.version>

		<!-- Logging -->
		<logback.version>1.0.13</logback.version>
		<slf4j.version>1.7.5</slf4j.version>
		<log4j2.version>2.2</log4j2.version>

		<!-- Test -->
		<junit.version>4.11</junit.version>
		<mockito.version>1.10.19</mockito.version>

		<!-- API Json -->
		<jackson.version>2.7.2</jackson.version>
		<gson.version>2.6.2</gson.version>

		<!-- Tools -->
		<apache.commons.version>2.4</apache.commons.version>
		<guava.version>19.0</guava.version>

		<!-- Code coverage -->
		<jacoco.version>0.7.6.201602180812</jacoco.version>

		<!-- PlantUML -->
		<plantuml.version>7954</plantuml.version>

		<!-- Plugins Version -->
		<maven.compile.plugin.version>3.5.1</maven.compile.plugin.version>
		<jacoco.plugin.version>0.7.6.201602180812</jacoco.plugin.version>
		<surefire.plugin.version>2.19.1</surefire.plugin.version>
		<coveralls.plugin.version>4.1.0</coveralls.plugin.version>
		<license.plugin.verion>1.8</license.plugin.verion>
		<plantuml.plugin.version>7954</plantuml.plugin.version>

		<!-- License -->
		<license.licenseName>apache_v2</license.licenseName>
		<license.addJavaLicenseAfterPackage>false</license.addJavaLicenseAfterPackage>

	</properties>

	<dependencies>

		<!-- Jackson -->
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
			<version>${jackson.version}</version>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${jackson.version}</version>
		</dependency>

		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>${gson.version}</version>
		</dependency>

		<!-- 2. Bridge logging from JCL to SLF4j -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${slf4j.version}</version>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
			<exclusions>
				<exclusion>
					<artifactId>slf4j-api</artifactId>
					<groupId>org.slf4j</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Test Artifacts -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring-framework.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.10.19</version>
			<scope>test</scope>
		</dependency>


		<!-- Tools dependencies -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>${apache.commons.version}</version>
		</dependency>

		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>${guava.version}</version>
		</dependency>

		<!-- Code coverage dependencies -->
		<dependency>
			<groupId>org.jacoco</groupId>
			<artifactId>jacoco-maven-plugin</artifactId>
			<version>${jacoco.version}</version>
		</dependency>

	</dependencies>

	<build>

		<!-- Defines plugins versions for this project and any modules that may 
			be added -->
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${maven.compile.plugin.version}</version>
				</plugin>


				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${surefire.plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco.plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.eluder.coveralls</groupId>
					<artifactId>coveralls-maven-plugin</artifactId>
					<version>${coveralls.plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>license-maven-plugin</artifactId>
					<version>${license.plugin.verion}</version>
				</plugin>

				<plugin>
					<groupId>com.github.jeluard</groupId>
					<artifactId>plantuml-maven-plugin</artifactId>
					<version>${plantuml.plugin.version}</version>
				</plugin>
			</plugins>
		</pluginManagement>

		<!-- Define the project resources -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>

		</resources>

		<!-- Define the project test resources -->
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
			</testResource>
		</testResources>

		<plugins>

			<!-- Plugin compile java -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>

			<!-- Puglin surefire tests maven -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<!-- Sets the VM argument line used when unit tests are run. -->
					<argLine>${surefireArgLine}</argLine>
					<!-- Skips unit tests if the value of skip.unit.tests property is true -->
					<skipTests>${skip.unit.tests}</skipTests>
					<!-- Excludes integration tests when unit tests are run. -->
					<excludes>
						<exclude>**/IT*.java</exclude>
					</excludes>
				</configuration>
			</plugin>

			<!-- Plugin Code coverage -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<executions>
					<!-- Prepares the property pointing to the JaCoCo runtime agent which 
						is passed as VM argument when Maven the Surefire plugin is executed. -->
					<execution>
						<id>pre-unit-test</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>
							<!-- Sets the name of the property containing the settings for JaCoCo 
								runtime agent. -->
							<propertyName>surefireArgLine</propertyName>
						</configuration>
					</execution>
					<!-- Ensures that the code coverage report for unit tests is created 
						after unit tests have been run. -->
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Coveralls -->
			<plugin>
				<groupId>org.eluder.coveralls</groupId>
				<artifactId>coveralls-maven-plugin</artifactId>
				<configuration>
					<format>xml</format>
					<maxmem>256m</maxmem>
					<aggregate>true</aggregate>
					<jacocoReports>
						<param>${project.reporting.outputDirectory}/jacoco-ut/jacoco.xml</param>
					</jacocoReports>
				</configuration>
			</plugin>

			<!-- License plugin -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<configuration>
					<verbose>false</verbose>
					<includes>
						<includes>**/*.java</includes>
					</includes>
				</configuration>

				<executions>
					<execution>
						<id>generate-license-headers</id>
						<goals>
							<goal>update-file-header</goal>
						</goals>
						<phase>process-sources</phase>
						<configuration>
							<roots>
								<root>src/main/java</root>
								<root>src/test/java</root>
							</roots>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Plant UML -->
			<plugin>
				<groupId>com.github.jeluard</groupId>
				<artifactId>plantuml-maven-plugin</artifactId>
				<configuration>
					<sourceFiles>
						<directory>${basedir}</directory>
						<includes>
							<include>src/main/resources/**/*.txt</include>
						</includes>
					</sourceFiles>
				</configuration>
				<executions>
					<execution>
						<id>plantuml-diagrams</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<phase>generate-sources</phase>
						<configuration>
							<outputDirectory>${basedir}/target/site/apidocs/doc-files</outputDirectory>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>net.sourceforge.plantuml</groupId>
						<artifactId>plantuml</artifactId>
						<version>${plantuml.version}</version>
					</dependency>
				</dependencies>
			</plugin>

		</plugins>
	</build>
</project>
