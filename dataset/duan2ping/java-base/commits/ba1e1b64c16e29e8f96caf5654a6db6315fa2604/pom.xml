<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!-- 由以下三者标识为一个maven项目，这三个元素(坐标)就能确定一个maven项目
         groupId：组织
         artifact：项目
         version>：版本
    -->

    <!-- 当前Maven模型的版本号，对于Maven2和Maven3来说，它只能是4.0.0 -->
    <modelVersion>4.0.0</modelVersion>
    <!--
        公司名或组织名：一般来说groupId是由三个部分组成，每个部分之间以"."分隔，第一部分是项目用途，
        比如用于商业的就是"com"，用于非营利性组织的就　　是"org"；第二部分是公司名，比如"tengxun"、"baidu"、"alibaba"；第三部分是你的项目名
    -->
    <groupId>com.my</groupId>
    <!-- 项目名或子项目名 -->
    <artifactId>DUAN_PING</artifactId>
    <!-- 版本号，SNAPSHOT意为快照，说明该项目还在开发中，是不稳定的版本 -->
    <version>1.0-SNAPSHOT</version>
    <!-- 项目打包的类型，可以使jar、war、rar、ear、pom，默认是jar -->
    <packaging>jar</packaging>
    <!-- 项目的名称, Maven产生的文档用 -->
    <name>duan2ping</name>
    <!-- 项目主页的URL, Maven产生的文档用 -->
    <url>http://www.duan2ping.com</url>
    <!-- 项目描述，可使用编写 -->
    <description> A maven project to study maven. </description>
    <!--
       properties是用来定义一些配置属性的，例如project.build.sourceEncoding（项目构建源码编码方式），
       可以设置为UTF-8，防止中文乱码，也可定义相关构建版本号，便于日后统一升级。
    -->
    <properties>
        <!-- 项目源码编码 -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!-- spring版本 -->
        <spring.version>4.1.4.RELEASE</spring.version>
        <!-- jackson版本 -->
        <jackson.version>2.5.0</jackson.version>
        <!-- 自定义变量 -->
        <xxxx>123</xxxx>
    </properties>

    <!-- 依赖集合 -->
    <dependencies>
        <!-- 依赖 -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <!--
                compile，缺省值，适用于所有阶段，会随着项目一起发布。
                provided，类似compile，期望JDK、容器或使用者会提供这个依赖。如servlet.jar。
                runtime，只在运行时使用，如JDBC驱动，适用运行和测试阶段。
                test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。
                system，类似provided，需要显式提供包含依赖的jar，Maven不会在Repository中查找它。
            -->
            <scope>compile</scope>
            <!-- 排除依赖冲突（项目有两个依赖项：A & B，而且A和B同时依赖了C，但不是同一个版本导致冲突） -->
            <exclusions>
                <!-- 去除依赖中与其他依赖冲突的依赖 -->
                <exclusion>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-project-info-reports-plugin</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
            <dependency>
                <groupId>commons-logging</groupId>
                <artifactId>commons-logging</artifactId>
                <version>1.1.3</version>
            </dependency>
            <dependency>
                <groupId>org.apache.shiro</groupId>
                <artifactId>shiro-core</artifactId>
                <version>1.2.3</version>
            </dependency>        <dependency>
        <groupId>org.apache.shiro</groupId>
        <artifactId>shiro-web</artifactId>
        <version>1.2.3</version>

    </dependency>
        <!-- 汉字转拼音 -->
        <dependency>
            <groupId>com.belerweb</groupId>
            <artifactId>pinyin4j</artifactId>
            <version>2.5.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-ehcache</artifactId>
            <version>1.2.3</version>
        </dependency>
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-spring</artifactId>
            <version>1.2.3</version>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.3</version>
        </dependency>
    </dependencies>

    <!-- 项目构建相关 -->
    <build>

        <!--
            构建Maven项目的时候，如果没有进行特殊的配置，Maven会按照标准的目录结构查找和处理各种类型文件。
            maven会将src/main/java和src/test/java这两个目录中的所有*.java文件会分别在comile和test-comiple阶段被编译，
            编译结果分别放到了target/classes和targe/test-classes目录中，
            但是这两个目录中的其他文件都会被忽略掉。
           src/main/resouces和src/test/resources这两个目录中的文件也会分别被复制到target/classes和target/test-classes目录中。
            打包插件默认会把target/classes这个目录中的所有内容打入到jar包或者war包中。
            即：
                src/main/java      ——  target/classes
                src/main/resouces  ——  target/classes
                src/test/java      ——  targe/test-classes
                src/test/resources ——  targe/test-classes
            默认将target/classes的所有内容打包成jar/war....
        -->
        <!--<resources>

        </resources>
-->
    </build>

</project>