<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	
	<groupId>junit</groupId>
	<artifactId>junit</artifactId>
	<version>4.12-SNAPSHOT</version>
	
	<name>JUnit</name>
	<url>http://junit.org</url>
	<description>JUnit is a unit testing framework for Java, created by Erich Gamma and Kent Beck.</description>
	<organization>
		<name>JUnit</name>
		<url>http://www.junit.org</url>
	</organization>
	<inceptionYear>2002</inceptionYear>
	<mailingLists>
		<mailingList>
			<name>JUnit Mailing List</name>
			<post>junit@yahoogroups.com</post>
			<archive>http://tech.groups.yahoo.com/group/junit/</archive>
		</mailingList>
	</mailingLists>
	<licenses>
		<license>
			<name>Common Public License Version 1.0</name>
			<url>http://www.opensource.org/licenses/cpl1.0.txt</url>
			<distribution>repo</distribution>
		</license>
	</licenses>
	<scm>
		<connection>scm:git:git://github.com/KentBeck/junit.git</connection>
		<developerConnection>scm:git:git@github.com:KentBeck/junit.git</developerConnection>
		<url>http://github.com/KentBeck/junit/tree/master</url>
	</scm>
	<developers>
		<developer>
			<id>dsaff</id>
			<name>David Saff</name>
			<email>david@saff.net</email>
		</developer>
	</developers>
	<contributors>
		<contributor>
			<name>JUnit contributors</name>
			<organization>JUnit</organization>
			<email>junit@yahoogroups.com</email>
			<url>https://github.com/KentBeck/junit/graphs/contributors</url>
			<roles>
				<role>developers</role>
			</roles>
		</contributor>
	</contributors>
	<properties>
		<hamcrestVersion>1.3</hamcrestVersion>
		<jdkVersion>1.5</jdkVersion>
		<project.build.sourceEncoding>ISO-8859-1</project.build.sourceEncoding>
	</properties>
	<prerequisites>
		<maven>3.0.4</maven>
	</prerequisites>
	<dependencies>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-core</artifactId>
			<version>${hamcrestVersion}</version>
		</dependency>
	</dependencies>
	<distributionManagement>
		<downloadUrl>http://sourceforge.net/projects/junit/</downloadUrl>
		<!--
			Currently the deployment is under development and enabled for
			the Snapshot Repository of the Maven Central.
		-->
		<snapshotRepository>
			<id>sonatype-nexus-staging</id>
			<name>upload.to.maven.central</name>
			<url>https://oss.sonatype.org/content/repositories/snapshots/</url>
		</snapshotRepository>
		<!--
			The Release Repository is temporarily disabled until the Maven build process
			is officially proved to deploy to the Maven Central.
		<repository>
			<id>sonatype-nexus-staging</id>
			<name>upload.to.maven.central</name>
			<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
		</repository>
		-->
	</distributionManagement>
	<build>
		<resources>
			<resource>
				<directory>${project.basedir}/src/main/resources</directory>
			</resource>
			<resource>
				<directory>${project.basedir}</directory>
				<includes>
					<include>LICENSE.txt</include>
				</includes>
			</resource>
		</resources>
		<extensions>
			<!--
				Specify HTTP and FTP providers.
				The Maven Wagon is a transport abstraction.
				For more information see http://maven.apache.org/wagon/index.html
				and the guide
				http://maven.apache.org/plugins/maven-deploy-plugin/examples/deploy-ssh-external.html
			-->
			<extension>
				<groupId>org.apache.maven.wagon</groupId>
				<artifactId>wagon-ftp</artifactId>
				<version>1.0</version>
			</extension>
			<extension>
				<groupId>org.apache.maven.wagon</groupId>
				<artifactId>wagon-http</artifactId>
				<version>1.0</version>
			</extension>
		</extensions>
		<plugins>
			<!--
				Both "org.apache" and "org.codehaus" are default providers of MOJO plugins
				which are especially dedicated to Maven projects.
				The MOJO stands for "Maven plain Old Java Object".
				Each mojo is an executable goal in Maven, and a plugin is a distribution of
				one or more related mojos.
				For more information see http://maven.apache.org/plugin-developers/index.html

				The following plugins are ordered according the Maven build lifecycle.
				http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
			-->
			<plugin>
				<!--
					Checks that the version of user's maven installation is 3.0.4,
					the JDK is 1.5+, no non-standard repositories are specified in
					the project, requires only release versions of dependencies of other artifacts.
				-->
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>1.1.1</version>
				<executions>
					<execution>
						<id>enforce-versions</id>
						<phase>initialize</phase>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<fail>true</fail>
							<rules>
								<requireMavenVersion>
									<!-- Some plugin features require a recent Maven runtime to work properly -->
									<message>Current version of Maven ${maven.version} required to build the project should be ${project.prerequisites.maven}, or higher!</message>
									<version>[${project.prerequisites.maven},)</version>
								</requireMavenVersion>
								<requireJavaVersion>
									<message>Current JDK version ${java.version} should be ${jdkVersion}, or higher!</message>
									<version>${jdkVersion}</version>
								</requireJavaVersion>
								<requireNoRepositories>
									<message>Best Practice is to never define repositories in pom.xml (use a repository manager instead).</message>
								</requireNoRepositories>
								<requireReleaseDeps>
									<message>No Snapshots Dependencies Allowed!</message>
								</requireReleaseDeps>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin><!-- Using jdk 1.5.0_22, package-info.java files are compiled correctly. -->
				<!--
					java compiler plugin forked in extra process
				-->
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.5.1</version>
				<configuration>
					<encoding>${project.build.sourceEncoding}</encoding>
					<source>${jdkVersion}</source>
					<target>${jdkVersion}</target>
					<compilerVersion>1.5</compilerVersion>
					<showDeprecation>true</showDeprecation>
					<showWarnings>true</showWarnings>
					<debug>true</debug>
					<fork>true</fork>
					<compilerArgument>-Xlint:unchecked</compilerArgument>
					<maxmem>128m</maxmem>
				</configuration>
			</plugin>
			<plugin>
				<!--
					A plugin which uses the JUnit framework in order to start
					our junit suite "AllTests" after the sources are compiled.
				-->
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.12.3</version>
				<configuration>
					<test>org/junit/tests/AllTests.java</test>
					<useSystemClassLoader>true</useSystemClassLoader>
					<enableAssertions>false</enableAssertions>
				</configuration>
			</plugin>
			<plugin>
				<!--
					This plugin can package the main artifact's sources (src/main/java)
					in to jar archive. See target/junit-*-sources.jar   .
				-->
				<artifactId>maven-source-plugin</artifactId>
				<version>2.2</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!--
					This plugin can generate Javadoc by a forked
					process and then package the Javadoc in jar archive
					target/junit-*-javadoc.jar    .
				-->
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.8.1</version>
				<executions>
					<execution>
						<id>attach-javadoc</id>
						<phase>package</phase>
						<goals>
							<goal>jar</goal>
						</goals>
						<configuration>
							<stylesheetfile>${basedir}/src/main/javadoc/stylesheet.css</stylesheetfile>
							<show>protected</show>
							<author>false</author>
							<version>false</version>
							<detectLinks>false</detectLinks>
							<linksource>true</linksource>
							<keywords>true</keywords>
							<use>false</use>
							<windowtitle>JUnit API</windowtitle>
							<encoding>UTF-8</encoding>
							<locale>en</locale>
							<javadocVersion>1.5</javadocVersion>
							<javaApiLinks>
								<property>
									<name>api_1.5</name>
									<value>http://docs.oracle.com/javase/1.5.0/docs/api/index.html</value>
								</property>
							</javaApiLinks>
							<excludePackageNames>junit.*,*.internal,*.internal.*</excludePackageNames>
							<verbose>true</verbose>
							<minmemory>32m</minmemory>
							<maxmemory>128m</maxmemory>
							<failOnError>true</failOnError>
							<includeDependencySources>true</includeDependencySources>
							<dependencySourceIncludes>
								<dependencySourceInclude>org.hamcrest:hamcrest-core:*</dependencySourceInclude>
							</dependencySourceIncludes>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!--
					This plugin fabricates a zip file including the traditional content
					(sources, archives, Javadoc, and JUnit documentation)
					before deploying to sourceforge.
				-->
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.3</version>
				<executions>
					<execution>
						<id>assembly ${project.artifactId}-${project.version}.zip for sourceforge</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<appendAssemblyId>false</appendAssemblyId>
							<descriptors>
								<descriptor>src/main/assembly/src.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!--
					The goal is to modify the SNAPSHOT version of development
					to a release version. See the profile with id "checkSnapshot".
					The plugin does not have a default phase to execute, thus you
					can execute it in command line:
					mvn -f pom.xml release:update-versions
					See the Makefile.
				-->
				<artifactId>maven-release-plugin</artifactId>
				<version>2.3.2</version>
				<configuration><!-- import release version without user's prompt if non-empty property value; otherwise prompt -->
					<developmentVersion>${releaseVersion}</developmentVersion>
				</configuration>
			</plugin>
			<plugin>
				<!--
					This wagon plugin uploads all jar archives and one zip file
					to the sourceforge FTP server.
					See the credentials for serve id "sourceforge-staging"
					in src/main/config/settings.xml   .
				-->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>wagon-maven-plugin</artifactId>
				<version>1.0-beta-4</version>
				<executions>
					<execution>
						<id>upload-to-sourceforge</id>
						<phase>deploy</phase>
						<goals>
							<goal>upload</goal>
						</goals>
						<configuration>
							<serverId>sourceforge-staging</serverId>
							<fromDir>${project.build.directory}</fromDir>
							<includes>*.zip,*.jar</includes>
							<url>ftp://upload.sourceforge.net/</url>
							<toDir>incoming</toDir>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<profile>
			<id>checkRelease</id>
			<!--
				Purpose:
				This section will check that the version is a release.
				The release artifacts are deployed to Maven central release repository.
			-->
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-enforcer-plugin</artifactId>
						<version>1.1.1</version>
						<executions>
							<execution>
								<id>enforce-versions</id>
								<phase>initialize</phase>
								<goals>
									<goal>enforce</goal>
								</goals>
								<configuration>
									<fail>true</fail>
									<rules>
										<requireReleaseVersion>
											<message>No Snapshot Project Allowed!</message>
										</requireReleaseVersion>
									</rules>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>sign</id>
			<!--
				Purpose:
				Release Management system has to use this profile and sign all artifacts to deploy.
			-->
			<build>
				<plugins>
					<plugin>
						<!--
							The goal is to sign all artifacts so that the user may verify them before downloading.
							The automatic build system may reuire your key ID, and passphrase specified using system properties:
							-Dgpg.passphrase="<passphrase>" -Dgpg.keyname="<your key ID>"
							In order to create the key pair, use the command "gpg &ndash;&ndash;gen-key".
							(&ndash;&ndash; stands for double dash)
						-->
						<artifactId>maven-gpg-plugin</artifactId>
						<version>1.4</version>
						<executions>
							<execution>
								<id>gpg-sign</id>
								<phase>install</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>