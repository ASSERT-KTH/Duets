<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <name>OpenTripPlanner</name>
    <url>http://opentripplanner.org/</url>
    <groupId>org.opentripplanner</groupId>
    <artifactId>otp</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <scm>
        <connection>scm:git:http://github.com/opentripplanner/OpenTripPlanner.git</connection>
        <developerConnection>scm:git:ssh://git@github.com/opentripplanner/OpenTripPlanner.git</developerConnection>
        <url>http://github.com/opentripplanner/OpenTripPlanner</url>
    </scm>

    <properties>
        <geotools.version>10.5</geotools.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <distribution_id>opengeo</distribution_id>
        <distribution_name>OpenGeo Maven Repository</distribution_name>
        <distribution_url>dav:http://repo.opengeo.org</distribution_url>
    </properties>

    <build>

        <!-- Necessary for uploading/deploying artifacts to Maven repos via WebDAV. -->
        <extensions>
            <extension>
                <groupId>org.apache.maven.wagon</groupId>
                <artifactId>wagon-webdav</artifactId>
                <version>1.0-beta-2</version>
            </extension>
        </extensions>

        <!-- Filtering will perform substitution on maven-version.properties, see git commit id plugin below. -->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>src/client</directory>
                <targetPath>client</targetPath>
                <filtering>false</filtering>
            </resource>
        </resources>

        <pluginManagement>
            <plugins>
                <!-- m2eclipse lifecycle mapping configuration. This controls which Maven build goals should
                be performed during incremental builds within the Eclipse IDE. There are sensible defaults
                for most plugins, but some others require manual configuration with <action><ignore /> or
                <action><execute /> filters. This section only affects incremental builds within Eclipse,
                not command-line Maven builds. That's why it's a pluginManagement without an accompanying plugin. -->
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>org.apache.maven.plugins</groupId>
                                        <artifactId>maven-dependency-plugin</artifactId>
                                        <versionRange>[1.0,)</versionRange>
                                        <goals>
                                            <goal>copy-dependencies</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore/>
                                    </action>
                                </pluginExecution>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>pl.project13.maven</groupId>
                                        <artifactId>git-commit-id-plugin</artifactId>
                                        <versionRange>[1.0,)</versionRange>
                                        <goals>
                                            <goal>revision</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <execute/>
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <!-- Target Java versions -->
                    <source>1.6</source>
                    <target>1.6</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <configuration>
                    <!-- by default, release:prepare runs goals 'clean' and 'verify'. Javadoc generation
                    in release:perform requires the new release versions of our artifacts to already be
                    installed in the local repository. -->
                    <preparationGoals>clean install</preparationGoals>
                    <autoVersionSubmodules>true</autoVersionSubmodules>
                    <!-- The site generation step can fail. Run it in release:prepare to make sure it
                    works before tagging the release. Enunciate model validation is currently failing,
                    apparently due to a problem in enunciate.
                    <preparationGoals>clean install site</preparationGoals> -->
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.12</version>
                <configuration>
                    <argLine>-Xmx2G</argLine>
                    <!-- Jenkins needs XML test reports to determine whether the build is stable. -->
                    <disableXmlReport>false</disableXmlReport>
                </configuration>
            </plugin>
            <plugin>
                <!-- Generate REST API documentation from Jersey-annotated classes -->
                <groupId>org.codehaus.enunciate</groupId>
                <artifactId>maven-enunciate-plugin</artifactId>
                <version>1.28</version>
                <executions>
                    <execution>
                        <!-- default binding for docs goal is process-sources phase, since enunciate can make a web service -->
                        <phase>site</phase>
                        <goals>
                            <goal>docs</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!-- change this to wherever you want the docs -->
                    <docsDir>${project.build.directory}/site/enunciate</docsDir>
                </configuration>
            </plugin>
            <plugin>
                <!-- Get current Git commit information for use in MavenVersion class.
                  Commit information is stored in Maven variables, which are then substituted
                  into the properties file. The plugin has a mode to generate a git.properties file,
                  but we need the Maven project version as well, so we perform substitution. -->
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
                <version>2.1.7</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>revision</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <verbose>true</verbose>
                    <dotGitDirectory>${project.basedir}.git</dotGitDirectory>
                </configuration>
            </plugin>

            <!-- There used to be a dependency-plugin:copy-dependencies plugin entry
              here, but the shade-plugin will explode the dependencies even if they aren't
              manually copied in. -->

            <plugin>
                <!-- We want to create a standalone jar that can be run on the command
                  line. Java does not really allow this - you cannot place jars inside of jars.
                  You must either provide all the dependency jars to the user (usually lib/
                  under the directory containing the runnable jar) or explode all the jars
                  and repackage them into a single jar. The problem is that while class files
                  are nicely organized into the package namespace and should not collide, the
                  META-INF directories of the jars will collide. Maven's standard assembly
                  plugin does not account for this and will just clobber metadata. This then
                  causes runtime errors, particularly with Spring. Instead, we use the shade
                  plugin which has transformers that will for example append files of the same
                  name rather than overwrite them in the combined JAR. NB: Don't use a version
                  of the shade plugin older than 1.3.2, as it fixed MSHADE-76 (files not merged
                  properly if some input files are missing a terminating newline) -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>2.2</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <finalName>otp</finalName>
                            <!-- MinimizeJar removes unused classes, (classes not imported explicitly by name).
                              We have eliminated most Jersey auto-scanning, but there is still some need for include
                              filters to force-include classes that are dynamically loaded by name/auto-scanned. -->
                            <!-- This roughly halves the size of the OTP JAR, bringing it down to around 20 MB.
                              <minimizeJar>true</minimizeJar>
                              <filters> <filter> <artifact>com.sun.jersey:*</artifact> <includes> <include>**</include>
                              </includes> </filter> <filter> <artifact>org.opentripplanner:*</artifact>
                              <includes> <include>**</include> </includes> </filter> </filters> -->
                            <artifactSet>
                                <excludes>
                                    <!-- Do not explode the client WAR. -->
                                    <!-- Actually, shade seems to skip the WAR even without this exclusion (verify) -->
                                    <exclude>org.opentripplanner:otp-leaflet-client</exclude>
                                    --&gt;
                                </excludes>
                            </artifactSet>
                            <transformers>
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <manifestEntries>
                                        <Main-Class>org.opentripplanner.standalone.OTPMain</Main-Class>
                                        <!-- The ImageIO lines allow some image reader plugins to work (TODO elaborate) -->
                                        <Specification-Title>Java Advanced Imaging Image I/O
                                            Tools
                                        </Specification-Title>
                                        <Specification-Version>1.1</Specification-Version>
                                        <Specification-Vendor>Sun Microsystems, Inc.</Specification-Vendor>
                                        <Implementation-Title>com.sun.media.imageio</Implementation-Title>
                                        <Implementation-Version>1.1</Implementation-Version>
                                        <Implementation-Vendor>Sun Microsystems, Inc.</Implementation-Vendor>
                                        <Extension-Name>com.sun.media.imageio</Extension-Name>
                                    </manifestEntries>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <distributionManagement>
        <repository>
            <id>${distribution_id}</id>
            <name>${distribution_name}</name>
            <url>${distribution_url}</url>
        </repository>
        <site>
            <id>opentripplanner-docs</id>
            <name>OpenTripPlanner Docs</name>
            <url>scp://www.opentripplanner.org:7777/var/www/opentripplanner.org/mvn-site</url>
        </site>
    </distributionManagement>

    <reporting>
        <!--
        Reporting plugin versions cannot be managed with entries in <build><plugins><pluginmanagement>
        but would need a separate <reporting><plugins><pluginmanagement> section.
        -->
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>2.7</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <!-- empty: disable project-info reports -->
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.9.1</version>
                <configuration>
                    <links>
                        <link>http://developer.onebusaway.org/modules/onebusaway-gtfs-modules/1.3.3/apidocs/</link>
                    </links>
                </configuration>
                <reportSets>
                    <reportSet>
                        <reports>
                            <!-- enable only aggregate-level javadoc generation -->
                            <report>aggregate</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
        </plugins>
    </reporting>

    <repositories>
        <!-- Hack to force maven to check central first. Maven central is inherited from the superpom,
          but ends up at the end of the list. Though most of the time the artifact is in central,
          Maven tries to download from every other repository and fails before checking central.
          Do not change the id from central2 to central, otherwise the entry will be ignored. -->
        <repository>
            <id>central2</id>
            <name>check central first to avoid a lot of not found warnings</name>
            <url>http://repo1.maven.org/maven2</url>
        </repository>
        <repository>
            <id>download.java.net</id>
            <name>Java.net Repository for Maven</name>
            <url>http://download.java.net/maven/2/</url>
        </repository>
        <repository>
            <id>releases.onebusaway.org</id>
            <url>http://nexus.onebusaway.org/content/repositories/releases/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>osgeo</id>
            <name>Open Source Geospatial Foundation Repository</name>
            <url>http://download.osgeo.org/webdav/geotools/</url>
        </repository>
        <repository>
            <id>axis</id>
            <name>axis</name>
            <url>http://people.apache.org/repo/m1-ibiblio-rsync-repository/org.apache.axis2/</url>
        </repository>
        <repository>
            <id>opengeo</id>
            <name>OpenGeo Maven Repository</name>
            <url>http://repo.opengeo.org/</url>
            <!-- Avoid downloading OTP snapshots from repo -->
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>

    <dependencies>
        <!-- MapDB, for GTFS and OSM loading experiments. -->
        <dependency>
            <groupId>org.mapdb</groupId>
            <artifactId>mapdb</artifactId>
            <version>0.9.10</version>
        </dependency>
        <!-- Logging library -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.0.13</version>
        </dependency>
        <!-- Jersey uses java.util logging, redirect it via slf4j API to Logback -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jul-to-slf4j</artifactId>
            <version>1.7.6</version>
        </dependency>
        <!-- Lombok provides annotation-driven field accessor methods. -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.12.6</version>
        </dependency>
        <!-- Guava provides improved collections, among other things. -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>14.0.1</version>
        </dependency>

        <!-- GEOTOOLS AND JTS TOPOLOGY: geometry, rasters and projections. -->
        <!-- GEOTOOLS includes JTS as a transitive dependency. -->
        <dependency>
            <groupId>org.geotools</groupId>
            <artifactId>gt-geojson</artifactId>
            <version>${geotools.version}</version>
        </dependency>
        <dependency>
            <groupId>org.geotools</groupId>
            <artifactId>gt-referencing</artifactId>
            <version>${geotools.version}</version>
        </dependency>
        <dependency>
            <groupId>org.geotools</groupId>
            <artifactId>gt-coverage</artifactId>
            <version>${geotools.version}</version>
        </dependency>
        <dependency>
            <groupId>org.geotools</groupId>
            <artifactId>gt-arcgrid</artifactId>
            <version>${geotools.version}</version>
        </dependency>
        <dependency>
            <groupId>org.geotools</groupId>
            <artifactId>gt-shapefile</artifactId>
            <version>${geotools.version}</version>
        </dependency>
        <dependency>
            <groupId>org.geotools</groupId>
            <artifactId>gt-geotiff</artifactId>
            <version>${geotools.version}</version>
        </dependency>
        <!-- provides EPSG database for projections (shapefile loading) -->
        <dependency>
            <groupId>org.geotools</groupId>
            <artifactId>gt-epsg-hsql</artifactId>
            <version>${geotools.version}</version>
        </dependency>

        <!-- TESTING -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.8.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <version>1.9.0</version>
            <scope>test</scope>
        </dependency>

        <!-- Jersey annontation-driven REST web services (JAX-RS implementation) -->
        <dependency>
            <groupId>org.glassfish.jersey.core</groupId>
            <artifactId>jersey-server</artifactId>
            <version>2.8</version>
        </dependency>
        <!-- Deploy Jersey apps in stand-alone Grizzly server instead of a servlet container. -->
        <dependency>
            <groupId>org.glassfish.jersey.containers</groupId>
            <artifactId>jersey-container-grizzly2-http</artifactId>
            <version>2.8</version>
        </dependency>

        <!-- Jackson modules to serialize Jersey response objects to JSON. -->
        <dependency>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-json-provider</artifactId>
            <version>2.3.3</version>
        </dependency>
        <!-- Jackson modules to serialize Jersey response objects to XML. -->
        <dependency>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-xml-provider</artifactId>
            <version>2.3.2</version>
        </dependency>

        <!-- Asynchronous Websocket-capable client, for message-driven incremental GTFS-RT -->
        <!-- AsyncHttpClient Websockets need a newer version of Grizzly than Jersey does. -->
        <dependency>
            <groupId>com.ning</groupId>
            <artifactId>async-http-client</artifactId>
            <version>1.7.19</version>
        </dependency>

        <!-- OTHER DEPENDENCIES -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
            <scope>provided</scope> <!-- this dependency is provided by the servlet container -->
        </dependency>
        <dependency>
            <groupId>javax.annotation</groupId>
            <artifactId>jsr250-api</artifactId>
            <version>1.0</version>
        </dependency>
        <dependency>
            <groupId>cglib</groupId>
            <artifactId>cglib</artifactId>
            <version>2.2.2</version>
        </dependency>
        <dependency>
            <groupId>javax.inject</groupId>
            <artifactId>javax.inject</artifactId>
            <version>1</version>
        </dependency>
        <!-- OBA GTFS loader -->
        <dependency>
            <groupId>org.onebusaway</groupId>
            <artifactId>onebusaway-gtfs</artifactId>
            <version>1.3.3</version>
        </dependency>
        <!-- Processing is used for the debug GUI (though we could probably use just Java2D) -->
        <dependency>
            <groupId>org.processing</groupId>
            <artifactId>core</artifactId>
            <version>1.0.7</version>
        </dependency>
        <!-- Google Protocol Buffers compact binary serialization format -->
        <dependency>
            <groupId>com.google.protobuf</groupId>
            <artifactId>protobuf-java</artifactId>
            <version>2.5.0</version>
            <type>jar</type>
            <scope>compile</scope>
        </dependency>
        <!-- Joda Time is a widely used replacement for flaky Java time classes. -->
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>2.1</version>
        </dependency>
        <!-- PNGJ is used for making Analyst TimeGrids-->
        <dependency>
            <groupId>ar.com.hjg</groupId>
            <artifactId>pngj</artifactId>
            <version>2.0.1</version>
        </dependency>
        <!-- FlexJSON deserializes JSON in Nominatim/Yahoo/Google geocoder modules. -->
        <!-- Could be done with Jackson JSON trees. -->
        <dependency>
            <groupId>net.sf.flexjson</groupId>
            <artifactId>flexjson</artifactId>
            <version>2.0</version>
        </dependency>
        <!-- Apache Axis: Used in NEDDownloader to fetch elevation tiles. -->
        <dependency>
            <groupId>org.apache.axis</groupId>
            <artifactId>axis</artifactId>
            <version>1.4</version>
        </dependency>
        <!-- Apache Axis: Used in NEDDownloader to fetch elevation tiles. -->
        <dependency>
            <groupId>org.apache.axis</groupId>
            <artifactId>axis-jaxrpc</artifactId>
            <version>1.4</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-compress</artifactId>
            <version>1.0</version>
        </dependency>
        <!-- Used in DegreeGridNEDTileSource to fetch tiles from Amazon S3 -->
        <dependency>
            <groupId>net.java.dev.jets3t</groupId>
            <artifactId>jets3t</artifactId>
            <version>0.8.1</version>
        </dependency>
        <!-- OpenStreetMap protobuf (PBF) definitions -->
        <dependency>
            <groupId>crosby.binary</groupId>
            <artifactId>osmpbf</artifactId>
            <version>1.2.1</version>
        </dependency>
        <!-- Command line parameter parsing -->
        <dependency>
            <groupId>com.beust</groupId>
            <artifactId>jcommander</artifactId>
            <version>1.27</version>
        </dependency>
        <!-- CSV parser -->
        <dependency>
            <groupId>net.sourceforge.javacsv</groupId>
            <artifactId>javacsv</artifactId>
            <version>2.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.1.2</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-math3</artifactId>
            <version>3.0</version>
        </dependency>

        <!-- Lucene for sophisticated text search -->
        <dependency>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-core</artifactId>
            <version>4.7.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-queries</artifactId>
            <version>4.7.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-analyzers-common</artifactId>
            <version>4.7.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-queryparser</artifactId>
            <version>4.7.1</version>
        </dependency>

    </dependencies>

</project>
